
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005aa  00800200  000057c0  00005854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000057c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a4  008007aa  008007aa  00005dfe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005dfe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b28  00000000  00000000  00005e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e2cd  00000000  00000000  000069c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ae6  00000000  00000000  00014c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006bed  00000000  00000000  00018777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000024dc  00000000  00000000  0001f364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004685  00000000  00000000  00021840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c1f5  00000000  00000000  00025ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af8  00000000  00000000  000320ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	47 c2       	rjmp	.+1166   	; 0x490 <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	97 c7       	rjmp	.+3886   	; 0xf60 <__vector_12>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__vector_25>
      68:	0c 94 f5 18 	jmp	0x31ea	; 0x31ea <__vector_26>
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__vector_36>
      94:	0c 94 8b 19 	jmp	0x3316	; 0x3316 <__vector_37>
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 82 24 	jmp	0x4904	; 0x4904 <__vector_39>
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__vector_51>
      d0:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <__vector_52>
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <__vector_54>
      dc:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__vector_55>
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bf 01       	movw	r22, r30
      e6:	bf 01       	movw	r22, r30
      e8:	bf 01       	movw	r22, r30
      ea:	f9 01       	movw	r30, r18
      ec:	01 02       	muls	r16, r17
      ee:	17 02       	muls	r17, r23
      f0:	bf 01       	movw	r22, r30
      f2:	bf 01       	movw	r22, r30
      f4:	f9 01       	movw	r30, r18
      f6:	01 02       	muls	r16, r17
      f8:	a4 24       	eor	r10, r4
      fa:	14 25       	eor	r17, r4
      fc:	14 25       	eor	r17, r4
      fe:	14 25       	eor	r17, r4
     100:	14 25       	eor	r17, r4
     102:	14 25       	eor	r17, r4
     104:	14 25       	eor	r17, r4
     106:	14 25       	eor	r17, r4
     108:	a4 24       	eor	r10, r4
     10a:	14 25       	eor	r17, r4
     10c:	14 25       	eor	r17, r4
     10e:	14 25       	eor	r17, r4
     110:	14 25       	eor	r17, r4
     112:	14 25       	eor	r17, r4
     114:	14 25       	eor	r17, r4
     116:	14 25       	eor	r17, r4
     118:	a6 24       	eor	r10, r6
     11a:	14 25       	eor	r17, r4
     11c:	14 25       	eor	r17, r4
     11e:	14 25       	eor	r17, r4
     120:	14 25       	eor	r17, r4
     122:	14 25       	eor	r17, r4
     124:	14 25       	eor	r17, r4
     126:	14 25       	eor	r17, r4
     128:	14 25       	eor	r17, r4
     12a:	14 25       	eor	r17, r4
     12c:	14 25       	eor	r17, r4
     12e:	14 25       	eor	r17, r4
     130:	14 25       	eor	r17, r4
     132:	14 25       	eor	r17, r4
     134:	14 25       	eor	r17, r4
     136:	14 25       	eor	r17, r4
     138:	a6 24       	eor	r10, r6
     13a:	14 25       	eor	r17, r4
     13c:	14 25       	eor	r17, r4
     13e:	14 25       	eor	r17, r4
     140:	14 25       	eor	r17, r4
     142:	14 25       	eor	r17, r4
     144:	14 25       	eor	r17, r4
     146:	14 25       	eor	r17, r4
     148:	14 25       	eor	r17, r4
     14a:	14 25       	eor	r17, r4
     14c:	14 25       	eor	r17, r4
     14e:	14 25       	eor	r17, r4
     150:	14 25       	eor	r17, r4
     152:	14 25       	eor	r17, r4
     154:	14 25       	eor	r17, r4
     156:	14 25       	eor	r17, r4
     158:	10 25       	eor	r17, r0
     15a:	14 25       	eor	r17, r4
     15c:	14 25       	eor	r17, r4
     15e:	14 25       	eor	r17, r4
     160:	14 25       	eor	r17, r4
     162:	14 25       	eor	r17, r4
     164:	14 25       	eor	r17, r4
     166:	14 25       	eor	r17, r4
     168:	db 24       	eor	r13, r11
     16a:	14 25       	eor	r17, r4
     16c:	14 25       	eor	r17, r4
     16e:	14 25       	eor	r17, r4
     170:	14 25       	eor	r17, r4
     172:	14 25       	eor	r17, r4
     174:	14 25       	eor	r17, r4
     176:	14 25       	eor	r17, r4
     178:	14 25       	eor	r17, r4
     17a:	14 25       	eor	r17, r4
     17c:	14 25       	eor	r17, r4
     17e:	14 25       	eor	r17, r4
     180:	14 25       	eor	r17, r4
     182:	14 25       	eor	r17, r4
     184:	14 25       	eor	r17, r4
     186:	14 25       	eor	r17, r4
     188:	cf 24       	eor	r12, r15
     18a:	14 25       	eor	r17, r4
     18c:	14 25       	eor	r17, r4
     18e:	14 25       	eor	r17, r4
     190:	14 25       	eor	r17, r4
     192:	14 25       	eor	r17, r4
     194:	14 25       	eor	r17, r4
     196:	14 25       	eor	r17, r4
     198:	f3 24       	eor	r15, r3

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	02 ed       	ldi	r16, 0xD2	; 210
     19c:	17 e0       	ldi	r17, 0x07	; 7
     19e:	0f 2e       	mov	r0, r31
     1a0:	f2 e0       	ldi	r31, 0x02	; 2
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e0       	ldi	r31, 0x08	; 8
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	2f d5       	rcall	.+2654   	; 0xc2a <uxListRemove>
     1cc:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <uxCurrentNumberOfTasks>
     1d6:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	9e d4       	rcall	.+2364   	; 0xb26 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	9c d4       	rcall	.+2360   	; 0xb26 <vPortFree>
     1ee:	80 91 d1 07 	lds	r24, 0x07D1	; 0x8007d1 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	ea d5       	rcall	.+3028   	; 0xdd4 <vPortYield>
     200:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <pxCurrentTimerList>
     232:	f0 91 3b 08 	lds	r31, 0x083B	; 0x80083b <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	0f c1       	rjmp	.+542    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 21 16 	call	0x2c42	; 0x2c42 <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	65 c0       	rjmp	.+202    	; 0x330 <prvTimerTask+0x12a>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskResumeAll>
     27e:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <pxCurrentTimerList>
     282:	f0 91 3b 08 	lds	r31, 0x083B	; 0x80083b <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	c8 d4       	rcall	.+2448   	; 0xc2a <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	87 89       	ldd	r24, Z+23	; 0x17
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 31 15 	call	0x2a62	; 0x2a62 <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	57 96       	adiw	r26, 0x17	; 23
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9f c0       	rjmp	.+318    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <xTimerQueue>
     31c:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <xTimerQueue+0x1>
     320:	0e 94 45 0b 	call	0x168a	; 0x168a <vQueueWaitForMessageRestricted>
     324:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskResumeAll>
     328:	81 11       	cpse	r24, r1
     32a:	8a c0       	rjmp	.+276    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     32c:	53 d5       	rcall	.+2726   	; 0xdd4 <vPortYield>
     32e:	88 c0       	rjmp	.+272    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     330:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskResumeAll>
     334:	85 c0       	rjmp	.+266    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	88 23       	and	r24, r24
     33a:	0c f4       	brge	.+2      	; 0x33e <prvTimerTask+0x138>
     33c:	81 c0       	rjmp	.+258    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     33e:	4e 80       	ldd	r4, Y+6	; 0x06
     340:	5f 80       	ldd	r5, Y+7	; 0x07
     342:	d2 01       	movw	r26, r4
     344:	1c 96       	adiw	r26, 0x0c	; 12
     346:	8d 91       	ld	r24, X+
     348:	9c 91       	ld	r25, X
     34a:	1d 97       	sbiw	r26, 0x0d	; 13
     34c:	89 2b       	or	r24, r25
     34e:	19 f0       	breq	.+6      	; 0x356 <prvTimerTask+0x150>
     350:	c2 01       	movw	r24, r4
     352:	02 96       	adiw	r24, 0x02	; 2
     354:	6a d4       	rcall	.+2260   	; 0xc2a <uxListRemove>
     356:	ce 01       	movw	r24, r28
     358:	08 96       	adiw	r24, 0x08	; 8
     35a:	0e 94 21 16 	call	0x2c42	; 0x2c42 <prvSampleTimeNow>
     35e:	8b 01       	movw	r16, r22
     360:	9c 01       	movw	r18, r24
     362:	e9 81       	ldd	r30, Y+1	; 0x01
     364:	0e 2e       	mov	r0, r30
     366:	00 0c       	add	r0, r0
     368:	ff 0b       	sbc	r31, r31
     36a:	ea 30       	cpi	r30, 0x0A	; 10
     36c:	f1 05       	cpc	r31, r1
     36e:	08 f0       	brcs	.+2      	; 0x372 <prvTimerTask+0x16c>
     370:	67 c0       	rjmp	.+206    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     372:	88 27       	eor	r24, r24
     374:	ee 58       	subi	r30, 0x8E	; 142
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	8f 4f       	sbci	r24, 0xFF	; 255
     37a:	0c 94 26 27 	jmp	0x4e4c	; 0x4e4c <__tablejump2__>
     37e:	f2 01       	movw	r30, r4
     380:	87 89       	ldd	r24, Z+23	; 0x17
     382:	81 60       	ori	r24, 0x01	; 1
     384:	87 8b       	std	Z+23, r24	; 0x17
     386:	ca 80       	ldd	r12, Y+2	; 0x02
     388:	db 80       	ldd	r13, Y+3	; 0x03
     38a:	ec 80       	ldd	r14, Y+4	; 0x04
     38c:	fd 80       	ldd	r15, Y+5	; 0x05
     38e:	46 85       	ldd	r20, Z+14	; 0x0e
     390:	57 85       	ldd	r21, Z+15	; 0x0f
     392:	60 89       	ldd	r22, Z+16	; 0x10
     394:	71 89       	ldd	r23, Z+17	; 0x11
     396:	4c 0d       	add	r20, r12
     398:	5d 1d       	adc	r21, r13
     39a:	6e 1d       	adc	r22, r14
     39c:	7f 1d       	adc	r23, r15
     39e:	c2 01       	movw	r24, r4
     3a0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <prvInsertTimerInActiveList>
     3a4:	88 23       	and	r24, r24
     3a6:	09 f4       	brne	.+2      	; 0x3aa <prvTimerTask+0x1a4>
     3a8:	4b c0       	rjmp	.+150    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3aa:	d2 01       	movw	r26, r4
     3ac:	54 96       	adiw	r26, 0x14	; 20
     3ae:	ed 91       	ld	r30, X+
     3b0:	fc 91       	ld	r31, X
     3b2:	55 97       	sbiw	r26, 0x15	; 21
     3b4:	c2 01       	movw	r24, r4
     3b6:	19 95       	eicall
     3b8:	f2 01       	movw	r30, r4
     3ba:	87 89       	ldd	r24, Z+23	; 0x17
     3bc:	82 ff       	sbrs	r24, 2
     3be:	40 c0       	rjmp	.+128    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3c0:	4a 81       	ldd	r20, Y+2	; 0x02
     3c2:	5b 81       	ldd	r21, Y+3	; 0x03
     3c4:	6c 81       	ldd	r22, Y+4	; 0x04
     3c6:	7d 81       	ldd	r23, Y+5	; 0x05
     3c8:	86 85       	ldd	r24, Z+14	; 0x0e
     3ca:	97 85       	ldd	r25, Z+15	; 0x0f
     3cc:	a0 89       	ldd	r26, Z+16	; 0x10
     3ce:	b1 89       	ldd	r27, Z+17	; 0x11
     3d0:	9a 01       	movw	r18, r20
     3d2:	ab 01       	movw	r20, r22
     3d4:	28 0f       	add	r18, r24
     3d6:	39 1f       	adc	r19, r25
     3d8:	4a 1f       	adc	r20, r26
     3da:	5b 1f       	adc	r21, r27
     3dc:	c8 2c       	mov	r12, r8
     3de:	d9 2c       	mov	r13, r9
     3e0:	ea 2c       	mov	r14, r10
     3e2:	fb 2c       	mov	r15, r11
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	c2 01       	movw	r24, r4
     3ec:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <xTimerGenericCommand>
     3f0:	27 c0       	rjmp	.+78     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3f2:	d2 01       	movw	r26, r4
     3f4:	57 96       	adiw	r26, 0x17	; 23
     3f6:	8c 91       	ld	r24, X
     3f8:	57 97       	sbiw	r26, 0x17	; 23
     3fa:	8e 7f       	andi	r24, 0xFE	; 254
     3fc:	57 96       	adiw	r26, 0x17	; 23
     3fe:	8c 93       	st	X, r24
     400:	1f c0       	rjmp	.+62     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     402:	f2 01       	movw	r30, r4
     404:	87 89       	ldd	r24, Z+23	; 0x17
     406:	81 60       	ori	r24, 0x01	; 1
     408:	87 8b       	std	Z+23, r24	; 0x17
     40a:	4a 81       	ldd	r20, Y+2	; 0x02
     40c:	5b 81       	ldd	r21, Y+3	; 0x03
     40e:	6c 81       	ldd	r22, Y+4	; 0x04
     410:	7d 81       	ldd	r23, Y+5	; 0x05
     412:	46 87       	std	Z+14, r20	; 0x0e
     414:	57 87       	std	Z+15, r21	; 0x0f
     416:	60 8b       	std	Z+16, r22	; 0x10
     418:	71 8b       	std	Z+17, r23	; 0x11
     41a:	40 0f       	add	r20, r16
     41c:	51 1f       	adc	r21, r17
     41e:	62 1f       	adc	r22, r18
     420:	73 1f       	adc	r23, r19
     422:	68 01       	movw	r12, r16
     424:	79 01       	movw	r14, r18
     426:	c2 01       	movw	r24, r4
     428:	0e 94 31 15 	call	0x2a62	; 0x2a62 <prvInsertTimerInActiveList>
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     42e:	f2 01       	movw	r30, r4
     430:	87 89       	ldd	r24, Z+23	; 0x17
     432:	81 fd       	sbrc	r24, 1
     434:	03 c0       	rjmp	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     436:	c2 01       	movw	r24, r4
     438:	76 d3       	rcall	.+1772   	; 0xb26 <vPortFree>
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	87 8b       	std	Z+23, r24	; 0x17
     440:	28 2d       	mov	r18, r8
     442:	39 2d       	mov	r19, r9
     444:	4a 2d       	mov	r20, r10
     446:	5b 2d       	mov	r21, r11
     448:	66 2d       	mov	r22, r6
     44a:	77 2d       	mov	r23, r7
     44c:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <xTimerQueue>
     450:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <xTimerQueue+0x1>
     454:	bc d7       	rcall	.+3960   	; 0x13ce <xQueueReceive>
     456:	81 11       	cpse	r24, r1
     458:	6e cf       	rjmp	.-292    	; 0x336 <prvTimerTask+0x130>
     45a:	e9 ce       	rjmp	.-558    	; 0x22e <prvTimerTask+0x28>
     45c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vTaskSuspendAll>
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 21 16 	call	0x2c42	; 0x2c42 <prvSampleTimeNow>
     468:	6b 87       	std	Y+11, r22	; 0x0b
     46a:	7c 87       	std	Y+12, r23	; 0x0c
     46c:	8d 87       	std	Y+13, r24	; 0x0d
     46e:	9e 87       	std	Y+14, r25	; 0x0e
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	81 11       	cpse	r24, r1
     474:	5d cf       	rjmp	.-326    	; 0x330 <prvTimerTask+0x12a>
     476:	e0 91 38 08 	lds	r30, 0x0838	; 0x800838 <pxOverflowTimerList>
     47a:	f0 91 39 08 	lds	r31, 0x0839	; 0x800839 <pxOverflowTimerList+0x1>
     47e:	80 81       	ld	r24, Z
     480:	21 e0       	ldi	r18, 0x01	; 1
     482:	81 11       	cpse	r24, r1
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	28 2c       	mov	r2, r8
     488:	39 2c       	mov	r3, r9
     48a:	4a 2c       	mov	r4, r10
     48c:	5b 2c       	mov	r5, r11
     48e:	3a cf       	rjmp	.-396    	; 0x304 <prvTimerTask+0xfe>

00000490 <__ctors_end>:
     490:	11 24       	eor	r1, r1
     492:	1f be       	out	0x3f, r1	; 63
     494:	cf ef       	ldi	r28, 0xFF	; 255
     496:	d1 e2       	ldi	r29, 0x21	; 33
     498:	de bf       	out	0x3e, r29	; 62
     49a:	cd bf       	out	0x3d, r28	; 61
     49c:	00 e0       	ldi	r16, 0x00	; 0
     49e:	0c bf       	out	0x3c, r16	; 60

000004a0 <__do_copy_data>:
     4a0:	17 e0       	ldi	r17, 0x07	; 7
     4a2:	a0 e0       	ldi	r26, 0x00	; 0
     4a4:	b2 e0       	ldi	r27, 0x02	; 2
     4a6:	e0 ec       	ldi	r30, 0xC0	; 192
     4a8:	f7 e5       	ldi	r31, 0x57	; 87
     4aa:	00 e0       	ldi	r16, 0x00	; 0
     4ac:	0b bf       	out	0x3b, r16	; 59
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__do_copy_data+0x14>
     4b0:	07 90       	elpm	r0, Z+
     4b2:	0d 92       	st	X+, r0
     4b4:	aa 3a       	cpi	r26, 0xAA	; 170
     4b6:	b1 07       	cpc	r27, r17
     4b8:	d9 f7       	brne	.-10     	; 0x4b0 <__do_copy_data+0x10>

000004ba <__do_clear_bss>:
     4ba:	2a e0       	ldi	r18, 0x0A	; 10
     4bc:	aa ea       	ldi	r26, 0xAA	; 170
     4be:	b7 e0       	ldi	r27, 0x07	; 7
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <.do_clear_bss_start>

000004c2 <.do_clear_bss_loop>:
     4c2:	1d 92       	st	X+, r1

000004c4 <.do_clear_bss_start>:
     4c4:	ae 34       	cpi	r26, 0x4E	; 78
     4c6:	b2 07       	cpc	r27, r18
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <.do_clear_bss_loop>
     4ca:	03 d0       	rcall	.+6      	; 0x4d2 <main>
     4cc:	0c 94 de 2b 	jmp	0x57bc	; 0x57bc <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <main>:
TaskHandle_t lightSensorHandle = NULL;
TaskHandle_t WaterHandle = NULL;
TaskHandle_t ServoMotorHandle = NULL;
TaskHandle_t loRaWanHandle = NULL;

int main() {
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
	
	//sets all variables in plantdata to 0.
	plantdata.co2 = 0;
     4d8:	ea eb       	ldi	r30, 0xBA	; 186
     4da:	f9 e0       	ldi	r31, 0x09	; 9
     4dc:	15 82       	std	Z+5, r1	; 0x05
     4de:	14 82       	std	Z+4, r1	; 0x04
	plantdata.humidity = 0;
     4e0:	13 82       	std	Z+3, r1	; 0x03
     4e2:	12 82       	std	Z+2, r1	; 0x02
	plantdata.light = 0;
     4e4:	17 82       	std	Z+7, r1	; 0x07
     4e6:	16 82       	std	Z+6, r1	; 0x06
	plantdata.temperature = 0;
     4e8:	11 82       	std	Z+1, r1	; 0x01
     4ea:	10 82       	st	Z, r1
	plantdata.water = 0;
     4ec:	10 86       	std	Z+8, r1	; 0x08
     4ee:	11 86       	std	Z+9, r1	; 0x09
     4f0:	12 86       	std	Z+10, r1	; 0x0a
     4f2:	13 86       	std	Z+11, r1	; 0x0b
	
	stdioCreate(0);
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <stdioCreate>
	
	//setup for loRaWAN
	hal_create(LED_TASK_PRIORITY);
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	0e 94 1a 1b 	call	0x3634	; 0x3634 <hal_create>
	lora_driver_create(ser_USART1);
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <lora_driver_create>
	
	//creating tasks
	xTaskCreate(tempSensorTask, "Temperature measurement", configMINIMAL_STACK_SIZE, NULL, TEMP_TASK_PRIORITY, &tempSensorHandle);
     506:	0f 2e       	mov	r0, r31
     508:	f2 eb       	ldi	r31, 0xB2	; 178
     50a:	ef 2e       	mov	r14, r31
     50c:	f7 e0       	ldi	r31, 0x07	; 7
     50e:	ff 2e       	mov	r15, r31
     510:	f0 2d       	mov	r31, r0
     512:	01 e0       	ldi	r16, 0x01	; 1
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 ec       	ldi	r20, 0xC0	; 192
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	6e e6       	ldi	r22, 0x6E	; 110
     51e:	72 e0       	ldi	r23, 0x02	; 2
     520:	88 e0       	ldi	r24, 0x08	; 8
     522:	95 e0       	ldi	r25, 0x05	; 5
     524:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <xTaskCreate>
	xTaskCreate(co2SensorTask, "CO2 measurement", configMINIMAL_STACK_SIZE, NULL, CO2_TASK_PRIORITY, &co2SensorHandle);
     528:	0f 2e       	mov	r0, r31
     52a:	f0 eb       	ldi	r31, 0xB0	; 176
     52c:	ef 2e       	mov	r14, r31
     52e:	f7 e0       	ldi	r31, 0x07	; 7
     530:	ff 2e       	mov	r15, r31
     532:	f0 2d       	mov	r31, r0
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 ec       	ldi	r20, 0xC0	; 192
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	66 e8       	ldi	r22, 0x86	; 134
     53e:	72 e0       	ldi	r23, 0x02	; 2
     540:	86 e1       	ldi	r24, 0x16	; 22
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <xTaskCreate>
	xTaskCreate(lightSensorTask, "Light measurement", configMINIMAL_STACK_SIZE, NULL, LIGHT_TASK_PRIORITY, &lightSensorHandle);
     548:	0f 2e       	mov	r0, r31
     54a:	fe ea       	ldi	r31, 0xAE	; 174
     54c:	ef 2e       	mov	r14, r31
     54e:	f7 e0       	ldi	r31, 0x07	; 7
     550:	ff 2e       	mov	r15, r31
     552:	f0 2d       	mov	r31, r0
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 ec       	ldi	r20, 0xC0	; 192
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	66 e9       	ldi	r22, 0x96	; 150
     55e:	72 e0       	ldi	r23, 0x02	; 2
     560:	82 e5       	ldi	r24, 0x52	; 82
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <xTaskCreate>
	xTaskCreate(loRaWanTask, "Led", configMINIMAL_STACK_SIZE, NULL,LED_TASK_PRIORITY, &loRaWanHandle);
     568:	0f 2e       	mov	r0, r31
     56a:	fa ea       	ldi	r31, 0xAA	; 170
     56c:	ef 2e       	mov	r14, r31
     56e:	f7 e0       	ldi	r31, 0x07	; 7
     570:	ff 2e       	mov	r15, r31
     572:	f0 2d       	mov	r31, r0
     574:	03 e0       	ldi	r16, 0x03	; 3
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	40 ec       	ldi	r20, 0xC0	; 192
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	68 ea       	ldi	r22, 0xA8	; 168
     580:	72 e0       	ldi	r23, 0x02	; 2
     582:	81 e5       	ldi	r24, 0x51	; 81
     584:	94 e0       	ldi	r25, 0x04	; 4
     586:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <xTaskCreate>
	xTaskCreate(servoMotorTask, "Servo Motor", configMINIMAL_STACK_SIZE, NULL, SERVO_TASK_PRIORITY,&ServoMotorHandle);
     58a:	0f 2e       	mov	r0, r31
     58c:	fc ea       	ldi	r31, 0xAC	; 172
     58e:	ef 2e       	mov	r14, r31
     590:	f7 e0       	ldi	r31, 0x07	; 7
     592:	ff 2e       	mov	r15, r31
     594:	f0 2d       	mov	r31, r0
     596:	01 e0       	ldi	r16, 0x01	; 1
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 ec       	ldi	r20, 0xC0	; 192
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	6c ea       	ldi	r22, 0xAC	; 172
     5a2:	72 e0       	ldi	r23, 0x02	; 2
     5a4:	80 ee       	ldi	r24, 0xE0	; 224
     5a6:	94 e0       	ldi	r25, 0x04	; 4
     5a8:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <xTaskCreate>
	
	semaphore = xSemaphoreCreateMutex();
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	bc d6       	rcall	.+3448   	; 0x1328 <xQueueCreateMutex>
     5b0:	90 93 b9 09 	sts	0x09B9, r25	; 0x8009b9 <semaphore+0x1>
     5b4:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <semaphore>
	
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
     5b8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <hih8120Create>
     5bc:	81 11       	cpse	r24, r1
     5be:	2c c0       	rjmp	.+88     	; 0x618 <main+0x146>
		printf("Failed to initialize temperature sensor\n");
		return 1;
	}
	//setup servoMotor
	rcServoCreate();
     5c0:	0e 94 0b 22 	call	0x4416	; 0x4416 <rcServoCreate>

	//setup co2 sensor
	mh_z19_create(ser_USART3, co2Callback);
     5c4:	63 e3       	ldi	r22, 0x33	; 51
     5c6:	73 e0       	ldi	r23, 0x03	; 3
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 94 21 	call	0x4328	; 0x4328 <mh_z19_create>

	//setup light sensor
	int r = tsl2591Create(lightCallback);
     5ce:	8f e6       	ldi	r24, 0x6F	; 111
     5d0:	93 e0       	ldi	r25, 0x03	; 3
     5d2:	0e 94 86 22 	call	0x450c	; 0x450c <tsl2591Create>
	if(r != TSL2591_OK) {
     5d6:	88 23       	and	r24, r24
     5d8:	61 f0       	breq	.+24     	; 0x5f2 <main+0x120>
		printf("Failed to initialize light sensor: %d\n", r);
     5da:	1f 92       	push	r1
     5dc:	8f 93       	push	r24
     5de:	80 ee       	ldi	r24, 0xE0	; 224
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
	}

	r = tsl2591Enable();
     5f2:	0e 94 a1 22 	call	0x4542	; 0x4542 <tsl2591Enable>
	if(r != TSL2591_OK) {
     5f6:	88 23       	and	r24, r24
     5f8:	61 f0       	breq	.+24     	; 0x612 <main+0x140>
		printf("Failed to enable light sensor %d\n", r);
     5fa:	1f 92       	push	r1
     5fc:	8f 93       	push	r24
     5fe:	87 e0       	ldi	r24, 0x07	; 7
     600:	93 e0       	ldi	r25, 0x03	; 3
     602:	9f 93       	push	r25
     604:	8f 93       	push	r24
     606:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
	}
	
	vTaskStartScheduler();
     612:	0e 94 57 0f 	call	0x1eae	; 0x1eae <vTaskStartScheduler>
     616:	ff cf       	rjmp	.-2      	; 0x616 <main+0x144>
	
	semaphore = xSemaphoreCreateMutex();
	
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
		printf("Failed to initialize temperature sensor\n");
     618:	88 eb       	ldi	r24, 0xB8	; 184
     61a:	92 e0       	ldi	r25, 0x02	; 2
     61c:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <puts>
	vTaskStartScheduler();
	
	while(1) {
		;
	}
}
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	08 95       	ret

0000062c <co2SensorTask>:

	while(1) {
		vTaskDelay(1000);
		int r = mh_z19_take_meassuring();
		if(r != MHZ19_OK) {
			printf("CO2 sensor: %d", r);			
     62c:	c9 e2       	ldi	r28, 0x29	; 41
     62e:	d3 e0       	ldi	r29, 0x03	; 3

void co2SensorTask(void *pvParamters) {
	(void)pvParamters;

	while(1) {
		vTaskDelay(1000);
     630:	68 ee       	ldi	r22, 0xE8	; 232
     632:	73 e0       	ldi	r23, 0x03	; 3
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
		int r = mh_z19_take_meassuring();
     63c:	0e 94 c3 21 	call	0x4386	; 0x4386 <mh_z19_take_meassuring>
		if(r != MHZ19_OK) {
     640:	88 23       	and	r24, r24
     642:	51 f0       	breq	.+20     	; 0x658 <co2SensorTask+0x2c>
			printf("CO2 sensor: %d", r);			
     644:	1f 92       	push	r1
     646:	8f 93       	push	r24
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
		}
		vTaskDelay(9000);
     658:	68 e2       	ldi	r22, 0x28	; 40
     65a:	73 e2       	ldi	r23, 0x23	; 35
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
	}
     664:	e5 cf       	rjmp	.-54     	; 0x630 <co2SensorTask+0x4>

00000666 <co2Callback>:

	vTaskDelete(NULL);
}

void co2Callback(uint16_t ppm) {
     666:	0f 93       	push	r16
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
	///////////////////semaphore:
	xSemaphoreTake(semaphore, portMAX_DELAY);
     66e:	4f ef       	ldi	r20, 0xFF	; 255
     670:	5f ef       	ldi	r21, 0xFF	; 255
     672:	ba 01       	movw	r22, r20
     674:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <semaphore>
     678:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <semaphore+0x1>
     67c:	3d d7       	rcall	.+3706   	; 0x14f8 <xQueueSemaphoreTake>
	plantdata.co2 = ppm;
     67e:	d0 93 bf 09 	sts	0x09BF, r29	; 0x8009bf <plantdata+0x5>
     682:	c0 93 be 09 	sts	0x09BE, r28	; 0x8009be <plantdata+0x4>
	//printf("CO2 level: %u\n", ppm);
	
	xSemaphoreGive(semaphore);
     686:	00 e0       	ldi	r16, 0x00	; 0
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	a9 01       	movw	r20, r18
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <semaphore>
     696:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <semaphore+0x1>
     69a:	a6 d5       	rcall	.+2892   	; 0x11e8 <xQueueGenericSend>
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	0f 91       	pop	r16
     6a2:	08 95       	ret

000006a4 <lightSensorTask>:

	while(1) {
		vTaskDelay(1000);	
		int r = tsl2591FetchData();
		if(r != TSL2591_OK) {
			printf("Failed to fetch light data: %d\n", r);	
     6a4:	c8 e3       	ldi	r28, 0x38	; 56
     6a6:	d3 e0       	ldi	r29, 0x03	; 3

void lightSensorTask(void* pvParameters) {
	(void)pvParameters;

	while(1) {
		vTaskDelay(1000);	
     6a8:	68 ee       	ldi	r22, 0xE8	; 232
     6aa:	73 e0       	ldi	r23, 0x03	; 3
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
		int r = tsl2591FetchData();
     6b4:	0e 94 b6 22 	call	0x456c	; 0x456c <tsl2591FetchData>
		if(r != TSL2591_OK) {
     6b8:	88 23       	and	r24, r24
     6ba:	51 f0       	breq	.+20     	; 0x6d0 <lightSensorTask+0x2c>
			printf("Failed to fetch light data: %d\n", r);	
     6bc:	1f 92       	push	r1
     6be:	8f 93       	push	r24
     6c0:	df 93       	push	r29
     6c2:	cf 93       	push	r28
     6c4:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
		}
		vTaskDelay(9000);
     6d0:	68 e2       	ldi	r22, 0x28	; 40
     6d2:	73 e2       	ldi	r23, 0x23	; 35
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
	}
     6dc:	e5 cf       	rjmp	.-54     	; 0x6a8 <lightSensorTask+0x4>

000006de <lightCallback>:

	vTaskDelete(NULL);
}

void lightCallback(tsl2591ReturnCode_t rc) {
     6de:	0f 93       	push	r16
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <lightCallback+0x8>
     6e6:	1f 92       	push	r1
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
	float measure;
	if(rc != TSL2591_DATA_READY) {
     6ec:	81 30       	cpi	r24, 0x01	; 1
     6ee:	29 f0       	breq	.+10     	; 0x6fa <lightCallback+0x1c>
		printf("Light sensor not ready\n");
     6f0:	88 e5       	ldi	r24, 0x58	; 88
     6f2:	93 e0       	ldi	r25, 0x03	; 3
     6f4:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <puts>
     6f8:	28 c0       	rjmp	.+80     	; 0x74a <lightCallback+0x6c>
		return;
	}
	if(TSL2591_OK == tsl2591GetLux(&measure)) {
     6fa:	ce 01       	movw	r24, r28
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	0e 94 c8 22 	call	0x4590	; 0x4590 <tsl2591GetLux>
     702:	81 11       	cpse	r24, r1
     704:	1e c0       	rjmp	.+60     	; 0x742 <lightCallback+0x64>
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     706:	4f ef       	ldi	r20, 0xFF	; 255
     708:	5f ef       	ldi	r21, 0xFF	; 255
     70a:	ba 01       	movw	r22, r20
     70c:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <semaphore>
     710:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <semaphore+0x1>
     714:	f1 d6       	rcall	.+3554   	; 0x14f8 <xQueueSemaphoreTake>
		plantdata.light = (uint16_t) measure;
     716:	69 81       	ldd	r22, Y+1	; 0x01
     718:	7a 81       	ldd	r23, Y+2	; 0x02
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	9c 81       	ldd	r25, Y+4	; 0x04
     71e:	0e 94 d7 16 	call	0x2dae	; 0x2dae <__fixunssfsi>
     722:	70 93 c1 09 	sts	0x09C1, r23	; 0x8009c1 <plantdata+0x7>
     726:	60 93 c0 09 	sts	0x09C0, r22	; 0x8009c0 <plantdata+0x6>
		//printf("Light: %d\n", (uint16_t) measure);
		xSemaphoreGive(semaphore);
     72a:	00 e0       	ldi	r16, 0x00	; 0
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	a9 01       	movw	r20, r18
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <semaphore>
     73a:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <semaphore+0x1>
     73e:	54 d5       	rcall	.+2728   	; 0x11e8 <xQueueGenericSend>
     740:	04 c0       	rjmp	.+8      	; 0x74a <lightCallback+0x6c>
	}
	else {
		printf("Lux overflow\n");	
     742:	8f e6       	ldi	r24, 0x6F	; 111
     744:	93 e0       	ldi	r25, 0x03	; 3
     746:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <puts>
	}
	
}
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <_loRa_setup>:
#define LORA_appEUI "c53e8f9f10801fc4"
#define LORA_appKEY "018cc25f724a8517cbfd763dc1126614"

char _out_buff[100];

void _loRa_setup(void){
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
	
	e_LoRa_return_code_t rc;
	
	//For factory reset.
	printf("FactoryRest >%s<\n",
     764:	0e 94 3f 1e 	call	0x3c7e	; 0x3c7e <lora_driver_rn2483_factory_reset>
     768:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <lora_driver_map_return_code_to_text>
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	8c e7       	ldi	r24, 0x7C	; 124
     772:	93 e0       	ldi	r25, 0x03	; 3
     774:	9f 93       	push	r25
     776:	8f 93       	push	r24
     778:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
	lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
	
	//Configure to EU868 LoRaWAN standards.
	printf("Configure to EU868 >%s<\n",
     77c:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <lora_driver_configure_to_eu868>
     780:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <lora_driver_map_return_code_to_text>
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	8e e8       	ldi	r24, 0x8E	; 142
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
	lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
	
	//Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buff);
     794:	8a ec       	ldi	r24, 0xCA	; 202
     796:	99 e0       	ldi	r25, 0x09	; 9
     798:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI: %s >%s< \n", lora_driver_map_return_code_to_text(rc), _out_buff );
     79c:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <lora_driver_map_return_code_to_text>
     7a0:	ca ec       	ldi	r28, 0xCA	; 202
     7a2:	d9 e0       	ldi	r29, 0x09	; 9
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	9f 93       	push	r25
     7aa:	8f 93       	push	r24
     7ac:	87 ea       	ldi	r24, 0xA7	; 167
     7ae:	93 e0       	ldi	r25, 0x03	; 3
     7b0:	9f 93       	push	r25
     7b2:	8f 93       	push	r24
     7b4:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
	
	
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buff)));
     7b8:	ce 01       	movw	r24, r28
     7ba:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <lora_driver_set_device_identifier>
     7be:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <lora_driver_map_return_code_to_text>
     7c2:	9f 93       	push	r25
     7c4:	8f 93       	push	r24
     7c6:	df 93       	push	r29
     7c8:	cf 93       	push	r28
     7ca:	8c eb       	ldi	r24, 0xBC	; 188
     7cc:	93 e0       	ldi	r25, 0x03	; 3
     7ce:	9f 93       	push	r25
     7d0:	8f 93       	push	r24
     7d2:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buff)));
     7d6:	ae 01       	movw	r20, r28
     7d8:	61 ed       	ldi	r22, 0xD1	; 209
     7da:	73 e0       	ldi	r23, 0x03	; 3
     7dc:	82 ef       	ldi	r24, 0xF2	; 242
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	0e 94 4a 20 	call	0x4094	; 0x4094 <lora_driver_set_otaa_identity>
     7e4:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <lora_driver_map_return_code_to_text>
     7e8:	9f 93       	push	r25
     7ea:	8f 93       	push	r24
     7ec:	df 93       	push	r29
     7ee:	cf 93       	push	r28
     7f0:	81 ed       	ldi	r24, 0xD1	; 209
     7f2:	93 e0       	ldi	r25, 0x03	; 3
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	82 ef       	ldi	r24, 0xF2	; 242
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	94 e0       	ldi	r25, 0x04	; 4
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     80c:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <lora_driver_save_mac>
     810:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <lora_driver_map_return_code_to_text>
     814:	9f 93       	push	r25
     816:	8f 93       	push	r24
     818:	89 e3       	ldi	r24, 0x39	; 57
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     824:	8d b7       	in	r24, 0x3d	; 61
     826:	9e b7       	in	r25, 0x3e	; 62
     828:	82 96       	adiw	r24, 0x22	; 34
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	9e bf       	out	0x3e, r25	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	8d bf       	out	0x3d, r24	; 61
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <lora_driver_set_adaptive_data_rate>
     83a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <lora_driver_map_return_code_to_text>
     83e:	9f 93       	push	r25
     840:	8f 93       	push	r24
     842:	88 e4       	ldi	r24, 0x48	; 72
     844:	94 e0       	ldi	r25, 0x04	; 4
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	c5 e0       	ldi	r28, 0x05	; 5
     858:	d0 e0       	ldi	r29, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     85a:	0f 2e       	mov	r0, r31
     85c:	f9 e6       	ldi	r31, 0x69	; 105
     85e:	ef 2e       	mov	r14, r31
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	ff 2e       	mov	r15, r31
     864:	f0 2d       	mov	r31, r0
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <lora_driver_join>
     86c:	18 2f       	mov	r17, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     86e:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <lora_driver_map_return_code_to_text>
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	df 93       	push	r29
     878:	cf 93       	push	r28
     87a:	ff 92       	push	r15
     87c:	ef 92       	push	r14
     87e:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
		if ( rc == LoRa_ACCEPTED){
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	18 30       	cpi	r17, 0x08	; 8
     890:	11 f0       	breq	.+4      	; 0x896 <_loRa_setup+0x13c>
     892:	21 97       	sbiw	r28, 0x01	; 1
			break;
		}

	} while (--maxJoinTriesLeft);
     894:	41 f7       	brne	.-48     	; 0x866 <_loRa_setup+0x10c>

}
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	08 95       	ret

000008a2 <loRaWanTask>:

void loRaWanTask(void* pvParamters){
     8a2:	cf 93       	push	r28
     8a4:	df 93       	push	r29
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	66 97       	sbiw	r28, 0x16	; 22
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
	(void)pvParamters;

	//for resetting the LoRaWAN hardware.
	lora_driver_reset_rn2483(1);
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <lora_driver_reset_rn2483>
	vTaskDelay(150);
     8bc:	66 e9       	ldi	r22, 0x96	; 150
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
	lora_driver_reset_rn2483(0);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <lora_driver_reset_rn2483>
	vTaskDelay(150);
     8ce:	66 e9       	ldi	r22, 0x96	; 150
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
	lora_driver_flush_buffers();
     8da:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <lora_driver_flush_buffers>
	
	_loRa_setup();
     8de:	3d df       	rcall	.-390    	; 0x75a <_loRa_setup>
	vTaskDelay(200);
     8e0:	68 ec       	ldi	r22, 0xC8	; 200
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
	
	lora_payload_t _uplink_payload;
	
	_uplink_payload.len = 7;
     8ec:	87 e0       	ldi	r24, 0x07	; 7
     8ee:	8a 83       	std	Y+2, r24	; 0x02
	_uplink_payload.port_no = 2;
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	89 83       	std	Y+1, r24	; 0x01
	
	while(1){
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
		_uplink_payload.bytes[0] = plantdata.humidity;
     8f4:	0f 2e       	mov	r0, r31
     8f6:	fa eb       	ldi	r31, 0xBA	; 186
     8f8:	ef 2e       	mov	r14, r31
     8fa:	f9 e0       	ldi	r31, 0x09	; 9
     8fc:	ff 2e       	mov	r15, r31
     8fe:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = plantdata.temperature;
		_uplink_payload.bytes[2] = plantdata.co2 >> 8;
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
		_uplink_payload.bytes[4] = plantdata.light >> 8;
		_uplink_payload.bytes[5] = plantdata.light& 0xFF;
		_uplink_payload.bytes[6] = (xTaskGetTickCount() - plantdata.water) * configTICK_RATE_HZ / 3600000;
     900:	0f 2e       	mov	r0, r31
     902:	f0 e8       	ldi	r31, 0x80	; 128
     904:	8f 2e       	mov	r8, r31
     906:	fe ee       	ldi	r31, 0xEE	; 238
     908:	9f 2e       	mov	r9, r31
     90a:	f6 e3       	ldi	r31, 0x36	; 54
     90c:	af 2e       	mov	r10, r31
     90e:	b1 2c       	mov	r11, r1
     910:	f0 2d       	mov	r31, r0
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     912:	0f 2e       	mov	r0, r31
     914:	f9 e8       	ldi	r31, 0x89	; 137
     916:	cf 2e       	mov	r12, r31
     918:	f4 e0       	ldi	r31, 0x04	; 4
     91a:	df 2e       	mov	r13, r31
     91c:	f0 2d       	mov	r31, r0
	
	
	while(1){
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     91e:	4f ef       	ldi	r20, 0xFF	; 255
     920:	5f ef       	ldi	r21, 0xFF	; 255
     922:	ba 01       	movw	r22, r20
     924:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <semaphore>
     928:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <semaphore+0x1>
     92c:	e5 d5       	rcall	.+3018   	; 0x14f8 <xQueueSemaphoreTake>
		_uplink_payload.bytes[0] = plantdata.humidity;
     92e:	f7 01       	movw	r30, r14
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	8b 83       	std	Y+3, r24	; 0x03
		_uplink_payload.bytes[1] = plantdata.temperature;
     934:	80 81       	ld	r24, Z
     936:	8c 83       	std	Y+4, r24	; 0x04
		_uplink_payload.bytes[2] = plantdata.co2 >> 8;
     938:	84 81       	ldd	r24, Z+4	; 0x04
     93a:	95 81       	ldd	r25, Z+5	; 0x05
     93c:	9d 83       	std	Y+5, r25	; 0x05
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
     93e:	8e 83       	std	Y+6, r24	; 0x06
		_uplink_payload.bytes[4] = plantdata.light >> 8;
     940:	86 81       	ldd	r24, Z+6	; 0x06
     942:	97 81       	ldd	r25, Z+7	; 0x07
     944:	9f 83       	std	Y+7, r25	; 0x07
		_uplink_payload.bytes[5] = plantdata.light& 0xFF;
     946:	88 87       	std	Y+8, r24	; 0x08
		_uplink_payload.bytes[6] = (xTaskGetTickCount() - plantdata.water) * configTICK_RATE_HZ / 3600000;
     948:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <xTaskGetTickCount>
     94c:	f7 01       	movw	r30, r14
     94e:	00 85       	ldd	r16, Z+8	; 0x08
     950:	11 85       	ldd	r17, Z+9	; 0x09
     952:	22 85       	ldd	r18, Z+10	; 0x0a
     954:	33 85       	ldd	r19, Z+11	; 0x0b
     956:	2b 01       	movw	r4, r22
     958:	3c 01       	movw	r6, r24
     95a:	40 1a       	sub	r4, r16
     95c:	51 0a       	sbc	r5, r17
     95e:	62 0a       	sbc	r6, r18
     960:	73 0a       	sbc	r7, r19
     962:	a3 01       	movw	r20, r6
     964:	92 01       	movw	r18, r4
     966:	ae e3       	ldi	r26, 0x3E	; 62
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__muluhisi3>
     96e:	a5 01       	movw	r20, r10
     970:	94 01       	movw	r18, r8
     972:	0e 94 04 27 	call	0x4e08	; 0x4e08 <__udivmodsi4>
     976:	29 87       	std	Y+9, r18	; 0x09
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     978:	be 01       	movw	r22, r28
     97a:	6f 5f       	subi	r22, 0xFF	; 255
     97c:	7f 4f       	sbci	r23, 0xFF	; 255
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <lora_driver_sent_upload_message>
     984:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <lora_driver_map_return_code_to_text>
     988:	9f 93       	push	r25
     98a:	8f 93       	push	r24
     98c:	df 92       	push	r13
     98e:	cf 92       	push	r12
     990:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
		xSemaphoreGive(semaphore);
     994:	00 e0       	ldi	r16, 0x00	; 0
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	a9 01       	movw	r20, r18
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <semaphore>
     9a4:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <semaphore+0x1>
     9a8:	1f d4       	rcall	.+2110   	; 0x11e8 <xQueueGenericSend>
		vTaskDelay(10000);
     9aa:	60 e1       	ldi	r22, 0x10	; 16
     9ac:	77 e2       	ldi	r23, 0x27	; 39
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	af cf       	rjmp	.-162    	; 0x91e <loRaWanTask+0x7c>

000009c0 <servoMotorTask>:
	while(1){
		vTaskDelay(1000);
			rcServoSet(0,100);
			vTaskDelay(1000);
			rcServoSet(0,-100);
			plantdata.water = xTaskGetTickCount();	
     9c0:	0a eb       	ldi	r16, 0xBA	; 186
     9c2:	19 e0       	ldi	r17, 0x09	; 9

void servoMotorTask(void* pvParamters){
	(void)pvParamters;
	
	while(1){
		vTaskDelay(1000);
     9c4:	68 ee       	ldi	r22, 0xE8	; 232
     9c6:	73 e0       	ldi	r23, 0x03	; 3
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
			rcServoSet(0,100);
     9d0:	64 e6       	ldi	r22, 0x64	; 100
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <rcServoSet>
			vTaskDelay(1000);
     9d8:	68 ee       	ldi	r22, 0xE8	; 232
     9da:	73 e0       	ldi	r23, 0x03	; 3
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
			rcServoSet(0,-100);
     9e4:	6c e9       	ldi	r22, 0x9C	; 156
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <rcServoSet>
			plantdata.water = xTaskGetTickCount();	
     9ec:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <xTaskGetTickCount>
     9f0:	f8 01       	movw	r30, r16
     9f2:	60 87       	std	Z+8, r22	; 0x08
     9f4:	71 87       	std	Z+9, r23	; 0x09
     9f6:	82 87       	std	Z+10, r24	; 0x0a
     9f8:	93 87       	std	Z+11, r25	; 0x0b
     9fa:	c5 e0       	ldi	r28, 0x05	; 5
     9fc:	d0 e0       	ldi	r29, 0x00	; 0
			//printf("Plant has been watered!!!!\n");
		for(int i = 0; i < 5; i++){
			vTaskDelay(10000);
     9fe:	60 e1       	ldi	r22, 0x10	; 16
     a00:	77 e2       	ldi	r23, 0x27	; 39
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
     a0a:	21 97       	sbiw	r28, 0x01	; 1
			rcServoSet(0,100);
			vTaskDelay(1000);
			rcServoSet(0,-100);
			plantdata.water = xTaskGetTickCount();	
			//printf("Plant has been watered!!!!\n");
		for(int i = 0; i < 5; i++){
     a0c:	c1 f7       	brne	.-16     	; 0x9fe <servoMotorTask+0x3e>
     a0e:	da cf       	rjmp	.-76     	; 0x9c4 <servoMotorTask+0x4>

00000a10 <tempSensorTask>:
	while(1) {
		vTaskDelay(1000);
		
		int r = hih8120Wakeup();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("temp-wake error: %d\n", r);
     a10:	0f 2e       	mov	r0, r31
     a12:	fe e9       	ldi	r31, 0x9E	; 158
     a14:	cf 2e       	mov	r12, r31
     a16:	f4 e0       	ldi	r31, 0x04	; 4
     a18:	df 2e       	mov	r13, r31
     a1a:	f0 2d       	mov	r31, r0
		}
		
		vTaskDelay(100);
		r = hih8120Meassure();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("Temp-read error: %d\n", r);
     a1c:	0f 2e       	mov	r0, r31
     a1e:	f3 eb       	ldi	r31, 0xB3	; 179
     a20:	ef 2e       	mov	r14, r31
     a22:	f4 e0       	ldi	r31, 0x04	; 4
     a24:	ff 2e       	mov	r15, r31
     a26:	f0 2d       	mov	r31, r0

		}
		vTaskDelay(100);
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
		plantdata.humidity = hih8120GetHumidity();
     a28:	ca eb       	ldi	r28, 0xBA	; 186
     a2a:	d9 e0       	ldi	r29, 0x09	; 9
void tempSensorTask(void* pvParameters) {
	(void)pvParameters;
		
	//Do temperature measurement
	while(1) {
		vTaskDelay(1000);
     a2c:	68 ee       	ldi	r22, 0xE8	; 232
     a2e:	73 e0       	ldi	r23, 0x03	; 3
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
		
		int r = hih8120Wakeup();
     a38:	0e 94 91 1b 	call	0x3722	; 0x3722 <hih8120Wakeup>
     a3c:	28 2f       	mov	r18, r24
     a3e:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     a40:	21 15       	cp	r18, r1
     a42:	31 05       	cpc	r19, r1
     a44:	69 f0       	breq	.+26     	; 0xa60 <tempSensorTask+0x50>
     a46:	23 30       	cpi	r18, 0x03	; 3
     a48:	31 05       	cpc	r19, r1
     a4a:	51 f0       	breq	.+20     	; 0xa60 <tempSensorTask+0x50>
			printf("temp-wake error: %d\n", r);
     a4c:	1f 92       	push	r1
     a4e:	8f 93       	push	r24
     a50:	df 92       	push	r13
     a52:	cf 92       	push	r12
     a54:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
		}
		
		vTaskDelay(100);
     a60:	64 e6       	ldi	r22, 0x64	; 100
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
		r = hih8120Meassure();
     a6c:	0e 94 a6 1b 	call	0x374c	; 0x374c <hih8120Meassure>
     a70:	28 2f       	mov	r18, r24
     a72:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     a74:	21 15       	cp	r18, r1
     a76:	31 05       	cpc	r19, r1
     a78:	69 f0       	breq	.+26     	; 0xa94 <tempSensorTask+0x84>
     a7a:	23 30       	cpi	r18, 0x03	; 3
     a7c:	31 05       	cpc	r19, r1
     a7e:	51 f0       	breq	.+20     	; 0xa94 <tempSensorTask+0x84>
			printf("Temp-read error: %d\n", r);
     a80:	1f 92       	push	r1
     a82:	8f 93       	push	r24
     a84:	ff 92       	push	r15
     a86:	ef 92       	push	r14
     a88:	0e 94 c0 28 	call	0x5180	; 0x5180 <printf>
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0

		}
		vTaskDelay(100);
     a94:	64 e6       	ldi	r22, 0x64	; 100
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     aa0:	4f ef       	ldi	r20, 0xFF	; 255
     aa2:	5f ef       	ldi	r21, 0xFF	; 255
     aa4:	ba 01       	movw	r22, r20
     aa6:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <semaphore>
     aaa:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <semaphore+0x1>
     aae:	24 d5       	rcall	.+2632   	; 0x14f8 <xQueueSemaphoreTake>
		plantdata.humidity = hih8120GetHumidity();
     ab0:	0e 94 b7 1b 	call	0x376e	; 0x376e <hih8120GetHumidity>
     ab4:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__fixsfsi>
     ab8:	7b 83       	std	Y+3, r23	; 0x03
     aba:	6a 83       	std	Y+2, r22	; 0x02
		plantdata.temperature = hih8120GetTemperature();
     abc:	0e 94 cc 1b 	call	0x3798	; 0x3798 <hih8120GetTemperature>
     ac0:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__fixsfsi>
     ac4:	79 83       	std	Y+1, r23	; 0x01
     ac6:	68 83       	st	Y, r22
		//printf("Hum: %d  Temp: %d\n", plantdata.humidity, plantdata.temperature);
		xSemaphoreGive(semaphore);
     ac8:	00 e0       	ldi	r16, 0x00	; 0
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	a9 01       	movw	r20, r18
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <semaphore>
     ad8:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <semaphore+0x1>
     adc:	85 d3       	rcall	.+1802   	; 0x11e8 <xQueueGenericSend>

	}
     ade:	a6 cf       	rjmp	.-180    	; 0xa2c <tempSensorTask+0x1c>

00000ae0 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     ae0:	e8 e0       	ldi	r30, 0x08	; 8
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	90 81       	ld	r25, Z
     ae6:	90 7f       	andi	r25, 0xF0	; 240
     ae8:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     aea:	90 81       	ld	r25, Z
     aec:	8f 70       	andi	r24, 0x0F	; 15
     aee:	98 2b       	or	r25, r24
     af0:	90 83       	st	Z, r25
     af2:	08 95       	ret

00000af4 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     af4:	e8 e0       	ldi	r30, 0x08	; 8
     af6:	f1 e0       	ldi	r31, 0x01	; 1
     af8:	80 81       	ld	r24, Z
     afa:	80 7f       	andi	r24, 0xF0	; 240
     afc:	80 83       	st	Z, r24
     afe:	08 95       	ret

00000b00 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     b06:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     b0a:	ce 01       	movw	r24, r28
     b0c:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <malloc>
     b10:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     b12:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     b16:	20 97       	sbiw	r28, 0x00	; 0
     b18:	11 f4       	brne	.+4      	; 0xb1e <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     b1a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     b1e:	ce 01       	movw	r24, r28
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
    if( pv )
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	41 f0       	breq	.+16     	; 0xb3e <vPortFree+0x18>
     b2e:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     b30:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <vTaskSuspendAll>
        {
            free( pv );
     b34:	ce 01       	movw	r24, r28
     b36:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     b3a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskResumeAll>
    }
}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     b44:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b46:	03 96       	adiw	r24, 0x03	; 3
     b48:	92 83       	std	Z+2, r25	; 0x02
     b4a:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     b4c:	4f ef       	ldi	r20, 0xFF	; 255
     b4e:	5f ef       	ldi	r21, 0xFF	; 255
     b50:	ba 01       	movw	r22, r20
     b52:	43 83       	std	Z+3, r20	; 0x03
     b54:	54 83       	std	Z+4, r21	; 0x04
     b56:	65 83       	std	Z+5, r22	; 0x05
     b58:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b5a:	90 87       	std	Z+8, r25	; 0x08
     b5c:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b5e:	92 87       	std	Z+10, r25	; 0x0a
     b60:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     b62:	10 82       	st	Z, r1
     b64:	08 95       	ret

00000b66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     b66:	fc 01       	movw	r30, r24
     b68:	13 86       	std	Z+11, r1	; 0x0b
     b6a:	12 86       	std	Z+10, r1	; 0x0a
     b6c:	08 95       	ret

00000b6e <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	9c 01       	movw	r18, r24
     b74:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     b76:	dc 01       	movw	r26, r24
     b78:	11 96       	adiw	r26, 0x01	; 1
     b7a:	cd 91       	ld	r28, X+
     b7c:	dc 91       	ld	r29, X
     b7e:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     b80:	d5 83       	std	Z+5, r29	; 0x05
     b82:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     b84:	8e 81       	ldd	r24, Y+6	; 0x06
     b86:	9f 81       	ldd	r25, Y+7	; 0x07
     b88:	97 83       	std	Z+7, r25	; 0x07
     b8a:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     b8c:	8e 81       	ldd	r24, Y+6	; 0x06
     b8e:	9f 81       	ldd	r25, Y+7	; 0x07
     b90:	dc 01       	movw	r26, r24
     b92:	15 96       	adiw	r26, 0x05	; 5
     b94:	7c 93       	st	X, r23
     b96:	6e 93       	st	-X, r22
     b98:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     b9a:	7f 83       	std	Y+7, r23	; 0x07
     b9c:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     b9e:	33 87       	std	Z+11, r19	; 0x0b
     ba0:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     ba2:	f9 01       	movw	r30, r18
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 5f       	subi	r24, 0xFF	; 255
     ba8:	80 83       	st	Z, r24
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     bba:	08 81       	ld	r16, Y
     bbc:	19 81       	ldd	r17, Y+1	; 0x01
     bbe:	2a 81       	ldd	r18, Y+2	; 0x02
     bc0:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     bc2:	0f 3f       	cpi	r16, 0xFF	; 255
     bc4:	4f ef       	ldi	r20, 0xFF	; 255
     bc6:	14 07       	cpc	r17, r20
     bc8:	24 07       	cpc	r18, r20
     bca:	34 07       	cpc	r19, r20
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     bce:	fc 01       	movw	r30, r24
     bd0:	a1 85       	ldd	r26, Z+9	; 0x09
     bd2:	b2 85       	ldd	r27, Z+10	; 0x0a
     bd4:	11 c0       	rjmp	.+34     	; 0xbf8 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     bd6:	dc 01       	movw	r26, r24
     bd8:	13 96       	adiw	r26, 0x03	; 3
     bda:	01 c0       	rjmp	.+2      	; 0xbde <vListInsert+0x2e>
     bdc:	df 01       	movw	r26, r30
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	ed 91       	ld	r30, X+
     be2:	fc 91       	ld	r31, X
     be4:	15 97       	sbiw	r26, 0x05	; 5
     be6:	40 81       	ld	r20, Z
     be8:	51 81       	ldd	r21, Z+1	; 0x01
     bea:	62 81       	ldd	r22, Z+2	; 0x02
     bec:	73 81       	ldd	r23, Z+3	; 0x03
     bee:	04 17       	cp	r16, r20
     bf0:	15 07       	cpc	r17, r21
     bf2:	26 07       	cpc	r18, r22
     bf4:	37 07       	cpc	r19, r23
     bf6:	90 f7       	brcc	.-28     	; 0xbdc <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     bf8:	14 96       	adiw	r26, 0x04	; 4
     bfa:	ed 91       	ld	r30, X+
     bfc:	fc 91       	ld	r31, X
     bfe:	15 97       	sbiw	r26, 0x05	; 5
     c00:	fd 83       	std	Y+5, r31	; 0x05
     c02:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c04:	d7 83       	std	Z+7, r29	; 0x07
     c06:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     c08:	bf 83       	std	Y+7, r27	; 0x07
     c0a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     c0c:	15 96       	adiw	r26, 0x05	; 5
     c0e:	dc 93       	st	X, r29
     c10:	ce 93       	st	-X, r28
     c12:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     c14:	9b 87       	std	Y+11, r25	; 0x0b
     c16:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     c18:	fc 01       	movw	r30, r24
     c1a:	20 81       	ld	r18, Z
     c1c:	2f 5f       	subi	r18, 0xFF	; 255
     c1e:	20 83       	st	Z, r18
}
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
     c2e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     c30:	a2 85       	ldd	r26, Z+10	; 0x0a
     c32:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c34:	c4 81       	ldd	r28, Z+4	; 0x04
     c36:	d5 81       	ldd	r29, Z+5	; 0x05
     c38:	86 81       	ldd	r24, Z+6	; 0x06
     c3a:	97 81       	ldd	r25, Z+7	; 0x07
     c3c:	9f 83       	std	Y+7, r25	; 0x07
     c3e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c40:	c6 81       	ldd	r28, Z+6	; 0x06
     c42:	d7 81       	ldd	r29, Z+7	; 0x07
     c44:	84 81       	ldd	r24, Z+4	; 0x04
     c46:	95 81       	ldd	r25, Z+5	; 0x05
     c48:	9d 83       	std	Y+5, r25	; 0x05
     c4a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     c4c:	11 96       	adiw	r26, 0x01	; 1
     c4e:	8d 91       	ld	r24, X+
     c50:	9c 91       	ld	r25, X
     c52:	12 97       	sbiw	r26, 0x02	; 2
     c54:	e8 17       	cp	r30, r24
     c56:	f9 07       	cpc	r31, r25
     c58:	31 f4       	brne	.+12     	; 0xc66 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     c5a:	86 81       	ldd	r24, Z+6	; 0x06
     c5c:	97 81       	ldd	r25, Z+7	; 0x07
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	9c 93       	st	X, r25
     c62:	8e 93       	st	-X, r24
     c64:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     c66:	13 86       	std	Z+11, r1	; 0x0b
     c68:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     c6a:	8c 91       	ld	r24, X
     c6c:	81 50       	subi	r24, 0x01	; 1
     c6e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     c70:	8c 91       	ld	r24, X
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     c78:	31 e1       	ldi	r19, 0x11	; 17
     c7a:	fc 01       	movw	r30, r24
     c7c:	30 83       	st	Z, r19
     c7e:	31 97       	sbiw	r30, 0x01	; 1
     c80:	22 e2       	ldi	r18, 0x22	; 34
     c82:	20 83       	st	Z, r18
     c84:	31 97       	sbiw	r30, 0x01	; 1
     c86:	a3 e3       	ldi	r26, 0x33	; 51
     c88:	a0 83       	st	Z, r26
     c8a:	31 97       	sbiw	r30, 0x01	; 1
     c8c:	60 83       	st	Z, r22
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	70 83       	st	Z, r23
     c92:	31 97       	sbiw	r30, 0x01	; 1
     c94:	10 82       	st	Z, r1
     c96:	31 97       	sbiw	r30, 0x01	; 1
     c98:	10 82       	st	Z, r1
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	60 e8       	ldi	r22, 0x80	; 128
     c9e:	60 83       	st	Z, r22
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	10 82       	st	Z, r1
     ca4:	31 97       	sbiw	r30, 0x01	; 1
     ca6:	10 82       	st	Z, r1
     ca8:	31 97       	sbiw	r30, 0x01	; 1
     caa:	10 82       	st	Z, r1
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	62 e0       	ldi	r22, 0x02	; 2
     cb0:	60 83       	st	Z, r22
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	63 e0       	ldi	r22, 0x03	; 3
     cb6:	60 83       	st	Z, r22
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	64 e0       	ldi	r22, 0x04	; 4
     cbc:	60 83       	st	Z, r22
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	65 e0       	ldi	r22, 0x05	; 5
     cc2:	60 83       	st	Z, r22
     cc4:	31 97       	sbiw	r30, 0x01	; 1
     cc6:	66 e0       	ldi	r22, 0x06	; 6
     cc8:	60 83       	st	Z, r22
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	67 e0       	ldi	r22, 0x07	; 7
     cce:	60 83       	st	Z, r22
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	68 e0       	ldi	r22, 0x08	; 8
     cd4:	60 83       	st	Z, r22
     cd6:	31 97       	sbiw	r30, 0x01	; 1
     cd8:	69 e0       	ldi	r22, 0x09	; 9
     cda:	60 83       	st	Z, r22
     cdc:	31 97       	sbiw	r30, 0x01	; 1
     cde:	60 e1       	ldi	r22, 0x10	; 16
     ce0:	60 83       	st	Z, r22
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	30 83       	st	Z, r19
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	32 e1       	ldi	r19, 0x12	; 18
     cea:	30 83       	st	Z, r19
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	33 e1       	ldi	r19, 0x13	; 19
     cf0:	30 83       	st	Z, r19
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	34 e1       	ldi	r19, 0x14	; 20
     cf6:	30 83       	st	Z, r19
     cf8:	31 97       	sbiw	r30, 0x01	; 1
     cfa:	35 e1       	ldi	r19, 0x15	; 21
     cfc:	30 83       	st	Z, r19
     cfe:	31 97       	sbiw	r30, 0x01	; 1
     d00:	36 e1       	ldi	r19, 0x16	; 22
     d02:	30 83       	st	Z, r19
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	37 e1       	ldi	r19, 0x17	; 23
     d08:	30 83       	st	Z, r19
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	38 e1       	ldi	r19, 0x18	; 24
     d0e:	30 83       	st	Z, r19
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	39 e1       	ldi	r19, 0x19	; 25
     d14:	30 83       	st	Z, r19
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	30 e2       	ldi	r19, 0x20	; 32
     d1a:	30 83       	st	Z, r19
     d1c:	31 97       	sbiw	r30, 0x01	; 1
     d1e:	31 e2       	ldi	r19, 0x21	; 33
     d20:	30 83       	st	Z, r19
     d22:	31 97       	sbiw	r30, 0x01	; 1
     d24:	20 83       	st	Z, r18
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	23 e2       	ldi	r18, 0x23	; 35
     d2a:	20 83       	st	Z, r18
     d2c:	31 97       	sbiw	r30, 0x01	; 1
     d2e:	40 83       	st	Z, r20
     d30:	31 97       	sbiw	r30, 0x01	; 1
     d32:	50 83       	st	Z, r21
     d34:	31 97       	sbiw	r30, 0x01	; 1
     d36:	26 e2       	ldi	r18, 0x26	; 38
     d38:	20 83       	st	Z, r18
     d3a:	31 97       	sbiw	r30, 0x01	; 1
     d3c:	27 e2       	ldi	r18, 0x27	; 39
     d3e:	20 83       	st	Z, r18
     d40:	31 97       	sbiw	r30, 0x01	; 1
     d42:	28 e2       	ldi	r18, 0x28	; 40
     d44:	20 83       	st	Z, r18
     d46:	31 97       	sbiw	r30, 0x01	; 1
     d48:	29 e2       	ldi	r18, 0x29	; 41
     d4a:	20 83       	st	Z, r18
     d4c:	31 97       	sbiw	r30, 0x01	; 1
     d4e:	20 e3       	ldi	r18, 0x30	; 48
     d50:	20 83       	st	Z, r18
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	21 e3       	ldi	r18, 0x31	; 49
     d56:	20 83       	st	Z, r18
     d58:	89 97       	sbiw	r24, 0x29	; 41
     d5a:	08 95       	ret

00000d5c <xPortStartScheduler>:
     d5c:	a8 95       	wdr
     d5e:	90 ec       	ldi	r25, 0xC0	; 192
     d60:	88 e1       	ldi	r24, 0x18	; 24
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	a8 95       	wdr
     d68:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     d72:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <pxCurrentTCB>
     d76:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
     d7a:	cd 91       	ld	r28, X+
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	dd 91       	ld	r29, X+
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	bf 91       	pop	r27
     d8c:	af 91       	pop	r26
     d8e:	9f 91       	pop	r25
     d90:	8f 91       	pop	r24
     d92:	7f 91       	pop	r23
     d94:	6f 91       	pop	r22
     d96:	5f 91       	pop	r21
     d98:	4f 91       	pop	r20
     d9a:	3f 91       	pop	r19
     d9c:	2f 91       	pop	r18
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	df 90       	pop	r13
     da8:	cf 90       	pop	r12
     daa:	bf 90       	pop	r11
     dac:	af 90       	pop	r10
     dae:	9f 90       	pop	r9
     db0:	8f 90       	pop	r8
     db2:	7f 90       	pop	r7
     db4:	6f 90       	pop	r6
     db6:	5f 90       	pop	r5
     db8:	4f 90       	pop	r4
     dba:	3f 90       	pop	r3
     dbc:	2f 90       	pop	r2
     dbe:	1f 90       	pop	r1
     dc0:	0f 90       	pop	r0
     dc2:	0c be       	out	0x3c, r0	; 60
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	08 95       	ret
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	08 95       	ret

00000dd4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	0f 92       	push	r0
     ddc:	0b b6       	in	r0, 0x3b	; 59
     dde:	0f 92       	push	r0
     de0:	0c b6       	in	r0, 0x3c	; 60
     de2:	0f 92       	push	r0
     de4:	1f 92       	push	r1
     de6:	11 24       	eor	r1, r1
     de8:	2f 92       	push	r2
     dea:	3f 92       	push	r3
     dec:	4f 92       	push	r4
     dee:	5f 92       	push	r5
     df0:	6f 92       	push	r6
     df2:	7f 92       	push	r7
     df4:	8f 92       	push	r8
     df6:	9f 92       	push	r9
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	2f 93       	push	r18
     e0a:	3f 93       	push	r19
     e0c:	4f 93       	push	r20
     e0e:	5f 93       	push	r21
     e10:	6f 93       	push	r22
     e12:	7f 93       	push	r23
     e14:	8f 93       	push	r24
     e16:	9f 93       	push	r25
     e18:	af 93       	push	r26
     e1a:	bf 93       	push	r27
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
     e24:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <pxCurrentTCB>
     e28:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
     e2c:	0d b6       	in	r0, 0x3d	; 61
     e2e:	0d 92       	st	X+, r0
     e30:	0e b6       	in	r0, 0x3e	; 62
     e32:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     e34:	0e 94 11 11 	call	0x2222	; 0x2222 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     e38:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <pxCurrentTCB>
     e3c:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
     e40:	cd 91       	ld	r28, X+
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	dd 91       	ld	r29, X+
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	ff 91       	pop	r31
     e4a:	ef 91       	pop	r30
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	bf 91       	pop	r27
     e52:	af 91       	pop	r26
     e54:	9f 91       	pop	r25
     e56:	8f 91       	pop	r24
     e58:	7f 91       	pop	r23
     e5a:	6f 91       	pop	r22
     e5c:	5f 91       	pop	r21
     e5e:	4f 91       	pop	r20
     e60:	3f 91       	pop	r19
     e62:	2f 91       	pop	r18
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	bf 90       	pop	r11
     e72:	af 90       	pop	r10
     e74:	9f 90       	pop	r9
     e76:	8f 90       	pop	r8
     e78:	7f 90       	pop	r7
     e7a:	6f 90       	pop	r6
     e7c:	5f 90       	pop	r5
     e7e:	4f 90       	pop	r4
     e80:	3f 90       	pop	r3
     e82:	2f 90       	pop	r2
     e84:	1f 90       	pop	r1
     e86:	0f 90       	pop	r0
     e88:	0c be       	out	0x3c, r0	; 60
     e8a:	0f 90       	pop	r0
     e8c:	0b be       	out	0x3b, r0	; 59
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e94:	08 95       	ret

00000e96 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	0f 92       	push	r0
     e9e:	0b b6       	in	r0, 0x3b	; 59
     ea0:	0f 92       	push	r0
     ea2:	0c b6       	in	r0, 0x3c	; 60
     ea4:	0f 92       	push	r0
     ea6:	1f 92       	push	r1
     ea8:	11 24       	eor	r1, r1
     eaa:	2f 92       	push	r2
     eac:	3f 92       	push	r3
     eae:	4f 92       	push	r4
     eb0:	5f 92       	push	r5
     eb2:	6f 92       	push	r6
     eb4:	7f 92       	push	r7
     eb6:	8f 92       	push	r8
     eb8:	9f 92       	push	r9
     eba:	af 92       	push	r10
     ebc:	bf 92       	push	r11
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
     ee6:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <pxCurrentTCB>
     eea:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
     eee:	0d b6       	in	r0, 0x3d	; 61
     ef0:	0d 92       	st	X+, r0
     ef2:	0e b6       	in	r0, 0x3e	; 62
     ef4:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     ef6:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     ef8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <xTaskIncrementTick>
     efc:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     efe:	0e 94 11 11 	call	0x2222	; 0x2222 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     f02:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <pxCurrentTCB>
     f06:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
     f0a:	cd 91       	ld	r28, X+
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	dd 91       	ld	r29, X+
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	ff 91       	pop	r31
     f14:	ef 91       	pop	r30
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	bf 91       	pop	r27
     f1c:	af 91       	pop	r26
     f1e:	9f 91       	pop	r25
     f20:	8f 91       	pop	r24
     f22:	7f 91       	pop	r23
     f24:	6f 91       	pop	r22
     f26:	5f 91       	pop	r21
     f28:	4f 91       	pop	r20
     f2a:	3f 91       	pop	r19
     f2c:	2f 91       	pop	r18
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	bf 90       	pop	r11
     f3c:	af 90       	pop	r10
     f3e:	9f 90       	pop	r9
     f40:	8f 90       	pop	r8
     f42:	7f 90       	pop	r7
     f44:	6f 90       	pop	r6
     f46:	5f 90       	pop	r5
     f48:	4f 90       	pop	r4
     f4a:	3f 90       	pop	r3
     f4c:	2f 90       	pop	r2
     f4e:	1f 90       	pop	r1
     f50:	0f 90       	pop	r0
     f52:	0c be       	out	0x3c, r0	; 60
     f54:	0f 90       	pop	r0
     f56:	0b be       	out	0x3b, r0	; 59
     f58:	0f 90       	pop	r0
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     f5e:	08 95       	ret

00000f60 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     f60:	9a df       	rcall	.-204    	; 0xe96 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     f62:	18 95       	reti

00000f64 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	0f 92       	push	r0
     f6a:	fc 01       	movw	r30, r24
     f6c:	96 8d       	ldd	r25, Z+30	; 0x1e
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	91 11       	cpse	r25, r1
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	08 95       	ret

00000f7a <prvCopyDataToQueue>:
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	ec 01       	movw	r28, r24
     f84:	04 2f       	mov	r16, r20
     f86:	1e 8d       	ldd	r17, Y+30	; 0x1e
     f88:	48 a1       	ldd	r20, Y+32	; 0x20
     f8a:	41 11       	cpse	r20, r1
     f8c:	0c c0       	rjmp	.+24     	; 0xfa6 <prvCopyDataToQueue+0x2c>
     f8e:	88 81       	ld	r24, Y
     f90:	99 81       	ldd	r25, Y+1	; 0x01
     f92:	89 2b       	or	r24, r25
     f94:	09 f0       	breq	.+2      	; 0xf98 <prvCopyDataToQueue+0x1e>
     f96:	42 c0       	rjmp	.+132    	; 0x101c <prvCopyDataToQueue+0xa2>
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <xTaskPriorityDisinherit>
     fa0:	1d 82       	std	Y+5, r1	; 0x05
     fa2:	1c 82       	std	Y+4, r1	; 0x04
     fa4:	42 c0       	rjmp	.+132    	; 0x102a <prvCopyDataToQueue+0xb0>
     fa6:	01 11       	cpse	r16, r1
     fa8:	17 c0       	rjmp	.+46     	; 0xfd8 <prvCopyDataToQueue+0x5e>
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	0e 94 86 28 	call	0x510c	; 0x510c <memcpy>
     fb4:	28 a1       	ldd	r18, Y+32	; 0x20
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	9b 81       	ldd	r25, Y+3	; 0x03
     fba:	82 0f       	add	r24, r18
     fbc:	91 1d       	adc	r25, r1
     fbe:	9b 83       	std	Y+3, r25	; 0x03
     fc0:	8a 83       	std	Y+2, r24	; 0x02
     fc2:	2c 81       	ldd	r18, Y+4	; 0x04
     fc4:	3d 81       	ldd	r19, Y+5	; 0x05
     fc6:	82 17       	cp	r24, r18
     fc8:	93 07       	cpc	r25, r19
     fca:	50 f1       	brcs	.+84     	; 0x1020 <prvCopyDataToQueue+0xa6>
     fcc:	88 81       	ld	r24, Y
     fce:	99 81       	ldd	r25, Y+1	; 0x01
     fd0:	9b 83       	std	Y+3, r25	; 0x03
     fd2:	8a 83       	std	Y+2, r24	; 0x02
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	29 c0       	rjmp	.+82     	; 0x102a <prvCopyDataToQueue+0xb0>
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	8e 81       	ldd	r24, Y+6	; 0x06
     fdc:	9f 81       	ldd	r25, Y+7	; 0x07
     fde:	0e 94 86 28 	call	0x510c	; 0x510c <memcpy>
     fe2:	88 a1       	ldd	r24, Y+32	; 0x20
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	91 95       	neg	r25
     fe8:	81 95       	neg	r24
     fea:	91 09       	sbc	r25, r1
     fec:	2e 81       	ldd	r18, Y+6	; 0x06
     fee:	3f 81       	ldd	r19, Y+7	; 0x07
     ff0:	28 0f       	add	r18, r24
     ff2:	39 1f       	adc	r19, r25
     ff4:	3f 83       	std	Y+7, r19	; 0x07
     ff6:	2e 83       	std	Y+6, r18	; 0x06
     ff8:	48 81       	ld	r20, Y
     ffa:	59 81       	ldd	r21, Y+1	; 0x01
     ffc:	24 17       	cp	r18, r20
     ffe:	35 07       	cpc	r19, r21
    1000:	30 f4       	brcc	.+12     	; 0x100e <prvCopyDataToQueue+0x94>
    1002:	2c 81       	ldd	r18, Y+4	; 0x04
    1004:	3d 81       	ldd	r19, Y+5	; 0x05
    1006:	82 0f       	add	r24, r18
    1008:	93 1f       	adc	r25, r19
    100a:	9f 83       	std	Y+7, r25	; 0x07
    100c:	8e 83       	std	Y+6, r24	; 0x06
    100e:	02 30       	cpi	r16, 0x02	; 2
    1010:	49 f4       	brne	.+18     	; 0x1024 <prvCopyDataToQueue+0xaa>
    1012:	11 23       	and	r17, r17
    1014:	49 f0       	breq	.+18     	; 0x1028 <prvCopyDataToQueue+0xae>
    1016:	11 50       	subi	r17, 0x01	; 1
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	07 c0       	rjmp	.+14     	; 0x102a <prvCopyDataToQueue+0xb0>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	05 c0       	rjmp	.+10     	; 0x102a <prvCopyDataToQueue+0xb0>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	03 c0       	rjmp	.+6      	; 0x102a <prvCopyDataToQueue+0xb0>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	01 c0       	rjmp	.+2      	; 0x102a <prvCopyDataToQueue+0xb0>
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	1f 5f       	subi	r17, 0xFF	; 255
    102c:	1e 8f       	std	Y+30, r17	; 0x1e
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	08 95       	ret

00001038 <prvCopyDataFromQueue>:
    1038:	fc 01       	movw	r30, r24
    103a:	40 a1       	ldd	r20, Z+32	; 0x20
    103c:	44 23       	and	r20, r20
    103e:	a9 f0       	breq	.+42     	; 0x106a <prvCopyDataFromQueue+0x32>
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	26 81       	ldd	r18, Z+6	; 0x06
    1044:	37 81       	ldd	r19, Z+7	; 0x07
    1046:	24 0f       	add	r18, r20
    1048:	35 1f       	adc	r19, r21
    104a:	37 83       	std	Z+7, r19	; 0x07
    104c:	26 83       	std	Z+6, r18	; 0x06
    104e:	84 81       	ldd	r24, Z+4	; 0x04
    1050:	95 81       	ldd	r25, Z+5	; 0x05
    1052:	28 17       	cp	r18, r24
    1054:	39 07       	cpc	r19, r25
    1056:	20 f0       	brcs	.+8      	; 0x1060 <prvCopyDataFromQueue+0x28>
    1058:	80 81       	ld	r24, Z
    105a:	91 81       	ldd	r25, Z+1	; 0x01
    105c:	97 83       	std	Z+7, r25	; 0x07
    105e:	86 83       	std	Z+6, r24	; 0x06
    1060:	cb 01       	movw	r24, r22
    1062:	66 81       	ldd	r22, Z+6	; 0x06
    1064:	77 81       	ldd	r23, Z+7	; 0x07
    1066:	0c 94 86 28 	jmp	0x510c	; 0x510c <memcpy>
    106a:	08 95       	ret

0000106c <prvUnlockQueue>:
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	8c 01       	movw	r16, r24
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	0f 92       	push	r0
    107e:	fc 01       	movw	r30, r24
    1080:	c2 a1       	ldd	r28, Z+34	; 0x22
    1082:	1c 16       	cp	r1, r28
    1084:	ac f4       	brge	.+42     	; 0x10b0 <prvUnlockQueue+0x44>
    1086:	83 89       	ldd	r24, Z+19	; 0x13
    1088:	81 11       	cpse	r24, r1
    108a:	06 c0       	rjmp	.+12     	; 0x1098 <prvUnlockQueue+0x2c>
    108c:	11 c0       	rjmp	.+34     	; 0x10b0 <prvUnlockQueue+0x44>
    108e:	f8 01       	movw	r30, r16
    1090:	83 89       	ldd	r24, Z+19	; 0x13
    1092:	81 11       	cpse	r24, r1
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <prvUnlockQueue+0x34>
    1096:	0c c0       	rjmp	.+24     	; 0x10b0 <prvUnlockQueue+0x44>
    1098:	78 01       	movw	r14, r16
    109a:	f3 e1       	ldi	r31, 0x13	; 19
    109c:	ef 0e       	add	r14, r31
    109e:	f1 1c       	adc	r15, r1
    10a0:	c7 01       	movw	r24, r14
    10a2:	0e 94 c7 11 	call	0x238e	; 0x238e <xTaskRemoveFromEventList>
    10a6:	81 11       	cpse	r24, r1
    10a8:	0e 94 6f 12 	call	0x24de	; 0x24de <vTaskMissedYield>
    10ac:	c1 50       	subi	r28, 0x01	; 1
    10ae:	79 f7       	brne	.-34     	; 0x108e <prvUnlockQueue+0x22>
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	f8 01       	movw	r30, r16
    10b4:	82 a3       	std	Z+34, r24	; 0x22
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	0f 92       	push	r0
    10c0:	c1 a1       	ldd	r28, Z+33	; 0x21
    10c2:	1c 16       	cp	r1, r28
    10c4:	ac f4       	brge	.+42     	; 0x10f0 <prvUnlockQueue+0x84>
    10c6:	80 85       	ldd	r24, Z+8	; 0x08
    10c8:	81 11       	cpse	r24, r1
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <prvUnlockQueue+0x6c>
    10cc:	11 c0       	rjmp	.+34     	; 0x10f0 <prvUnlockQueue+0x84>
    10ce:	f8 01       	movw	r30, r16
    10d0:	80 85       	ldd	r24, Z+8	; 0x08
    10d2:	81 11       	cpse	r24, r1
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <prvUnlockQueue+0x74>
    10d6:	0c c0       	rjmp	.+24     	; 0x10f0 <prvUnlockQueue+0x84>
    10d8:	78 01       	movw	r14, r16
    10da:	f8 e0       	ldi	r31, 0x08	; 8
    10dc:	ef 0e       	add	r14, r31
    10de:	f1 1c       	adc	r15, r1
    10e0:	c7 01       	movw	r24, r14
    10e2:	0e 94 c7 11 	call	0x238e	; 0x238e <xTaskRemoveFromEventList>
    10e6:	81 11       	cpse	r24, r1
    10e8:	0e 94 6f 12 	call	0x24de	; 0x24de <vTaskMissedYield>
    10ec:	c1 50       	subi	r28, 0x01	; 1
    10ee:	79 f7       	brne	.-34     	; 0x10ce <prvUnlockQueue+0x62>
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	f8 01       	movw	r30, r16
    10f4:	81 a3       	std	Z+33, r24	; 0x21
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	ff 90       	pop	r15
    1102:	ef 90       	pop	r14
    1104:	08 95       	ret

00001106 <xQueueGenericReset>:
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	ec 01       	movw	r28, r24
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	0f 92       	push	r0
    1112:	e8 81       	ld	r30, Y
    1114:	f9 81       	ldd	r31, Y+1	; 0x01
    1116:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1118:	28 a1       	ldd	r18, Y+32	; 0x20
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	82 9f       	mul	r24, r18
    1120:	a0 01       	movw	r20, r0
    1122:	83 9f       	mul	r24, r19
    1124:	50 0d       	add	r21, r0
    1126:	92 9f       	mul	r25, r18
    1128:	50 0d       	add	r21, r0
    112a:	11 24       	eor	r1, r1
    112c:	4e 0f       	add	r20, r30
    112e:	5f 1f       	adc	r21, r31
    1130:	5d 83       	std	Y+5, r21	; 0x05
    1132:	4c 83       	std	Y+4, r20	; 0x04
    1134:	1e 8e       	std	Y+30, r1	; 0x1e
    1136:	fb 83       	std	Y+3, r31	; 0x03
    1138:	ea 83       	std	Y+2, r30	; 0x02
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	82 9f       	mul	r24, r18
    113e:	a0 01       	movw	r20, r0
    1140:	83 9f       	mul	r24, r19
    1142:	50 0d       	add	r21, r0
    1144:	92 9f       	mul	r25, r18
    1146:	50 0d       	add	r21, r0
    1148:	11 24       	eor	r1, r1
    114a:	cf 01       	movw	r24, r30
    114c:	84 0f       	add	r24, r20
    114e:	95 1f       	adc	r25, r21
    1150:	9f 83       	std	Y+7, r25	; 0x07
    1152:	8e 83       	std	Y+6, r24	; 0x06
    1154:	8f ef       	ldi	r24, 0xFF	; 255
    1156:	89 a3       	std	Y+33, r24	; 0x21
    1158:	8a a3       	std	Y+34, r24	; 0x22
    115a:	61 11       	cpse	r22, r1
    115c:	0b c0       	rjmp	.+22     	; 0x1174 <xQueueGenericReset+0x6e>
    115e:	88 85       	ldd	r24, Y+8	; 0x08
    1160:	88 23       	and	r24, r24
    1162:	71 f0       	breq	.+28     	; 0x1180 <xQueueGenericReset+0x7a>
    1164:	ce 01       	movw	r24, r28
    1166:	08 96       	adiw	r24, 0x08	; 8
    1168:	0e 94 c7 11 	call	0x238e	; 0x238e <xTaskRemoveFromEventList>
    116c:	88 23       	and	r24, r24
    116e:	41 f0       	breq	.+16     	; 0x1180 <xQueueGenericReset+0x7a>
    1170:	31 de       	rcall	.-926    	; 0xdd4 <vPortYield>
    1172:	06 c0       	rjmp	.+12     	; 0x1180 <xQueueGenericReset+0x7a>
    1174:	ce 01       	movw	r24, r28
    1176:	08 96       	adiw	r24, 0x08	; 8
    1178:	e5 dc       	rcall	.-1590   	; 0xb44 <vListInitialise>
    117a:	ce 01       	movw	r24, r28
    117c:	43 96       	adiw	r24, 0x13	; 19
    117e:	e2 dc       	rcall	.-1596   	; 0xb44 <vListInitialise>
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <xQueueGenericCreate>:
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	08 2f       	mov	r16, r24
    1198:	16 2f       	mov	r17, r22
    119a:	f4 2e       	mov	r15, r20
    119c:	66 23       	and	r22, r22
    119e:	b9 f0       	breq	.+46     	; 0x11ce <xQueueGenericCreate+0x42>
    11a0:	86 9f       	mul	r24, r22
    11a2:	c0 01       	movw	r24, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	85 96       	adiw	r24, 0x25	; 37
    11a8:	ab dc       	rcall	.-1706   	; 0xb00 <pvPortMalloc>
    11aa:	ec 01       	movw	r28, r24
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	41 f4       	brne	.+16     	; 0x11c0 <xQueueGenericCreate+0x34>
    11b0:	14 c0       	rjmp	.+40     	; 0x11da <xQueueGenericCreate+0x4e>
    11b2:	0f 8f       	std	Y+31, r16	; 0x1f
    11b4:	18 a3       	std	Y+32, r17	; 0x20
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	ce 01       	movw	r24, r28
    11ba:	a5 df       	rcall	.-182    	; 0x1106 <xQueueGenericReset>
    11bc:	fc a2       	std	Y+36, r15	; 0x24
    11be:	0d c0       	rjmp	.+26     	; 0x11da <xQueueGenericCreate+0x4e>
    11c0:	85 96       	adiw	r24, 0x25	; 37
    11c2:	99 83       	std	Y+1, r25	; 0x01
    11c4:	88 83       	st	Y, r24
    11c6:	f5 cf       	rjmp	.-22     	; 0x11b2 <xQueueGenericCreate+0x26>
    11c8:	d9 83       	std	Y+1, r29	; 0x01
    11ca:	c8 83       	st	Y, r28
    11cc:	f2 cf       	rjmp	.-28     	; 0x11b2 <xQueueGenericCreate+0x26>
    11ce:	85 e2       	ldi	r24, 0x25	; 37
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	96 dc       	rcall	.-1748   	; 0xb00 <pvPortMalloc>
    11d4:	ec 01       	movw	r28, r24
    11d6:	89 2b       	or	r24, r25
    11d8:	b9 f7       	brne	.-18     	; 0x11c8 <xQueueGenericCreate+0x3c>
    11da:	ce 01       	movw	r24, r28
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	08 95       	ret

000011e8 <xQueueGenericSend>:
    11e8:	9f 92       	push	r9
    11ea:	af 92       	push	r10
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	29 97       	sbiw	r28, 0x09	; 9
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	7c 01       	movw	r14, r24
    1210:	5b 01       	movw	r10, r22
    1212:	2e 83       	std	Y+6, r18	; 0x06
    1214:	3f 83       	std	Y+7, r19	; 0x07
    1216:	48 87       	std	Y+8, r20	; 0x08
    1218:	59 87       	std	Y+9, r21	; 0x09
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	99 24       	eor	r9, r9
    121e:	93 94       	inc	r9
    1220:	6c 01       	movw	r12, r24
    1222:	88 e0       	ldi	r24, 0x08	; 8
    1224:	c8 0e       	add	r12, r24
    1226:	d1 1c       	adc	r13, r1
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	0f 92       	push	r0
    122e:	f7 01       	movw	r30, r14
    1230:	96 8d       	ldd	r25, Z+30	; 0x1e
    1232:	87 8d       	ldd	r24, Z+31	; 0x1f
    1234:	98 17       	cp	r25, r24
    1236:	10 f0       	brcs	.+4      	; 0x123c <xQueueGenericSend+0x54>
    1238:	02 30       	cpi	r16, 0x02	; 2
    123a:	b1 f4       	brne	.+44     	; 0x1268 <xQueueGenericSend+0x80>
    123c:	40 2f       	mov	r20, r16
    123e:	b5 01       	movw	r22, r10
    1240:	c7 01       	movw	r24, r14
    1242:	9b de       	rcall	.-714    	; 0xf7a <prvCopyDataToQueue>
    1244:	f7 01       	movw	r30, r14
    1246:	93 89       	ldd	r25, Z+19	; 0x13
    1248:	99 23       	and	r25, r25
    124a:	41 f0       	breq	.+16     	; 0x125c <xQueueGenericSend+0x74>
    124c:	c7 01       	movw	r24, r14
    124e:	43 96       	adiw	r24, 0x13	; 19
    1250:	0e 94 c7 11 	call	0x238e	; 0x238e <xTaskRemoveFromEventList>
    1254:	88 23       	and	r24, r24
    1256:	21 f0       	breq	.+8      	; 0x1260 <xQueueGenericSend+0x78>
    1258:	bd dd       	rcall	.-1158   	; 0xdd4 <vPortYield>
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <xQueueGenericSend+0x78>
    125c:	81 11       	cpse	r24, r1
    125e:	ba dd       	rcall	.-1164   	; 0xdd4 <vPortYield>
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	4e c0       	rjmp	.+156    	; 0x1304 <xQueueGenericSend+0x11c>
    1268:	8e 81       	ldd	r24, Y+6	; 0x06
    126a:	9f 81       	ldd	r25, Y+7	; 0x07
    126c:	a8 85       	ldd	r26, Y+8	; 0x08
    126e:	b9 85       	ldd	r27, Y+9	; 0x09
    1270:	89 2b       	or	r24, r25
    1272:	8a 2b       	or	r24, r26
    1274:	8b 2b       	or	r24, r27
    1276:	21 f4       	brne	.+8      	; 0x1280 <xQueueGenericSend+0x98>
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	42 c0       	rjmp	.+132    	; 0x1304 <xQueueGenericSend+0x11c>
    1280:	11 11       	cpse	r17, r1
    1282:	05 c0       	rjmp	.+10     	; 0x128e <xQueueGenericSend+0xa6>
    1284:	ce 01       	movw	r24, r28
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	0e 94 09 12 	call	0x2412	; 0x2412 <vTaskInternalSetTimeOutState>
    128c:	19 2d       	mov	r17, r9
    128e:	0f 90       	pop	r0
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	49 d6       	rcall	.+3218   	; 0x1f26 <vTaskSuspendAll>
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	0f 92       	push	r0
    129a:	f7 01       	movw	r30, r14
    129c:	81 a1       	ldd	r24, Z+33	; 0x21
    129e:	8f 3f       	cpi	r24, 0xFF	; 255
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <xQueueGenericSend+0xbc>
    12a2:	11 a2       	std	Z+33, r1	; 0x21
    12a4:	f7 01       	movw	r30, r14
    12a6:	82 a1       	ldd	r24, Z+34	; 0x22
    12a8:	8f 3f       	cpi	r24, 0xFF	; 255
    12aa:	09 f4       	brne	.+2      	; 0x12ae <xQueueGenericSend+0xc6>
    12ac:	12 a2       	std	Z+34, r1	; 0x22
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	be 01       	movw	r22, r28
    12b4:	6a 5f       	subi	r22, 0xFA	; 250
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 1a 12 	call	0x2434	; 0x2434 <xTaskCheckForTimeOut>
    12c0:	81 11       	cpse	r24, r1
    12c2:	1c c0       	rjmp	.+56     	; 0x12fc <xQueueGenericSend+0x114>
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	0f 92       	push	r0
    12ca:	f7 01       	movw	r30, r14
    12cc:	96 8d       	ldd	r25, Z+30	; 0x1e
    12ce:	87 8d       	ldd	r24, Z+31	; 0x1f
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	98 13       	cpse	r25, r24
    12d6:	0e c0       	rjmp	.+28     	; 0x12f4 <xQueueGenericSend+0x10c>
    12d8:	4e 81       	ldd	r20, Y+6	; 0x06
    12da:	5f 81       	ldd	r21, Y+7	; 0x07
    12dc:	68 85       	ldd	r22, Y+8	; 0x08
    12de:	79 85       	ldd	r23, Y+9	; 0x09
    12e0:	c6 01       	movw	r24, r12
    12e2:	0e 94 90 11 	call	0x2320	; 0x2320 <vTaskPlaceOnEventList>
    12e6:	c7 01       	movw	r24, r14
    12e8:	c1 de       	rcall	.-638    	; 0x106c <prvUnlockQueue>
    12ea:	06 d7       	rcall	.+3596   	; 0x20f8 <xTaskResumeAll>
    12ec:	81 11       	cpse	r24, r1
    12ee:	9c cf       	rjmp	.-200    	; 0x1228 <xQueueGenericSend+0x40>
    12f0:	71 dd       	rcall	.-1310   	; 0xdd4 <vPortYield>
    12f2:	9a cf       	rjmp	.-204    	; 0x1228 <xQueueGenericSend+0x40>
    12f4:	c7 01       	movw	r24, r14
    12f6:	ba de       	rcall	.-652    	; 0x106c <prvUnlockQueue>
    12f8:	ff d6       	rcall	.+3582   	; 0x20f8 <xTaskResumeAll>
    12fa:	96 cf       	rjmp	.-212    	; 0x1228 <xQueueGenericSend+0x40>
    12fc:	c7 01       	movw	r24, r14
    12fe:	b6 de       	rcall	.-660    	; 0x106c <prvUnlockQueue>
    1300:	fb d6       	rcall	.+3574   	; 0x20f8 <xTaskResumeAll>
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	29 96       	adiw	r28, 0x09	; 9
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	df 90       	pop	r13
    131e:	cf 90       	pop	r12
    1320:	bf 90       	pop	r11
    1322:	af 90       	pop	r10
    1324:	9f 90       	pop	r9
    1326:	08 95       	ret

00001328 <xQueueCreateMutex>:
    1328:	0f 93       	push	r16
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	48 2f       	mov	r20, r24
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	2b df       	rcall	.-426    	; 0x118c <xQueueGenericCreate>
    1336:	ec 01       	movw	r28, r24
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	61 f0       	breq	.+24     	; 0x1354 <xQueueCreateMutex+0x2c>
    133c:	1d 82       	std	Y+5, r1	; 0x05
    133e:	1c 82       	std	Y+4, r1	; 0x04
    1340:	19 82       	std	Y+1, r1	; 0x01
    1342:	18 82       	st	Y, r1
    1344:	1e 82       	std	Y+6, r1	; 0x06
    1346:	00 e0       	ldi	r16, 0x00	; 0
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	a9 01       	movw	r20, r18
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	4a df       	rcall	.-364    	; 0x11e8 <xQueueGenericSend>
    1354:	ce 01       	movw	r24, r28
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	0f 91       	pop	r16
    135c:	08 95       	ret

0000135e <xQueueGenericSendFromISR>:
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	8a 01       	movw	r16, r20
    136c:	fc 01       	movw	r30, r24
    136e:	56 8d       	ldd	r21, Z+30	; 0x1e
    1370:	37 8d       	ldd	r19, Z+31	; 0x1f
    1372:	53 17       	cp	r21, r19
    1374:	10 f0       	brcs	.+4      	; 0x137a <xQueueGenericSendFromISR+0x1c>
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	e1 f4       	brne	.+56     	; 0x13b2 <xQueueGenericSendFromISR+0x54>
    137a:	42 2f       	mov	r20, r18
    137c:	78 01       	movw	r14, r16
    137e:	ec 01       	movw	r28, r24
    1380:	1a a1       	ldd	r17, Y+34	; 0x22
    1382:	fb dd       	rcall	.-1034   	; 0xf7a <prvCopyDataToQueue>
    1384:	1f 3f       	cpi	r17, 0xFF	; 255
    1386:	79 f4       	brne	.+30     	; 0x13a6 <xQueueGenericSendFromISR+0x48>
    1388:	8b 89       	ldd	r24, Y+19	; 0x13
    138a:	88 23       	and	r24, r24
    138c:	a1 f0       	breq	.+40     	; 0x13b6 <xQueueGenericSendFromISR+0x58>
    138e:	ce 01       	movw	r24, r28
    1390:	43 96       	adiw	r24, 0x13	; 19
    1392:	fd d7       	rcall	.+4090   	; 0x238e <xTaskRemoveFromEventList>
    1394:	88 23       	and	r24, r24
    1396:	89 f0       	breq	.+34     	; 0x13ba <xQueueGenericSendFromISR+0x5c>
    1398:	e1 14       	cp	r14, r1
    139a:	f1 04       	cpc	r15, r1
    139c:	81 f0       	breq	.+32     	; 0x13be <xQueueGenericSendFromISR+0x60>
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	f7 01       	movw	r30, r14
    13a2:	80 83       	st	Z, r24
    13a4:	0d c0       	rjmp	.+26     	; 0x13c0 <xQueueGenericSendFromISR+0x62>
    13a6:	ff 24       	eor	r15, r15
    13a8:	f3 94       	inc	r15
    13aa:	f1 0e       	add	r15, r17
    13ac:	fa a2       	std	Y+34, r15	; 0x22
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	07 c0       	rjmp	.+14     	; 0x13c0 <xQueueGenericSendFromISR+0x62>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <xQueueGenericSendFromISR+0x62>
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <xQueueGenericSendFromISR+0x62>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	01 c0       	rjmp	.+2      	; 0x13c0 <xQueueGenericSendFromISR+0x62>
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	08 95       	ret

000013ce <xQueueReceive>:
    13ce:	9f 92       	push	r9
    13d0:	af 92       	push	r10
    13d2:	bf 92       	push	r11
    13d4:	cf 92       	push	r12
    13d6:	df 92       	push	r13
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	29 97       	sbiw	r28, 0x09	; 9
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	8c 01       	movw	r16, r24
    13f6:	5b 01       	movw	r10, r22
    13f8:	2e 83       	std	Y+6, r18	; 0x06
    13fa:	3f 83       	std	Y+7, r19	; 0x07
    13fc:	48 87       	std	Y+8, r20	; 0x08
    13fe:	59 87       	std	Y+9, r21	; 0x09
    1400:	e1 2c       	mov	r14, r1
    1402:	99 24       	eor	r9, r9
    1404:	93 94       	inc	r9
    1406:	6c 01       	movw	r12, r24
    1408:	83 e1       	ldi	r24, 0x13	; 19
    140a:	c8 0e       	add	r12, r24
    140c:	d1 1c       	adc	r13, r1
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	0f 92       	push	r0
    1414:	f8 01       	movw	r30, r16
    1416:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1418:	ff 20       	and	r15, r15
    141a:	91 f0       	breq	.+36     	; 0x1440 <xQueueReceive+0x72>
    141c:	b5 01       	movw	r22, r10
    141e:	c8 01       	movw	r24, r16
    1420:	0b de       	rcall	.-1002   	; 0x1038 <prvCopyDataFromQueue>
    1422:	fa 94       	dec	r15
    1424:	f8 01       	movw	r30, r16
    1426:	f6 8e       	std	Z+30, r15	; 0x1e
    1428:	80 85       	ldd	r24, Z+8	; 0x08
    142a:	88 23       	and	r24, r24
    142c:	29 f0       	breq	.+10     	; 0x1438 <xQueueReceive+0x6a>
    142e:	c8 01       	movw	r24, r16
    1430:	08 96       	adiw	r24, 0x08	; 8
    1432:	ad d7       	rcall	.+3930   	; 0x238e <xTaskRemoveFromEventList>
    1434:	81 11       	cpse	r24, r1
    1436:	ce dc       	rcall	.-1636   	; 0xdd4 <vPortYield>
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	4a c0       	rjmp	.+148    	; 0x14d4 <xQueueReceive+0x106>
    1440:	8e 81       	ldd	r24, Y+6	; 0x06
    1442:	9f 81       	ldd	r25, Y+7	; 0x07
    1444:	a8 85       	ldd	r26, Y+8	; 0x08
    1446:	b9 85       	ldd	r27, Y+9	; 0x09
    1448:	89 2b       	or	r24, r25
    144a:	8a 2b       	or	r24, r26
    144c:	8b 2b       	or	r24, r27
    144e:	21 f4       	brne	.+8      	; 0x1458 <xQueueReceive+0x8a>
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	3e c0       	rjmp	.+124    	; 0x14d4 <xQueueReceive+0x106>
    1458:	e1 10       	cpse	r14, r1
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <xQueueReceive+0x96>
    145c:	ce 01       	movw	r24, r28
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	d8 d7       	rcall	.+4016   	; 0x2412 <vTaskInternalSetTimeOutState>
    1462:	e9 2c       	mov	r14, r9
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	5e d5       	rcall	.+2748   	; 0x1f26 <vTaskSuspendAll>
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	0f 92       	push	r0
    1470:	f8 01       	movw	r30, r16
    1472:	81 a1       	ldd	r24, Z+33	; 0x21
    1474:	8f 3f       	cpi	r24, 0xFF	; 255
    1476:	09 f4       	brne	.+2      	; 0x147a <xQueueReceive+0xac>
    1478:	11 a2       	std	Z+33, r1	; 0x21
    147a:	f8 01       	movw	r30, r16
    147c:	82 a1       	ldd	r24, Z+34	; 0x22
    147e:	8f 3f       	cpi	r24, 0xFF	; 255
    1480:	09 f4       	brne	.+2      	; 0x1484 <xQueueReceive+0xb6>
    1482:	12 a2       	std	Z+34, r1	; 0x22
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	be 01       	movw	r22, r28
    148a:	6a 5f       	subi	r22, 0xFA	; 250
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	d0 d7       	rcall	.+4000   	; 0x2434 <xTaskCheckForTimeOut>
    1494:	81 11       	cpse	r24, r1
    1496:	15 c0       	rjmp	.+42     	; 0x14c2 <xQueueReceive+0xf4>
    1498:	c8 01       	movw	r24, r16
    149a:	64 dd       	rcall	.-1336   	; 0xf64 <prvIsQueueEmpty>
    149c:	88 23       	and	r24, r24
    149e:	69 f0       	breq	.+26     	; 0x14ba <xQueueReceive+0xec>
    14a0:	4e 81       	ldd	r20, Y+6	; 0x06
    14a2:	5f 81       	ldd	r21, Y+7	; 0x07
    14a4:	68 85       	ldd	r22, Y+8	; 0x08
    14a6:	79 85       	ldd	r23, Y+9	; 0x09
    14a8:	c6 01       	movw	r24, r12
    14aa:	3a d7       	rcall	.+3700   	; 0x2320 <vTaskPlaceOnEventList>
    14ac:	c8 01       	movw	r24, r16
    14ae:	de dd       	rcall	.-1092   	; 0x106c <prvUnlockQueue>
    14b0:	23 d6       	rcall	.+3142   	; 0x20f8 <xTaskResumeAll>
    14b2:	81 11       	cpse	r24, r1
    14b4:	ac cf       	rjmp	.-168    	; 0x140e <xQueueReceive+0x40>
    14b6:	8e dc       	rcall	.-1764   	; 0xdd4 <vPortYield>
    14b8:	aa cf       	rjmp	.-172    	; 0x140e <xQueueReceive+0x40>
    14ba:	c8 01       	movw	r24, r16
    14bc:	d7 dd       	rcall	.-1106   	; 0x106c <prvUnlockQueue>
    14be:	1c d6       	rcall	.+3128   	; 0x20f8 <xTaskResumeAll>
    14c0:	a6 cf       	rjmp	.-180    	; 0x140e <xQueueReceive+0x40>
    14c2:	c8 01       	movw	r24, r16
    14c4:	d3 dd       	rcall	.-1114   	; 0x106c <prvUnlockQueue>
    14c6:	18 d6       	rcall	.+3120   	; 0x20f8 <xTaskResumeAll>
    14c8:	c8 01       	movw	r24, r16
    14ca:	4c dd       	rcall	.-1384   	; 0xf64 <prvIsQueueEmpty>
    14cc:	88 23       	and	r24, r24
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <xQueueReceive+0x104>
    14d0:	9e cf       	rjmp	.-196    	; 0x140e <xQueueReceive+0x40>
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	29 96       	adiw	r28, 0x09	; 9
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	df 90       	pop	r13
    14ee:	cf 90       	pop	r12
    14f0:	bf 90       	pop	r11
    14f2:	af 90       	pop	r10
    14f4:	9f 90       	pop	r9
    14f6:	08 95       	ret

000014f8 <xQueueSemaphoreTake>:
    14f8:	bf 92       	push	r11
    14fa:	cf 92       	push	r12
    14fc:	df 92       	push	r13
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	29 97       	sbiw	r28, 0x09	; 9
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	8c 01       	movw	r16, r24
    151c:	4e 83       	std	Y+6, r20	; 0x06
    151e:	5f 83       	std	Y+7, r21	; 0x07
    1520:	68 87       	std	Y+8, r22	; 0x08
    1522:	79 87       	std	Y+9, r23	; 0x09
    1524:	b1 2c       	mov	r11, r1
    1526:	d1 2c       	mov	r13, r1
    1528:	cc 24       	eor	r12, r12
    152a:	c3 94       	inc	r12
    152c:	7c 01       	movw	r14, r24
    152e:	83 e1       	ldi	r24, 0x13	; 19
    1530:	e8 0e       	add	r14, r24
    1532:	f1 1c       	adc	r15, r1
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	0f 92       	push	r0
    153a:	d8 01       	movw	r26, r16
    153c:	5e 96       	adiw	r26, 0x1e	; 30
    153e:	8c 91       	ld	r24, X
    1540:	5e 97       	sbiw	r26, 0x1e	; 30
    1542:	88 23       	and	r24, r24
    1544:	d9 f0       	breq	.+54     	; 0x157c <xQueueSemaphoreTake+0x84>
    1546:	81 50       	subi	r24, 0x01	; 1
    1548:	5e 96       	adiw	r26, 0x1e	; 30
    154a:	8c 93       	st	X, r24
    154c:	5e 97       	sbiw	r26, 0x1e	; 30
    154e:	8d 91       	ld	r24, X+
    1550:	9c 91       	ld	r25, X
    1552:	89 2b       	or	r24, r25
    1554:	29 f4       	brne	.+10     	; 0x1560 <xQueueSemaphoreTake+0x68>
    1556:	0e 94 80 13 	call	0x2700	; 0x2700 <pvTaskIncrementMutexHeldCount>
    155a:	f8 01       	movw	r30, r16
    155c:	95 83       	std	Z+5, r25	; 0x05
    155e:	84 83       	std	Z+4, r24	; 0x04
    1560:	d8 01       	movw	r26, r16
    1562:	18 96       	adiw	r26, 0x08	; 8
    1564:	8c 91       	ld	r24, X
    1566:	88 23       	and	r24, r24
    1568:	29 f0       	breq	.+10     	; 0x1574 <xQueueSemaphoreTake+0x7c>
    156a:	c8 01       	movw	r24, r16
    156c:	08 96       	adiw	r24, 0x08	; 8
    156e:	0f d7       	rcall	.+3614   	; 0x238e <xTaskRemoveFromEventList>
    1570:	81 11       	cpse	r24, r1
    1572:	30 dc       	rcall	.-1952   	; 0xdd4 <vPortYield>
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	77 c0       	rjmp	.+238    	; 0x166a <xQueueSemaphoreTake+0x172>
    157c:	8e 81       	ldd	r24, Y+6	; 0x06
    157e:	9f 81       	ldd	r25, Y+7	; 0x07
    1580:	a8 85       	ldd	r26, Y+8	; 0x08
    1582:	b9 85       	ldd	r27, Y+9	; 0x09
    1584:	89 2b       	or	r24, r25
    1586:	8a 2b       	or	r24, r26
    1588:	8b 2b       	or	r24, r27
    158a:	21 f4       	brne	.+8      	; 0x1594 <xQueueSemaphoreTake+0x9c>
    158c:	0f 90       	pop	r0
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	6b c0       	rjmp	.+214    	; 0x166a <xQueueSemaphoreTake+0x172>
    1594:	d1 10       	cpse	r13, r1
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <xQueueSemaphoreTake+0xa8>
    1598:	ce 01       	movw	r24, r28
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	3a d7       	rcall	.+3700   	; 0x2412 <vTaskInternalSetTimeOutState>
    159e:	dc 2c       	mov	r13, r12
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	c0 d4       	rcall	.+2432   	; 0x1f26 <vTaskSuspendAll>
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	0f 92       	push	r0
    15ac:	f8 01       	movw	r30, r16
    15ae:	81 a1       	ldd	r24, Z+33	; 0x21
    15b0:	8f 3f       	cpi	r24, 0xFF	; 255
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <xQueueSemaphoreTake+0xbe>
    15b4:	11 a2       	std	Z+33, r1	; 0x21
    15b6:	d8 01       	movw	r26, r16
    15b8:	92 96       	adiw	r26, 0x22	; 34
    15ba:	8c 91       	ld	r24, X
    15bc:	92 97       	sbiw	r26, 0x22	; 34
    15be:	8f 3f       	cpi	r24, 0xFF	; 255
    15c0:	11 f4       	brne	.+4      	; 0x15c6 <xQueueSemaphoreTake+0xce>
    15c2:	92 96       	adiw	r26, 0x22	; 34
    15c4:	1c 92       	st	X, r1
    15c6:	0f 90       	pop	r0
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	be 01       	movw	r22, r28
    15cc:	6a 5f       	subi	r22, 0xFA	; 250
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	ce 01       	movw	r24, r28
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	2f d7       	rcall	.+3678   	; 0x2434 <xTaskCheckForTimeOut>
    15d6:	81 11       	cpse	r24, r1
    15d8:	23 c0       	rjmp	.+70     	; 0x1620 <xQueueSemaphoreTake+0x128>
    15da:	c8 01       	movw	r24, r16
    15dc:	c3 dc       	rcall	.-1658   	; 0xf64 <prvIsQueueEmpty>
    15de:	88 23       	and	r24, r24
    15e0:	d9 f0       	breq	.+54     	; 0x1618 <xQueueSemaphoreTake+0x120>
    15e2:	f8 01       	movw	r30, r16
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	89 2b       	or	r24, r25
    15ea:	49 f4       	brne	.+18     	; 0x15fe <xQueueSemaphoreTake+0x106>
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	0f 92       	push	r0
    15f2:	84 81       	ldd	r24, Z+4	; 0x04
    15f4:	95 81       	ldd	r25, Z+5	; 0x05
    15f6:	8a d7       	rcall	.+3860   	; 0x250c <xTaskPriorityInherit>
    15f8:	b8 2e       	mov	r11, r24
    15fa:	0f 90       	pop	r0
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1600:	5f 81       	ldd	r21, Y+7	; 0x07
    1602:	68 85       	ldd	r22, Y+8	; 0x08
    1604:	79 85       	ldd	r23, Y+9	; 0x09
    1606:	c7 01       	movw	r24, r14
    1608:	8b d6       	rcall	.+3350   	; 0x2320 <vTaskPlaceOnEventList>
    160a:	c8 01       	movw	r24, r16
    160c:	2f dd       	rcall	.-1442   	; 0x106c <prvUnlockQueue>
    160e:	74 d5       	rcall	.+2792   	; 0x20f8 <xTaskResumeAll>
    1610:	81 11       	cpse	r24, r1
    1612:	90 cf       	rjmp	.-224    	; 0x1534 <xQueueSemaphoreTake+0x3c>
    1614:	df db       	rcall	.-2114   	; 0xdd4 <vPortYield>
    1616:	8e cf       	rjmp	.-228    	; 0x1534 <xQueueSemaphoreTake+0x3c>
    1618:	c8 01       	movw	r24, r16
    161a:	28 dd       	rcall	.-1456   	; 0x106c <prvUnlockQueue>
    161c:	6d d5       	rcall	.+2778   	; 0x20f8 <xTaskResumeAll>
    161e:	8a cf       	rjmp	.-236    	; 0x1534 <xQueueSemaphoreTake+0x3c>
    1620:	c8 01       	movw	r24, r16
    1622:	24 dd       	rcall	.-1464   	; 0x106c <prvUnlockQueue>
    1624:	69 d5       	rcall	.+2770   	; 0x20f8 <xTaskResumeAll>
    1626:	c8 01       	movw	r24, r16
    1628:	9d dc       	rcall	.-1734   	; 0xf64 <prvIsQueueEmpty>
    162a:	88 23       	and	r24, r24
    162c:	09 f4       	brne	.+2      	; 0x1630 <xQueueSemaphoreTake+0x138>
    162e:	82 cf       	rjmp	.-252    	; 0x1534 <xQueueSemaphoreTake+0x3c>
    1630:	bb 20       	and	r11, r11
    1632:	d1 f0       	breq	.+52     	; 0x1668 <xQueueSemaphoreTake+0x170>
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	0f 92       	push	r0
    163a:	f8 01       	movw	r30, r16
    163c:	83 89       	ldd	r24, Z+19	; 0x13
    163e:	88 23       	and	r24, r24
    1640:	39 f0       	breq	.+14     	; 0x1650 <xQueueSemaphoreTake+0x158>
    1642:	02 8c       	ldd	r0, Z+26	; 0x1a
    1644:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1646:	e0 2d       	mov	r30, r0
    1648:	80 81       	ld	r24, Z
    164a:	64 e0       	ldi	r22, 0x04	; 4
    164c:	68 1b       	sub	r22, r24
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <xQueueSemaphoreTake+0x15a>
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	d8 01       	movw	r26, r16
    1654:	14 96       	adiw	r26, 0x04	; 4
    1656:	8d 91       	ld	r24, X+
    1658:	9c 91       	ld	r25, X
    165a:	15 97       	sbiw	r26, 0x05	; 5
    165c:	0e 94 34 13 	call	0x2668	; 0x2668 <vTaskPriorityDisinheritAfterTimeout>
    1660:	0f 90       	pop	r0
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	01 c0       	rjmp	.+2      	; 0x166a <xQueueSemaphoreTake+0x172>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	29 96       	adiw	r28, 0x09	; 9
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	bf 90       	pop	r11
    1688:	08 95       	ret

0000168a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	0f 92       	push	r0
    1696:	89 a1       	ldd	r24, Y+33	; 0x21
    1698:	8f 3f       	cpi	r24, 0xFF	; 255
    169a:	09 f4       	brne	.+2      	; 0x169e <vQueueWaitForMessageRestricted+0x14>
    169c:	19 a2       	std	Y+33, r1	; 0x21
    169e:	8a a1       	ldd	r24, Y+34	; 0x22
    16a0:	8f 3f       	cpi	r24, 0xFF	; 255
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <vQueueWaitForMessageRestricted+0x1c>
    16a4:	1a a2       	std	Y+34, r1	; 0x22
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    16aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16ac:	81 11       	cpse	r24, r1
    16ae:	03 c0       	rjmp	.+6      	; 0x16b6 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    16b0:	ce 01       	movw	r24, r28
    16b2:	43 96       	adiw	r24, 0x13	; 19
    16b4:	4c d6       	rcall	.+3224   	; 0x234e <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    16b6:	ce 01       	movw	r24, r28
    16b8:	d9 dc       	rcall	.-1614   	; 0x106c <prvUnlockQueue>
    }
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    16c0:	fc 01       	movw	r30, r24
    16c2:	44 81       	ldd	r20, Z+4	; 0x04
    16c4:	55 81       	ldd	r21, Z+5	; 0x05
    16c6:	22 81       	ldd	r18, Z+2	; 0x02
    16c8:	33 81       	ldd	r19, Z+3	; 0x03
    16ca:	24 0f       	add	r18, r20
    16cc:	35 1f       	adc	r19, r21
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	b9 01       	movw	r22, r18
    16d4:	68 1b       	sub	r22, r24
    16d6:	79 0b       	sbc	r23, r25
    16d8:	cb 01       	movw	r24, r22
    16da:	64 17       	cp	r22, r20
    16dc:	75 07       	cpc	r23, r21
    16de:	10 f0       	brcs	.+4      	; 0x16e4 <prvBytesInBuffer+0x24>
    16e0:	84 1b       	sub	r24, r20
    16e2:	95 0b       	sbc	r25, r21
    16e4:	08 95       	ret

000016e6 <prvWriteBytesToBuffer>:
    16e6:	af 92       	push	r10
    16e8:	bf 92       	push	r11
    16ea:	cf 92       	push	r12
    16ec:	df 92       	push	r13
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	6c 01       	movw	r12, r24
    16fc:	5b 01       	movw	r10, r22
    16fe:	7a 01       	movw	r14, r20
    1700:	fc 01       	movw	r30, r24
    1702:	c2 81       	ldd	r28, Z+2	; 0x02
    1704:	d3 81       	ldd	r29, Z+3	; 0x03
    1706:	04 81       	ldd	r16, Z+4	; 0x04
    1708:	15 81       	ldd	r17, Z+5	; 0x05
    170a:	0c 1b       	sub	r16, r28
    170c:	1d 0b       	sbc	r17, r29
    170e:	40 17       	cp	r20, r16
    1710:	51 07       	cpc	r21, r17
    1712:	08 f4       	brcc	.+2      	; 0x1716 <prvWriteBytesToBuffer+0x30>
    1714:	8a 01       	movw	r16, r20
    1716:	f6 01       	movw	r30, r12
    1718:	84 85       	ldd	r24, Z+12	; 0x0c
    171a:	95 85       	ldd	r25, Z+13	; 0x0d
    171c:	a8 01       	movw	r20, r16
    171e:	b5 01       	movw	r22, r10
    1720:	8c 0f       	add	r24, r28
    1722:	9d 1f       	adc	r25, r29
    1724:	0e 94 86 28 	call	0x510c	; 0x510c <memcpy>
    1728:	0e 15       	cp	r16, r14
    172a:	1f 05       	cpc	r17, r15
    172c:	58 f4       	brcc	.+22     	; 0x1744 <prvWriteBytesToBuffer+0x5e>
    172e:	a7 01       	movw	r20, r14
    1730:	40 1b       	sub	r20, r16
    1732:	51 0b       	sbc	r21, r17
    1734:	b5 01       	movw	r22, r10
    1736:	60 0f       	add	r22, r16
    1738:	71 1f       	adc	r23, r17
    173a:	f6 01       	movw	r30, r12
    173c:	84 85       	ldd	r24, Z+12	; 0x0c
    173e:	95 85       	ldd	r25, Z+13	; 0x0d
    1740:	0e 94 86 28 	call	0x510c	; 0x510c <memcpy>
    1744:	ce 01       	movw	r24, r28
    1746:	8e 0d       	add	r24, r14
    1748:	9f 1d       	adc	r25, r15
    174a:	f6 01       	movw	r30, r12
    174c:	24 81       	ldd	r18, Z+4	; 0x04
    174e:	35 81       	ldd	r19, Z+5	; 0x05
    1750:	82 17       	cp	r24, r18
    1752:	93 07       	cpc	r25, r19
    1754:	10 f0       	brcs	.+4      	; 0x175a <prvWriteBytesToBuffer+0x74>
    1756:	82 1b       	sub	r24, r18
    1758:	93 0b       	sbc	r25, r19
    175a:	f6 01       	movw	r30, r12
    175c:	93 83       	std	Z+3, r25	; 0x03
    175e:	82 83       	std	Z+2, r24	; 0x02
    1760:	c7 01       	movw	r24, r14
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	08 95       	ret

00001778 <prvWriteMessageToBuffer>:
    1778:	cf 92       	push	r12
    177a:	df 92       	push	r13
    177c:	ef 92       	push	r14
    177e:	ff 92       	push	r15
    1780:	0f 93       	push	r16
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	1f 92       	push	r1
    178a:	1f 92       	push	r1
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	5a 83       	std	Y+2, r21	; 0x02
    1792:	49 83       	std	Y+1, r20	; 0x01
    1794:	21 15       	cp	r18, r1
    1796:	31 05       	cpc	r19, r1
    1798:	c9 f0       	breq	.+50     	; 0x17cc <prvWriteMessageToBuffer+0x54>
    179a:	6b 01       	movw	r12, r22
    179c:	7c 01       	movw	r14, r24
    179e:	fc 01       	movw	r30, r24
    17a0:	86 85       	ldd	r24, Z+14	; 0x0e
    17a2:	80 fd       	sbrc	r24, 0
    17a4:	08 c0       	rjmp	.+16     	; 0x17b6 <prvWriteMessageToBuffer+0x3e>
    17a6:	ca 01       	movw	r24, r20
    17a8:	24 17       	cp	r18, r20
    17aa:	35 07       	cpc	r19, r21
    17ac:	08 f4       	brcc	.+2      	; 0x17b0 <prvWriteMessageToBuffer+0x38>
    17ae:	c9 01       	movw	r24, r18
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	11 c0       	rjmp	.+34     	; 0x17d8 <prvWriteMessageToBuffer+0x60>
    17b6:	20 17       	cp	r18, r16
    17b8:	31 07       	cpc	r19, r17
    17ba:	58 f0       	brcs	.+22     	; 0x17d2 <prvWriteMessageToBuffer+0x5a>
    17bc:	42 e0       	ldi	r20, 0x02	; 2
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	be 01       	movw	r22, r28
    17c2:	6f 5f       	subi	r22, 0xFF	; 255
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	c7 01       	movw	r24, r14
    17c8:	8e df       	rcall	.-228    	; 0x16e6 <prvWriteBytesToBuffer>
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <prvWriteMessageToBuffer+0x60>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	08 c0       	rjmp	.+16     	; 0x17e2 <prvWriteMessageToBuffer+0x6a>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <prvWriteMessageToBuffer+0x6a>
    17d8:	49 81       	ldd	r20, Y+1	; 0x01
    17da:	5a 81       	ldd	r21, Y+2	; 0x02
    17dc:	b6 01       	movw	r22, r12
    17de:	c7 01       	movw	r24, r14
    17e0:	82 df       	rcall	.-252    	; 0x16e6 <prvWriteBytesToBuffer>
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	cf 90       	pop	r12
    17f6:	08 95       	ret

000017f8 <prvReadBytesFromBuffer>:
    17f8:	af 92       	push	r10
    17fa:	bf 92       	push	r11
    17fc:	cf 92       	push	r12
    17fe:	df 92       	push	r13
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	7c 01       	movw	r14, r24
    180e:	5b 01       	movw	r10, r22
    1810:	e9 01       	movw	r28, r18
    1812:	42 17       	cp	r20, r18
    1814:	53 07       	cpc	r21, r19
    1816:	08 f4       	brcc	.+2      	; 0x181a <prvReadBytesFromBuffer+0x22>
    1818:	ea 01       	movw	r28, r20
    181a:	20 97       	sbiw	r28, 0x00	; 0
    181c:	79 f1       	breq	.+94     	; 0x187c <prvReadBytesFromBuffer+0x84>
    181e:	f7 01       	movw	r30, r14
    1820:	00 81       	ld	r16, Z
    1822:	11 81       	ldd	r17, Z+1	; 0x01
    1824:	c4 80       	ldd	r12, Z+4	; 0x04
    1826:	d5 80       	ldd	r13, Z+5	; 0x05
    1828:	c0 1a       	sub	r12, r16
    182a:	d1 0a       	sbc	r13, r17
    182c:	cc 15       	cp	r28, r12
    182e:	dd 05       	cpc	r29, r13
    1830:	08 f4       	brcc	.+2      	; 0x1834 <prvReadBytesFromBuffer+0x3c>
    1832:	6e 01       	movw	r12, r28
    1834:	f7 01       	movw	r30, r14
    1836:	64 85       	ldd	r22, Z+12	; 0x0c
    1838:	75 85       	ldd	r23, Z+13	; 0x0d
    183a:	60 0f       	add	r22, r16
    183c:	71 1f       	adc	r23, r17
    183e:	a6 01       	movw	r20, r12
    1840:	c5 01       	movw	r24, r10
    1842:	0e 94 86 28 	call	0x510c	; 0x510c <memcpy>
    1846:	cc 16       	cp	r12, r28
    1848:	dd 06       	cpc	r13, r29
    184a:	58 f4       	brcc	.+22     	; 0x1862 <prvReadBytesFromBuffer+0x6a>
    184c:	ae 01       	movw	r20, r28
    184e:	4c 19       	sub	r20, r12
    1850:	5d 09       	sbc	r21, r13
    1852:	f7 01       	movw	r30, r14
    1854:	64 85       	ldd	r22, Z+12	; 0x0c
    1856:	75 85       	ldd	r23, Z+13	; 0x0d
    1858:	c5 01       	movw	r24, r10
    185a:	8c 0d       	add	r24, r12
    185c:	9d 1d       	adc	r25, r13
    185e:	0e 94 86 28 	call	0x510c	; 0x510c <memcpy>
    1862:	0c 0f       	add	r16, r28
    1864:	1d 1f       	adc	r17, r29
    1866:	f7 01       	movw	r30, r14
    1868:	84 81       	ldd	r24, Z+4	; 0x04
    186a:	95 81       	ldd	r25, Z+5	; 0x05
    186c:	08 17       	cp	r16, r24
    186e:	19 07       	cpc	r17, r25
    1870:	10 f0       	brcs	.+4      	; 0x1876 <prvReadBytesFromBuffer+0x7e>
    1872:	08 1b       	sub	r16, r24
    1874:	19 0b       	sbc	r17, r25
    1876:	f7 01       	movw	r30, r14
    1878:	11 83       	std	Z+1, r17	; 0x01
    187a:	00 83       	st	Z, r16
    187c:	ce 01       	movw	r24, r28
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	ff 90       	pop	r15
    1888:	ef 90       	pop	r14
    188a:	df 90       	pop	r13
    188c:	cf 90       	pop	r12
    188e:	bf 90       	pop	r11
    1890:	af 90       	pop	r10
    1892:	08 95       	ret

00001894 <xStreamBufferGenericCreate>:
    1894:	ef 92       	push	r14
    1896:	ff 92       	push	r15
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	eb 01       	movw	r28, r22
    18a0:	11 e0       	ldi	r17, 0x01	; 1
    18a2:	41 30       	cpi	r20, 0x01	; 1
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <xStreamBufferGenericCreate+0x14>
    18a6:	10 e0       	ldi	r17, 0x00	; 0
    18a8:	20 97       	sbiw	r28, 0x00	; 0
    18aa:	11 f4       	brne	.+4      	; 0x18b0 <xStreamBufferGenericCreate+0x1c>
    18ac:	c1 e0       	ldi	r28, 0x01	; 1
    18ae:	d0 e0       	ldi	r29, 0x00	; 0
    18b0:	7c 01       	movw	r14, r24
    18b2:	2f ef       	ldi	r18, 0xFF	; 255
    18b4:	e2 1a       	sub	r14, r18
    18b6:	f2 0a       	sbc	r15, r18
    18b8:	41 96       	adiw	r24, 0x11	; 17
    18ba:	22 d9       	rcall	.-3516   	; 0xb00 <pvPortMalloc>
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	81 f0       	breq	.+32     	; 0x18e0 <xStreamBufferGenericCreate+0x4c>
    18c0:	20 e1       	ldi	r18, 0x10	; 16
    18c2:	fc 01       	movw	r30, r24
    18c4:	11 92       	st	Z+, r1
    18c6:	2a 95       	dec	r18
    18c8:	e9 f7       	brne	.-6      	; 0x18c4 <xStreamBufferGenericCreate+0x30>
    18ca:	9c 01       	movw	r18, r24
    18cc:	20 5f       	subi	r18, 0xF0	; 240
    18ce:	3f 4f       	sbci	r19, 0xFF	; 255
    18d0:	fc 01       	movw	r30, r24
    18d2:	35 87       	std	Z+13, r19	; 0x0d
    18d4:	24 87       	std	Z+12, r18	; 0x0c
    18d6:	f5 82       	std	Z+5, r15	; 0x05
    18d8:	e4 82       	std	Z+4, r14	; 0x04
    18da:	d7 83       	std	Z+7, r29	; 0x07
    18dc:	c6 83       	std	Z+6, r28	; 0x06
    18de:	16 87       	std	Z+14, r17	; 0x0e
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	08 95       	ret

000018ec <xStreamBufferReset>:
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	fc 01       	movw	r30, r24
    18f2:	27 85       	ldd	r18, Z+15	; 0x0f
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	0f 92       	push	r0
    18fa:	80 85       	ldd	r24, Z+8	; 0x08
    18fc:	91 85       	ldd	r25, Z+9	; 0x09
    18fe:	89 2b       	or	r24, r25
    1900:	d1 f4       	brne	.+52     	; 0x1936 <xStreamBufferReset+0x4a>
    1902:	82 85       	ldd	r24, Z+10	; 0x0a
    1904:	93 85       	ldd	r25, Z+11	; 0x0b
    1906:	89 2b       	or	r24, r25
    1908:	c1 f4       	brne	.+48     	; 0x193a <xStreamBufferReset+0x4e>
    190a:	86 85       	ldd	r24, Z+14	; 0x0e
    190c:	46 81       	ldd	r20, Z+6	; 0x06
    190e:	57 81       	ldd	r21, Z+7	; 0x07
    1910:	64 81       	ldd	r22, Z+4	; 0x04
    1912:	75 81       	ldd	r23, Z+5	; 0x05
    1914:	a4 85       	ldd	r26, Z+12	; 0x0c
    1916:	b5 85       	ldd	r27, Z+13	; 0x0d
    1918:	90 e1       	ldi	r25, 0x10	; 16
    191a:	ef 01       	movw	r28, r30
    191c:	19 92       	st	Y+, r1
    191e:	9a 95       	dec	r25
    1920:	e9 f7       	brne	.-6      	; 0x191c <xStreamBufferReset+0x30>
    1922:	b5 87       	std	Z+13, r27	; 0x0d
    1924:	a4 87       	std	Z+12, r26	; 0x0c
    1926:	75 83       	std	Z+5, r23	; 0x05
    1928:	64 83       	std	Z+4, r22	; 0x04
    192a:	57 83       	std	Z+7, r21	; 0x07
    192c:	46 83       	std	Z+6, r20	; 0x06
    192e:	86 87       	std	Z+14, r24	; 0x0e
    1930:	27 87       	std	Z+15, r18	; 0x0f
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	03 c0       	rjmp	.+6      	; 0x193c <xStreamBufferReset+0x50>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	01 c0       	rjmp	.+2      	; 0x193c <xStreamBufferReset+0x50>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	0f 90       	pop	r0
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <xStreamBufferSpacesAvailable>:
    1946:	fc 01       	movw	r30, r24
    1948:	24 81       	ldd	r18, Z+4	; 0x04
    194a:	35 81       	ldd	r19, Z+5	; 0x05
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	42 81       	ldd	r20, Z+2	; 0x02
    1952:	53 81       	ldd	r21, Z+3	; 0x03
    1954:	82 0f       	add	r24, r18
    1956:	93 1f       	adc	r25, r19
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	84 1b       	sub	r24, r20
    195c:	95 0b       	sbc	r25, r21
    195e:	82 17       	cp	r24, r18
    1960:	93 07       	cpc	r25, r19
    1962:	10 f0       	brcs	.+4      	; 0x1968 <xStreamBufferSpacesAvailable+0x22>
    1964:	82 1b       	sub	r24, r18
    1966:	93 0b       	sbc	r25, r19
    1968:	08 95       	ret

0000196a <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    196a:	af 92       	push	r10
    196c:	bf 92       	push	r11
    196e:	cf 92       	push	r12
    1970:	df 92       	push	r13
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	ec 01       	movw	r28, r24
    1980:	5b 01       	movw	r10, r22
    1982:	6a 01       	movw	r12, r20
    1984:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1986:	8e 85       	ldd	r24, Y+14	; 0x0e
    1988:	80 ff       	sbrs	r24, 0
    198a:	04 c0       	rjmp	.+8      	; 0x1994 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    198c:	8a 01       	movw	r16, r20
    198e:	0e 5f       	subi	r16, 0xFE	; 254
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1994:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1996:	ce 01       	movw	r24, r28
    1998:	d6 df       	rcall	.-84     	; 0x1946 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    199a:	9c 01       	movw	r18, r24
    199c:	a6 01       	movw	r20, r12
    199e:	b5 01       	movw	r22, r10
    19a0:	ce 01       	movw	r24, r28
    19a2:	ea de       	rcall	.-556    	; 0x1778 <prvWriteMessageToBuffer>
    19a4:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    19a6:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    19a8:	b1 f0       	breq	.+44     	; 0x19d6 <xStreamBufferSendFromISR+0x6c>
    19aa:	ce 01       	movw	r24, r28
    19ac:	89 de       	rcall	.-750    	; 0x16c0 <prvBytesInBuffer>
    19ae:	2e 81       	ldd	r18, Y+6	; 0x06
    19b0:	3f 81       	ldd	r19, Y+7	; 0x07
    19b2:	82 17       	cp	r24, r18
    19b4:	93 07       	cpc	r25, r19
    19b6:	78 f0       	brcs	.+30     	; 0x19d6 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    19b8:	88 85       	ldd	r24, Y+8	; 0x08
    19ba:	99 85       	ldd	r25, Y+9	; 0x09
    19bc:	89 2b       	or	r24, r25
    19be:	59 f0       	breq	.+22     	; 0x19d6 <xStreamBufferSendFromISR+0x6c>
    19c0:	88 85       	ldd	r24, Y+8	; 0x08
    19c2:	99 85       	ldd	r25, Y+9	; 0x09
    19c4:	00 e0       	ldi	r16, 0x00	; 0
    19c6:	10 e0       	ldi	r17, 0x00	; 0
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	50 e0       	ldi	r21, 0x00	; 0
    19ce:	ba 01       	movw	r22, r20
    19d0:	ab d7       	rcall	.+3926   	; 0x2928 <xTaskGenericNotifyFromISR>
    19d2:	19 86       	std	Y+9, r1	; 0x09
    19d4:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    19d6:	c6 01       	movw	r24, r12
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	df 90       	pop	r13
    19e6:	cf 90       	pop	r12
    19e8:	bf 90       	pop	r11
    19ea:	af 90       	pop	r10
    19ec:	08 95       	ret

000019ee <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    19ee:	4f 92       	push	r4
    19f0:	5f 92       	push	r5
    19f2:	6f 92       	push	r6
    19f4:	7f 92       	push	r7
    19f6:	8f 92       	push	r8
    19f8:	9f 92       	push	r9
    19fa:	af 92       	push	r10
    19fc:	bf 92       	push	r11
    19fe:	cf 92       	push	r12
    1a00:	df 92       	push	r13
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	1f 92       	push	r1
    1a10:	1f 92       	push	r1
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	5c 01       	movw	r10, r24
    1a18:	2b 01       	movw	r4, r22
    1a1a:	3a 01       	movw	r6, r20
    1a1c:	68 01       	movw	r12, r16
    1a1e:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1a20:	fc 01       	movw	r30, r24
    1a22:	86 85       	ldd	r24, Z+14	; 0x0e
    1a24:	80 fd       	sbrc	r24, 0
    1a26:	03 c0       	rjmp	.+6      	; 0x1a2e <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1a28:	81 2c       	mov	r8, r1
    1a2a:	91 2c       	mov	r9, r1
    1a2c:	04 c0       	rjmp	.+8      	; 0x1a36 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1a2e:	68 94       	set
    1a30:	88 24       	eor	r8, r8
    1a32:	81 f8       	bld	r8, 1
    1a34:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1a36:	c1 14       	cp	r12, r1
    1a38:	d1 04       	cpc	r13, r1
    1a3a:	e1 04       	cpc	r14, r1
    1a3c:	f1 04       	cpc	r15, r1
    1a3e:	29 f1       	breq	.+74     	; 0x1a8a <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a46:	c5 01       	movw	r24, r10
    1a48:	3b de       	rcall	.-906    	; 0x16c0 <prvBytesInBuffer>
    1a4a:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1a4c:	88 16       	cp	r8, r24
    1a4e:	99 06       	cpc	r9, r25
    1a50:	38 f0       	brcs	.+14     	; 0x1a60 <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1a56:	f1 d7       	rcall	.+4066   	; 0x2a3a <xTaskNotifyStateClear>
    1a58:	46 d5       	rcall	.+2700   	; 0x24e6 <xTaskGetCurrentTaskHandle>
    1a5a:	f5 01       	movw	r30, r10
    1a5c:	91 87       	std	Z+9, r25	; 0x09
    1a5e:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1a64:	80 16       	cp	r8, r16
    1a66:	91 06       	cpc	r9, r17
    1a68:	b0 f0       	brcs	.+44     	; 0x1a96 <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
    1a6c:	10 e0       	ldi	r17, 0x00	; 0
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	a9 01       	movw	r20, r18
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	70 e0       	ldi	r23, 0x00	; 0
    1a78:	cb 01       	movw	r24, r22
    1a7a:	54 d6       	rcall	.+3240   	; 0x2724 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1a7c:	f5 01       	movw	r30, r10
    1a7e:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a80:	10 86       	std	Z+8, r1	; 0x08
    1a82:	c5 01       	movw	r24, r10
    1a84:	1d de       	rcall	.-966    	; 0x16c0 <prvBytesInBuffer>
    1a86:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <xStreamBufferReceive+0xa2>
    1a8a:	c5 01       	movw	r24, r10
    1a8c:	19 de       	rcall	.-974    	; 0x16c0 <prvBytesInBuffer>
    1a8e:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1a90:	80 16       	cp	r8, r16
    1a92:	91 06       	cpc	r9, r17
    1a94:	b8 f5       	brcc	.+110    	; 0x1b04 <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1a96:	81 14       	cp	r8, r1
    1a98:	91 04       	cpc	r9, r1
    1a9a:	c1 f0       	breq	.+48     	; 0x1acc <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1a9c:	f5 01       	movw	r30, r10
    1a9e:	e0 80       	ld	r14, Z
    1aa0:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1aa2:	98 01       	movw	r18, r16
    1aa4:	a4 01       	movw	r20, r8
    1aa6:	be 01       	movw	r22, r28
    1aa8:	6f 5f       	subi	r22, 0xFF	; 255
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	c5 01       	movw	r24, r10
    1aae:	a4 de       	rcall	.-696    	; 0x17f8 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1ab4:	08 19       	sub	r16, r8
    1ab6:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1ab8:	68 16       	cp	r6, r24
    1aba:	79 06       	cpc	r7, r25
    1abc:	30 f4       	brcc	.+12     	; 0x1aca <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1abe:	f5 01       	movw	r30, r10
    1ac0:	f1 82       	std	Z+1, r15	; 0x01
    1ac2:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1ac4:	61 2c       	mov	r6, r1
    1ac6:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1aca:	3c 01       	movw	r6, r24
    1acc:	98 01       	movw	r18, r16
    1ace:	a3 01       	movw	r20, r6
    1ad0:	b2 01       	movw	r22, r4
    1ad2:	c5 01       	movw	r24, r10
    1ad4:	91 de       	rcall	.-734    	; 0x17f8 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1ad6:	7c 01       	movw	r14, r24
    1ad8:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1ada:	b1 f0       	breq	.+44     	; 0x1b08 <xStreamBufferReceive+0x11a>
    1adc:	24 d2       	rcall	.+1096   	; 0x1f26 <vTaskSuspendAll>
    1ade:	f5 01       	movw	r30, r10
    1ae0:	82 85       	ldd	r24, Z+10	; 0x0a
    1ae2:	93 85       	ldd	r25, Z+11	; 0x0b
    1ae4:	89 2b       	or	r24, r25
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <xStreamBufferReceive+0x112>
    1ae8:	82 85       	ldd	r24, Z+10	; 0x0a
    1aea:	93 85       	ldd	r25, Z+11	; 0x0b
    1aec:	00 e0       	ldi	r16, 0x00	; 0
    1aee:	10 e0       	ldi	r17, 0x00	; 0
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	ba 01       	movw	r22, r20
    1af8:	9f d6       	rcall	.+3390   	; 0x2838 <xTaskGenericNotify>
    1afa:	f5 01       	movw	r30, r10
    1afc:	13 86       	std	Z+11, r1	; 0x0b
    1afe:	12 86       	std	Z+10, r1	; 0x0a
    1b00:	fb d2       	rcall	.+1526   	; 0x20f8 <xTaskResumeAll>
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1b04:	e1 2c       	mov	r14, r1
    1b06:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1b08:	c7 01       	movw	r24, r14
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	9f 90       	pop	r9
    1b24:	8f 90       	pop	r8
    1b26:	7f 90       	pop	r7
    1b28:	6f 90       	pop	r6
    1b2a:	5f 90       	pop	r5
    1b2c:	4f 90       	pop	r4
    1b2e:	08 95       	ret

00001b30 <prvResetNextTaskUnblockTime>:
    1b30:	e0 91 ea 07 	lds	r30, 0x07EA	; 0x8007ea <pxDelayedTaskList>
    1b34:	f0 91 eb 07 	lds	r31, 0x07EB	; 0x8007eb <pxDelayedTaskList+0x1>
    1b38:	80 81       	ld	r24, Z
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	0c c0       	rjmp	.+24     	; 0x1b56 <prvResetNextTaskUnblockTime+0x26>
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	9f ef       	ldi	r25, 0xFF	; 255
    1b42:	dc 01       	movw	r26, r24
    1b44:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xNextTaskUnblockTime>
    1b48:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1b4c:	a0 93 b9 07 	sts	0x07B9, r26	; 0x8007b9 <xNextTaskUnblockTime+0x2>
    1b50:	b0 93 ba 07 	sts	0x07BA, r27	; 0x8007ba <xNextTaskUnblockTime+0x3>
    1b54:	08 95       	ret
    1b56:	e0 91 ea 07 	lds	r30, 0x07EA	; 0x8007ea <pxDelayedTaskList>
    1b5a:	f0 91 eb 07 	lds	r31, 0x07EB	; 0x8007eb <pxDelayedTaskList+0x1>
    1b5e:	07 80       	ldd	r0, Z+7	; 0x07
    1b60:	f0 85       	ldd	r31, Z+8	; 0x08
    1b62:	e0 2d       	mov	r30, r0
    1b64:	00 84       	ldd	r0, Z+8	; 0x08
    1b66:	f1 85       	ldd	r31, Z+9	; 0x09
    1b68:	e0 2d       	mov	r30, r0
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	a4 81       	ldd	r26, Z+4	; 0x04
    1b70:	b5 81       	ldd	r27, Z+5	; 0x05
    1b72:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xNextTaskUnblockTime>
    1b76:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1b7a:	a0 93 b9 07 	sts	0x07B9, r26	; 0x8007b9 <xNextTaskUnblockTime+0x2>
    1b7e:	b0 93 ba 07 	sts	0x07BA, r27	; 0x8007ba <xNextTaskUnblockTime+0x3>
    1b82:	08 95       	ret

00001b84 <prvAddCurrentTaskToDelayedList>:
    1b84:	8f 92       	push	r8
    1b86:	9f 92       	push	r9
    1b88:	af 92       	push	r10
    1b8a:	bf 92       	push	r11
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	cf 93       	push	r28
    1b96:	6b 01       	movw	r12, r22
    1b98:	7c 01       	movw	r14, r24
    1b9a:	c4 2f       	mov	r28, r20
    1b9c:	80 90 c1 07 	lds	r8, 0x07C1	; 0x8007c1 <xTickCount>
    1ba0:	90 90 c2 07 	lds	r9, 0x07C2	; 0x8007c2 <xTickCount+0x1>
    1ba4:	a0 90 c3 07 	lds	r10, 0x07C3	; 0x8007c3 <xTickCount+0x2>
    1ba8:	b0 90 c4 07 	lds	r11, 0x07C4	; 0x8007c4 <xTickCount+0x3>
    1bac:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <pxCurrentTCB>
    1bb0:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    1bb4:	02 96       	adiw	r24, 0x02	; 2
    1bb6:	39 d8       	rcall	.-3982   	; 0xc2a <uxListRemove>
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	c8 16       	cp	r12, r24
    1bbc:	d8 06       	cpc	r13, r24
    1bbe:	e8 06       	cpc	r14, r24
    1bc0:	f8 06       	cpc	r15, r24
    1bc2:	69 f4       	brne	.+26     	; 0x1bde <prvAddCurrentTaskToDelayedList+0x5a>
    1bc4:	cc 23       	and	r28, r28
    1bc6:	59 f0       	breq	.+22     	; 0x1bde <prvAddCurrentTaskToDelayedList+0x5a>
    1bc8:	60 91 2e 08 	lds	r22, 0x082E	; 0x80082e <pxCurrentTCB>
    1bcc:	70 91 2f 08 	lds	r23, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    1bd0:	6e 5f       	subi	r22, 0xFE	; 254
    1bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd4:	86 ec       	ldi	r24, 0xC6	; 198
    1bd6:	97 e0       	ldi	r25, 0x07	; 7
    1bd8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    1bdc:	3f c0       	rjmp	.+126    	; 0x1c5c <prvAddCurrentTaskToDelayedList+0xd8>
    1bde:	c8 0c       	add	r12, r8
    1be0:	d9 1c       	adc	r13, r9
    1be2:	ea 1c       	adc	r14, r10
    1be4:	fb 1c       	adc	r15, r11
    1be6:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    1bea:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    1bee:	c2 82       	std	Z+2, r12	; 0x02
    1bf0:	d3 82       	std	Z+3, r13	; 0x03
    1bf2:	e4 82       	std	Z+4, r14	; 0x04
    1bf4:	f5 82       	std	Z+5, r15	; 0x05
    1bf6:	c8 14       	cp	r12, r8
    1bf8:	d9 04       	cpc	r13, r9
    1bfa:	ea 04       	cpc	r14, r10
    1bfc:	fb 04       	cpc	r15, r11
    1bfe:	68 f4       	brcc	.+26     	; 0x1c1a <prvAddCurrentTaskToDelayedList+0x96>
    1c00:	60 91 2e 08 	lds	r22, 0x082E	; 0x80082e <pxCurrentTCB>
    1c04:	70 91 2f 08 	lds	r23, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    1c08:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <pxOverflowDelayedTaskList>
    1c0c:	90 91 e9 07 	lds	r25, 0x07E9	; 0x8007e9 <pxOverflowDelayedTaskList+0x1>
    1c10:	6e 5f       	subi	r22, 0xFE	; 254
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vListInsert>
    1c18:	21 c0       	rjmp	.+66     	; 0x1c5c <prvAddCurrentTaskToDelayedList+0xd8>
    1c1a:	60 91 2e 08 	lds	r22, 0x082E	; 0x80082e <pxCurrentTCB>
    1c1e:	70 91 2f 08 	lds	r23, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    1c22:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <pxDelayedTaskList>
    1c26:	90 91 eb 07 	lds	r25, 0x07EB	; 0x8007eb <pxDelayedTaskList+0x1>
    1c2a:	6e 5f       	subi	r22, 0xFE	; 254
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vListInsert>
    1c32:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xNextTaskUnblockTime>
    1c36:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1c3a:	a0 91 b9 07 	lds	r26, 0x07B9	; 0x8007b9 <xNextTaskUnblockTime+0x2>
    1c3e:	b0 91 ba 07 	lds	r27, 0x07BA	; 0x8007ba <xNextTaskUnblockTime+0x3>
    1c42:	c8 16       	cp	r12, r24
    1c44:	d9 06       	cpc	r13, r25
    1c46:	ea 06       	cpc	r14, r26
    1c48:	fb 06       	cpc	r15, r27
    1c4a:	40 f4       	brcc	.+16     	; 0x1c5c <prvAddCurrentTaskToDelayedList+0xd8>
    1c4c:	c0 92 b7 07 	sts	0x07B7, r12	; 0x8007b7 <xNextTaskUnblockTime>
    1c50:	d0 92 b8 07 	sts	0x07B8, r13	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1c54:	e0 92 b9 07 	sts	0x07B9, r14	; 0x8007b9 <xNextTaskUnblockTime+0x2>
    1c58:	f0 92 ba 07 	sts	0x07BA, r15	; 0x8007ba <xNextTaskUnblockTime+0x3>
    1c5c:	cf 91       	pop	r28
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	bf 90       	pop	r11
    1c68:	af 90       	pop	r10
    1c6a:	9f 90       	pop	r9
    1c6c:	8f 90       	pop	r8
    1c6e:	08 95       	ret

00001c70 <xTaskCreate>:
    1c70:	4f 92       	push	r4
    1c72:	5f 92       	push	r5
    1c74:	6f 92       	push	r6
    1c76:	7f 92       	push	r7
    1c78:	8f 92       	push	r8
    1c7a:	9f 92       	push	r9
    1c7c:	af 92       	push	r10
    1c7e:	bf 92       	push	r11
    1c80:	cf 92       	push	r12
    1c82:	df 92       	push	r13
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	0f 93       	push	r16
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	4c 01       	movw	r8, r24
    1c90:	6b 01       	movw	r12, r22
    1c92:	5a 01       	movw	r10, r20
    1c94:	29 01       	movw	r4, r18
    1c96:	ca 01       	movw	r24, r20
    1c98:	0e 94 80 05 	call	0xb00	; 0xb00 <pvPortMalloc>
    1c9c:	3c 01       	movw	r6, r24
    1c9e:	89 2b       	or	r24, r25
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <xTaskCreate+0x34>
    1ca2:	f4 c0       	rjmp	.+488    	; 0x1e8c <xTaskCreate+0x21c>
    1ca4:	80 e3       	ldi	r24, 0x30	; 48
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 80 05 	call	0xb00	; 0xb00 <pvPortMalloc>
    1cac:	ec 01       	movw	r28, r24
    1cae:	89 2b       	or	r24, r25
    1cb0:	99 f0       	breq	.+38     	; 0x1cd8 <xTaskCreate+0x68>
    1cb2:	7c 8e       	std	Y+28, r7	; 0x1c
    1cb4:	6b 8e       	std	Y+27, r6	; 0x1b
    1cb6:	a5 01       	movw	r20, r10
    1cb8:	65 ea       	ldi	r22, 0xA5	; 165
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	c3 01       	movw	r24, r6
    1cbe:	0e 94 8f 28 	call	0x511e	; 0x511e <memset>
    1cc2:	21 e0       	ldi	r18, 0x01	; 1
    1cc4:	a2 1a       	sub	r10, r18
    1cc6:	b1 08       	sbc	r11, r1
    1cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ccc:	a8 0e       	add	r10, r24
    1cce:	b9 1e       	adc	r11, r25
    1cd0:	c1 14       	cp	r12, r1
    1cd2:	d1 04       	cpc	r13, r1
    1cd4:	29 f4       	brne	.+10     	; 0x1ce0 <xTaskCreate+0x70>
    1cd6:	20 c0       	rjmp	.+64     	; 0x1d18 <xTaskCreate+0xa8>
    1cd8:	c3 01       	movw	r24, r6
    1cda:	0e 94 93 05 	call	0xb26	; 0xb26 <vPortFree>
    1cde:	d6 c0       	rjmp	.+428    	; 0x1e8c <xTaskCreate+0x21c>
    1ce0:	d6 01       	movw	r26, r12
    1ce2:	8c 91       	ld	r24, X
    1ce4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ce6:	8c 91       	ld	r24, X
    1ce8:	88 23       	and	r24, r24
    1cea:	a1 f0       	breq	.+40     	; 0x1d14 <xTaskCreate+0xa4>
    1cec:	ae 01       	movw	r20, r28
    1cee:	42 5e       	subi	r20, 0xE2	; 226
    1cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf2:	f6 01       	movw	r30, r12
    1cf4:	31 96       	adiw	r30, 0x01	; 1
    1cf6:	b8 e0       	ldi	r27, 0x08	; 8
    1cf8:	cb 0e       	add	r12, r27
    1cfa:	d1 1c       	adc	r13, r1
    1cfc:	cf 01       	movw	r24, r30
    1cfe:	21 91       	ld	r18, Z+
    1d00:	da 01       	movw	r26, r20
    1d02:	2d 93       	st	X+, r18
    1d04:	ad 01       	movw	r20, r26
    1d06:	dc 01       	movw	r26, r24
    1d08:	8c 91       	ld	r24, X
    1d0a:	88 23       	and	r24, r24
    1d0c:	19 f0       	breq	.+6      	; 0x1d14 <xTaskCreate+0xa4>
    1d0e:	ec 15       	cp	r30, r12
    1d10:	fd 05       	cpc	r31, r13
    1d12:	a1 f7       	brne	.-24     	; 0x1cfc <xTaskCreate+0x8c>
    1d14:	1c a2       	std	Y+36, r1	; 0x24
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <xTaskCreate+0xaa>
    1d18:	1d 8e       	std	Y+29, r1	; 0x1d
    1d1a:	04 30       	cpi	r16, 0x04	; 4
    1d1c:	08 f0       	brcs	.+2      	; 0x1d20 <xTaskCreate+0xb0>
    1d1e:	03 e0       	ldi	r16, 0x03	; 3
    1d20:	0a 8f       	std	Y+26, r16	; 0x1a
    1d22:	0f a3       	std	Y+39, r16	; 0x27
    1d24:	18 a6       	std	Y+40, r1	; 0x28
    1d26:	6e 01       	movw	r12, r28
    1d28:	b2 e0       	ldi	r27, 0x02	; 2
    1d2a:	cb 0e       	add	r12, r27
    1d2c:	d1 1c       	adc	r13, r1
    1d2e:	c6 01       	movw	r24, r12
    1d30:	0e 94 b3 05 	call	0xb66	; 0xb66 <vListInitialiseItem>
    1d34:	ce 01       	movw	r24, r28
    1d36:	0e 96       	adiw	r24, 0x0e	; 14
    1d38:	0e 94 b3 05 	call	0xb66	; 0xb66 <vListInitialiseItem>
    1d3c:	db 87       	std	Y+11, r29	; 0x0b
    1d3e:	ca 87       	std	Y+10, r28	; 0x0a
    1d40:	84 e0       	ldi	r24, 0x04	; 4
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a0 e0       	ldi	r26, 0x00	; 0
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	80 1b       	sub	r24, r16
    1d4a:	91 09       	sbc	r25, r1
    1d4c:	a1 09       	sbc	r26, r1
    1d4e:	b1 09       	sbc	r27, r1
    1d50:	8e 87       	std	Y+14, r24	; 0x0e
    1d52:	9f 87       	std	Y+15, r25	; 0x0f
    1d54:	a8 8b       	std	Y+16, r26	; 0x10
    1d56:	b9 8b       	std	Y+17, r27	; 0x11
    1d58:	df 8b       	std	Y+23, r29	; 0x17
    1d5a:	ce 8b       	std	Y+22, r28	; 0x16
    1d5c:	1a a6       	std	Y+42, r1	; 0x2a
    1d5e:	19 a6       	std	Y+41, r1	; 0x29
    1d60:	1b a6       	std	Y+43, r1	; 0x2b
    1d62:	1c a6       	std	Y+44, r1	; 0x2c
    1d64:	1d a6       	std	Y+45, r1	; 0x2d
    1d66:	1e a6       	std	Y+46, r1	; 0x2e
    1d68:	1f a6       	std	Y+47, r1	; 0x2f
    1d6a:	a2 01       	movw	r20, r4
    1d6c:	b4 01       	movw	r22, r8
    1d6e:	c5 01       	movw	r24, r10
    1d70:	0e 94 3c 06 	call	0xc78	; 0xc78 <pxPortInitialiseStack>
    1d74:	99 83       	std	Y+1, r25	; 0x01
    1d76:	88 83       	st	Y, r24
    1d78:	e1 14       	cp	r14, r1
    1d7a:	f1 04       	cpc	r15, r1
    1d7c:	19 f0       	breq	.+6      	; 0x1d84 <xTaskCreate+0x114>
    1d7e:	f7 01       	movw	r30, r14
    1d80:	d1 83       	std	Z+1, r29	; 0x01
    1d82:	c0 83       	st	Z, r28
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	0f 92       	push	r0
    1d8a:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <uxCurrentNumberOfTasks>
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <uxCurrentNumberOfTasks>
    1d94:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <pxCurrentTCB>
    1d98:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    1d9c:	89 2b       	or	r24, r25
    1d9e:	d1 f5       	brne	.+116    	; 0x1e14 <xTaskCreate+0x1a4>
    1da0:	d0 93 2f 08 	sts	0x082F, r29	; 0x80082f <pxCurrentTCB+0x1>
    1da4:	c0 93 2e 08 	sts	0x082E, r28	; 0x80082e <pxCurrentTCB>
    1da8:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <uxCurrentNumberOfTasks>
    1dac:	81 30       	cpi	r24, 0x01	; 1
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <xTaskCreate+0x142>
    1db0:	41 c0       	rjmp	.+130    	; 0x1e34 <xTaskCreate+0x1c4>
    1db2:	82 e0       	ldi	r24, 0x02	; 2
    1db4:	98 e0       	ldi	r25, 0x08	; 8
    1db6:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    1dba:	8d e0       	ldi	r24, 0x0D	; 13
    1dbc:	98 e0       	ldi	r25, 0x08	; 8
    1dbe:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    1dc2:	88 e1       	ldi	r24, 0x18	; 24
    1dc4:	98 e0       	ldi	r25, 0x08	; 8
    1dc6:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    1dca:	83 e2       	ldi	r24, 0x23	; 35
    1dcc:	98 e0       	ldi	r25, 0x08	; 8
    1dce:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    1dd2:	87 ef       	ldi	r24, 0xF7	; 247
    1dd4:	97 e0       	ldi	r25, 0x07	; 7
    1dd6:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    1dda:	8c ee       	ldi	r24, 0xEC	; 236
    1ddc:	97 e0       	ldi	r25, 0x07	; 7
    1dde:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    1de2:	8d ed       	ldi	r24, 0xDD	; 221
    1de4:	97 e0       	ldi	r25, 0x07	; 7
    1de6:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    1dea:	82 ed       	ldi	r24, 0xD2	; 210
    1dec:	97 e0       	ldi	r25, 0x07	; 7
    1dee:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    1df2:	86 ec       	ldi	r24, 0xC6	; 198
    1df4:	97 e0       	ldi	r25, 0x07	; 7
    1df6:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    1dfa:	87 ef       	ldi	r24, 0xF7	; 247
    1dfc:	97 e0       	ldi	r25, 0x07	; 7
    1dfe:	90 93 eb 07 	sts	0x07EB, r25	; 0x8007eb <pxDelayedTaskList+0x1>
    1e02:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <pxDelayedTaskList>
    1e06:	8c ee       	ldi	r24, 0xEC	; 236
    1e08:	97 e0       	ldi	r25, 0x07	; 7
    1e0a:	90 93 e9 07 	sts	0x07E9, r25	; 0x8007e9 <pxOverflowDelayedTaskList+0x1>
    1e0e:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <pxOverflowDelayedTaskList>
    1e12:	10 c0       	rjmp	.+32     	; 0x1e34 <xTaskCreate+0x1c4>
    1e14:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <xSchedulerRunning>
    1e18:	81 11       	cpse	r24, r1
    1e1a:	0c c0       	rjmp	.+24     	; 0x1e34 <xTaskCreate+0x1c4>
    1e1c:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    1e20:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    1e24:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e28:	89 17       	cp	r24, r25
    1e2a:	20 f0       	brcs	.+8      	; 0x1e34 <xTaskCreate+0x1c4>
    1e2c:	d0 93 2f 08 	sts	0x082F, r29	; 0x80082f <pxCurrentTCB+0x1>
    1e30:	c0 93 2e 08 	sts	0x082E, r28	; 0x80082e <pxCurrentTCB>
    1e34:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxTaskNumber>
    1e38:	8f 5f       	subi	r24, 0xFF	; 255
    1e3a:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <uxTaskNumber>
    1e3e:	8d a3       	std	Y+37, r24	; 0x25
    1e40:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e42:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    1e46:	98 17       	cp	r25, r24
    1e48:	10 f4       	brcc	.+4      	; 0x1e4e <xTaskCreate+0x1de>
    1e4a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
    1e4e:	fb e0       	ldi	r31, 0x0B	; 11
    1e50:	8f 9f       	mul	r24, r31
    1e52:	c0 01       	movw	r24, r0
    1e54:	11 24       	eor	r1, r1
    1e56:	b6 01       	movw	r22, r12
    1e58:	8e 5f       	subi	r24, 0xFE	; 254
    1e5a:	97 4f       	sbci	r25, 0xF7	; 247
    1e5c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    1e60:	0f 90       	pop	r0
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <xSchedulerRunning>
    1e68:	88 23       	and	r24, r24
    1e6a:	61 f0       	breq	.+24     	; 0x1e84 <xTaskCreate+0x214>
    1e6c:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    1e70:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    1e74:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e78:	98 17       	cp	r25, r24
    1e7a:	30 f4       	brcc	.+12     	; 0x1e88 <xTaskCreate+0x218>
    1e7c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vPortYield>
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	05 c0       	rjmp	.+10     	; 0x1e8e <xTaskCreate+0x21e>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	03 c0       	rjmp	.+6      	; 0x1e8e <xTaskCreate+0x21e>
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <xTaskCreate+0x21e>
    1e8c:	8f ef       	ldi	r24, 0xFF	; 255
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	bf 90       	pop	r11
    1e9e:	af 90       	pop	r10
    1ea0:	9f 90       	pop	r9
    1ea2:	8f 90       	pop	r8
    1ea4:	7f 90       	pop	r7
    1ea6:	6f 90       	pop	r6
    1ea8:	5f 90       	pop	r5
    1eaa:	4f 90       	pop	r4
    1eac:	08 95       	ret

00001eae <vTaskStartScheduler>:
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	0f 2e       	mov	r0, r31
    1eb6:	f5 eb       	ldi	r31, 0xB5	; 181
    1eb8:	ef 2e       	mov	r14, r31
    1eba:	f7 e0       	ldi	r31, 0x07	; 7
    1ebc:	ff 2e       	mov	r15, r31
    1ebe:	f0 2d       	mov	r31, r0
    1ec0:	00 e0       	ldi	r16, 0x00	; 0
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 ec       	ldi	r20, 0xC0	; 192
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	68 ec       	ldi	r22, 0xC8	; 200
    1ecc:	74 e0       	ldi	r23, 0x04	; 4
    1ece:	8d ec       	ldi	r24, 0xCD	; 205
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	ce de       	rcall	.-612    	; 0x1c70 <xTaskCreate>
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	19 f5       	brne	.+70     	; 0x1f1e <vTaskStartScheduler+0x70>
    1ed8:	36 d6       	rcall	.+3180   	; 0x2b46 <xTimerCreateTimerTask>
    1eda:	81 30       	cpi	r24, 0x01	; 1
    1edc:	01 f5       	brne	.+64     	; 0x1f1e <vTaskStartScheduler+0x70>
    1ede:	f8 94       	cli
    1ee0:	8f ef       	ldi	r24, 0xFF	; 255
    1ee2:	9f ef       	ldi	r25, 0xFF	; 255
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xNextTaskUnblockTime>
    1eea:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1eee:	a0 93 b9 07 	sts	0x07B9, r26	; 0x8007b9 <xNextTaskUnblockTime+0x2>
    1ef2:	b0 93 ba 07 	sts	0x07BA, r27	; 0x8007ba <xNextTaskUnblockTime+0x3>
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <xSchedulerRunning>
    1efc:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <xTickCount>
    1f00:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <xTickCount+0x1>
    1f04:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <xTickCount+0x2>
    1f08:	10 92 c4 07 	sts	0x07C4, r1	; 0x8007c4 <xTickCount+0x3>
    1f0c:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    1f10:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    1f14:	81 a5       	ldd	r24, Z+41	; 0x29
    1f16:	0e 94 70 05 	call	0xae0	; 0xae0 <task_switch_in>
    1f1a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <xPortStartScheduler>
    1f1e:	0f 91       	pop	r16
    1f20:	ff 90       	pop	r15
    1f22:	ef 90       	pop	r14
    1f24:	08 95       	ret

00001f26 <vTaskSuspendAll>:
    1f26:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    1f2a:	8f 5f       	subi	r24, 0xFF	; 255
    1f2c:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <uxSchedulerSuspended>
    1f30:	08 95       	ret

00001f32 <xTaskGetTickCount>:
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	0f 92       	push	r0
    1f38:	60 91 c1 07 	lds	r22, 0x07C1	; 0x8007c1 <xTickCount>
    1f3c:	70 91 c2 07 	lds	r23, 0x07C2	; 0x8007c2 <xTickCount+0x1>
    1f40:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <xTickCount+0x2>
    1f44:	90 91 c4 07 	lds	r25, 0x07C4	; 0x8007c4 <xTickCount+0x3>
    1f48:	0f 90       	pop	r0
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	08 95       	ret

00001f4e <xTaskIncrementTick>:
    1f4e:	9f 92       	push	r9
    1f50:	af 92       	push	r10
    1f52:	bf 92       	push	r11
    1f54:	cf 92       	push	r12
    1f56:	df 92       	push	r13
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    1f68:	81 11       	cpse	r24, r1
    1f6a:	ad c0       	rjmp	.+346    	; 0x20c6 <xTaskIncrementTick+0x178>
    1f6c:	c0 90 c1 07 	lds	r12, 0x07C1	; 0x8007c1 <xTickCount>
    1f70:	d0 90 c2 07 	lds	r13, 0x07C2	; 0x8007c2 <xTickCount+0x1>
    1f74:	e0 90 c3 07 	lds	r14, 0x07C3	; 0x8007c3 <xTickCount+0x2>
    1f78:	f0 90 c4 07 	lds	r15, 0x07C4	; 0x8007c4 <xTickCount+0x3>
    1f7c:	8f ef       	ldi	r24, 0xFF	; 255
    1f7e:	c8 1a       	sub	r12, r24
    1f80:	d8 0a       	sbc	r13, r24
    1f82:	e8 0a       	sbc	r14, r24
    1f84:	f8 0a       	sbc	r15, r24
    1f86:	c0 92 c1 07 	sts	0x07C1, r12	; 0x8007c1 <xTickCount>
    1f8a:	d0 92 c2 07 	sts	0x07C2, r13	; 0x8007c2 <xTickCount+0x1>
    1f8e:	e0 92 c3 07 	sts	0x07C3, r14	; 0x8007c3 <xTickCount+0x2>
    1f92:	f0 92 c4 07 	sts	0x07C4, r15	; 0x8007c4 <xTickCount+0x3>
    1f96:	c1 14       	cp	r12, r1
    1f98:	d1 04       	cpc	r13, r1
    1f9a:	e1 04       	cpc	r14, r1
    1f9c:	f1 04       	cpc	r15, r1
    1f9e:	b1 f4       	brne	.+44     	; 0x1fcc <xTaskIncrementTick+0x7e>
    1fa0:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <pxDelayedTaskList>
    1fa4:	90 91 eb 07 	lds	r25, 0x07EB	; 0x8007eb <pxDelayedTaskList+0x1>
    1fa8:	20 91 e8 07 	lds	r18, 0x07E8	; 0x8007e8 <pxOverflowDelayedTaskList>
    1fac:	30 91 e9 07 	lds	r19, 0x07E9	; 0x8007e9 <pxOverflowDelayedTaskList+0x1>
    1fb0:	30 93 eb 07 	sts	0x07EB, r19	; 0x8007eb <pxDelayedTaskList+0x1>
    1fb4:	20 93 ea 07 	sts	0x07EA, r18	; 0x8007ea <pxDelayedTaskList>
    1fb8:	90 93 e9 07 	sts	0x07E9, r25	; 0x8007e9 <pxOverflowDelayedTaskList+0x1>
    1fbc:	80 93 e8 07 	sts	0x07E8, r24	; 0x8007e8 <pxOverflowDelayedTaskList>
    1fc0:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <xNumOfOverflows>
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <xNumOfOverflows>
    1fca:	b2 dd       	rcall	.-1180   	; 0x1b30 <prvResetNextTaskUnblockTime>
    1fcc:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xNextTaskUnblockTime>
    1fd0:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1fd4:	a0 91 b9 07 	lds	r26, 0x07B9	; 0x8007b9 <xNextTaskUnblockTime+0x2>
    1fd8:	b0 91 ba 07 	lds	r27, 0x07BA	; 0x8007ba <xNextTaskUnblockTime+0x3>
    1fdc:	c8 16       	cp	r12, r24
    1fde:	d9 06       	cpc	r13, r25
    1fe0:	ea 06       	cpc	r14, r26
    1fe2:	fb 06       	cpc	r15, r27
    1fe4:	10 f4       	brcc	.+4      	; 0x1fea <xTaskIncrementTick+0x9c>
    1fe6:	b1 2c       	mov	r11, r1
    1fe8:	5d c0       	rjmp	.+186    	; 0x20a4 <xTaskIncrementTick+0x156>
    1fea:	b1 2c       	mov	r11, r1
    1fec:	0f 2e       	mov	r0, r31
    1fee:	fb e0       	ldi	r31, 0x0B	; 11
    1ff0:	af 2e       	mov	r10, r31
    1ff2:	f0 2d       	mov	r31, r0
    1ff4:	99 24       	eor	r9, r9
    1ff6:	93 94       	inc	r9
    1ff8:	e0 91 ea 07 	lds	r30, 0x07EA	; 0x8007ea <pxDelayedTaskList>
    1ffc:	f0 91 eb 07 	lds	r31, 0x07EB	; 0x8007eb <pxDelayedTaskList+0x1>
    2000:	80 81       	ld	r24, Z
    2002:	81 11       	cpse	r24, r1
    2004:	0c c0       	rjmp	.+24     	; 0x201e <xTaskIncrementTick+0xd0>
    2006:	8f ef       	ldi	r24, 0xFF	; 255
    2008:	9f ef       	ldi	r25, 0xFF	; 255
    200a:	dc 01       	movw	r26, r24
    200c:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xNextTaskUnblockTime>
    2010:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    2014:	a0 93 b9 07 	sts	0x07B9, r26	; 0x8007b9 <xNextTaskUnblockTime+0x2>
    2018:	b0 93 ba 07 	sts	0x07BA, r27	; 0x8007ba <xNextTaskUnblockTime+0x3>
    201c:	43 c0       	rjmp	.+134    	; 0x20a4 <xTaskIncrementTick+0x156>
    201e:	e0 91 ea 07 	lds	r30, 0x07EA	; 0x8007ea <pxDelayedTaskList>
    2022:	f0 91 eb 07 	lds	r31, 0x07EB	; 0x8007eb <pxDelayedTaskList+0x1>
    2026:	07 80       	ldd	r0, Z+7	; 0x07
    2028:	f0 85       	ldd	r31, Z+8	; 0x08
    202a:	e0 2d       	mov	r30, r0
    202c:	c0 85       	ldd	r28, Z+8	; 0x08
    202e:	d1 85       	ldd	r29, Z+9	; 0x09
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	9b 81       	ldd	r25, Y+3	; 0x03
    2034:	ac 81       	ldd	r26, Y+4	; 0x04
    2036:	bd 81       	ldd	r27, Y+5	; 0x05
    2038:	c8 16       	cp	r12, r24
    203a:	d9 06       	cpc	r13, r25
    203c:	ea 06       	cpc	r14, r26
    203e:	fb 06       	cpc	r15, r27
    2040:	48 f4       	brcc	.+18     	; 0x2054 <xTaskIncrementTick+0x106>
    2042:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xNextTaskUnblockTime>
    2046:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    204a:	a0 93 b9 07 	sts	0x07B9, r26	; 0x8007b9 <xNextTaskUnblockTime+0x2>
    204e:	b0 93 ba 07 	sts	0x07BA, r27	; 0x8007ba <xNextTaskUnblockTime+0x3>
    2052:	28 c0       	rjmp	.+80     	; 0x20a4 <xTaskIncrementTick+0x156>
    2054:	8e 01       	movw	r16, r28
    2056:	0e 5f       	subi	r16, 0xFE	; 254
    2058:	1f 4f       	sbci	r17, 0xFF	; 255
    205a:	c8 01       	movw	r24, r16
    205c:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    2060:	88 8d       	ldd	r24, Y+24	; 0x18
    2062:	99 8d       	ldd	r25, Y+25	; 0x19
    2064:	89 2b       	or	r24, r25
    2066:	21 f0       	breq	.+8      	; 0x2070 <xTaskIncrementTick+0x122>
    2068:	ce 01       	movw	r24, r28
    206a:	0e 96       	adiw	r24, 0x0e	; 14
    206c:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    2070:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2072:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    2076:	98 17       	cp	r25, r24
    2078:	10 f4       	brcc	.+4      	; 0x207e <xTaskIncrementTick+0x130>
    207a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
    207e:	a8 9e       	mul	r10, r24
    2080:	c0 01       	movw	r24, r0
    2082:	11 24       	eor	r1, r1
    2084:	b8 01       	movw	r22, r16
    2086:	8e 5f       	subi	r24, 0xFE	; 254
    2088:	97 4f       	sbci	r25, 0xF7	; 247
    208a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    208e:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    2092:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2096:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2098:	82 8d       	ldd	r24, Z+26	; 0x1a
    209a:	98 17       	cp	r25, r24
    209c:	08 f4       	brcc	.+2      	; 0x20a0 <xTaskIncrementTick+0x152>
    209e:	ac cf       	rjmp	.-168    	; 0x1ff8 <xTaskIncrementTick+0xaa>
    20a0:	b9 2c       	mov	r11, r9
    20a2:	aa cf       	rjmp	.-172    	; 0x1ff8 <xTaskIncrementTick+0xaa>
    20a4:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    20a8:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    20ac:	e2 8d       	ldd	r30, Z+26	; 0x1a
    20ae:	8b e0       	ldi	r24, 0x0B	; 11
    20b0:	e8 9f       	mul	r30, r24
    20b2:	f0 01       	movw	r30, r0
    20b4:	11 24       	eor	r1, r1
    20b6:	ee 5f       	subi	r30, 0xFE	; 254
    20b8:	f7 4f       	sbci	r31, 0xF7	; 247
    20ba:	80 81       	ld	r24, Z
    20bc:	82 30       	cpi	r24, 0x02	; 2
    20be:	48 f0       	brcs	.+18     	; 0x20d2 <xTaskIncrementTick+0x184>
    20c0:	bb 24       	eor	r11, r11
    20c2:	b3 94       	inc	r11
    20c4:	06 c0       	rjmp	.+12     	; 0x20d2 <xTaskIncrementTick+0x184>
    20c6:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <uxPendedTicks>
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxPendedTicks>
    20d0:	b1 2c       	mov	r11, r1
    20d2:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <xYieldPending>
    20d6:	88 23       	and	r24, r24
    20d8:	11 f0       	breq	.+4      	; 0x20de <xTaskIncrementTick+0x190>
    20da:	bb 24       	eor	r11, r11
    20dc:	b3 94       	inc	r11
    20de:	8b 2d       	mov	r24, r11
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	ff 90       	pop	r15
    20ea:	ef 90       	pop	r14
    20ec:	df 90       	pop	r13
    20ee:	cf 90       	pop	r12
    20f0:	bf 90       	pop	r11
    20f2:	af 90       	pop	r10
    20f4:	9f 90       	pop	r9
    20f6:	08 95       	ret

000020f8 <xTaskResumeAll>:
    20f8:	cf 92       	push	r12
    20fa:	df 92       	push	r13
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	0f 92       	push	r0
    210e:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    2112:	81 50       	subi	r24, 0x01	; 1
    2114:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <uxSchedulerSuspended>
    2118:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    211c:	81 11       	cpse	r24, r1
    211e:	5a c0       	rjmp	.+180    	; 0x21d4 <xTaskResumeAll+0xdc>
    2120:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <uxCurrentNumberOfTasks>
    2124:	81 11       	cpse	r24, r1
    2126:	2c c0       	rjmp	.+88     	; 0x2180 <xTaskResumeAll+0x88>
    2128:	58 c0       	rjmp	.+176    	; 0x21da <xTaskResumeAll+0xe2>
    212a:	d7 01       	movw	r26, r14
    212c:	17 96       	adiw	r26, 0x07	; 7
    212e:	ed 91       	ld	r30, X+
    2130:	fc 91       	ld	r31, X
    2132:	18 97       	sbiw	r26, 0x08	; 8
    2134:	c0 85       	ldd	r28, Z+8	; 0x08
    2136:	d1 85       	ldd	r29, Z+9	; 0x09
    2138:	ce 01       	movw	r24, r28
    213a:	0e 96       	adiw	r24, 0x0e	; 14
    213c:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    2140:	8e 01       	movw	r16, r28
    2142:	0e 5f       	subi	r16, 0xFE	; 254
    2144:	1f 4f       	sbci	r17, 0xFF	; 255
    2146:	c8 01       	movw	r24, r16
    2148:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    214c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    214e:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    2152:	98 17       	cp	r25, r24
    2154:	10 f4       	brcc	.+4      	; 0x215a <xTaskResumeAll+0x62>
    2156:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
    215a:	d8 9e       	mul	r13, r24
    215c:	c0 01       	movw	r24, r0
    215e:	11 24       	eor	r1, r1
    2160:	b8 01       	movw	r22, r16
    2162:	8e 5f       	subi	r24, 0xFE	; 254
    2164:	97 4f       	sbci	r25, 0xF7	; 247
    2166:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    216a:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    216e:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2172:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2174:	82 8d       	ldd	r24, Z+26	; 0x1a
    2176:	98 17       	cp	r25, r24
    2178:	88 f0       	brcs	.+34     	; 0x219c <xTaskResumeAll+0xa4>
    217a:	c0 92 bd 07 	sts	0x07BD, r12	; 0x8007bd <xYieldPending>
    217e:	0e c0       	rjmp	.+28     	; 0x219c <xTaskResumeAll+0xa4>
    2180:	c0 e0       	ldi	r28, 0x00	; 0
    2182:	d0 e0       	ldi	r29, 0x00	; 0
    2184:	0f 2e       	mov	r0, r31
    2186:	fd ed       	ldi	r31, 0xDD	; 221
    2188:	ef 2e       	mov	r14, r31
    218a:	f7 e0       	ldi	r31, 0x07	; 7
    218c:	ff 2e       	mov	r15, r31
    218e:	f0 2d       	mov	r31, r0
    2190:	0f 2e       	mov	r0, r31
    2192:	fb e0       	ldi	r31, 0x0B	; 11
    2194:	df 2e       	mov	r13, r31
    2196:	f0 2d       	mov	r31, r0
    2198:	cc 24       	eor	r12, r12
    219a:	c3 94       	inc	r12
    219c:	f7 01       	movw	r30, r14
    219e:	80 81       	ld	r24, Z
    21a0:	81 11       	cpse	r24, r1
    21a2:	c3 cf       	rjmp	.-122    	; 0x212a <xTaskResumeAll+0x32>
    21a4:	cd 2b       	or	r28, r29
    21a6:	09 f0       	breq	.+2      	; 0x21aa <xTaskResumeAll+0xb2>
    21a8:	c3 dc       	rcall	.-1658   	; 0x1b30 <prvResetNextTaskUnblockTime>
    21aa:	c0 91 be 07 	lds	r28, 0x07BE	; 0x8007be <uxPendedTicks>
    21ae:	cc 23       	and	r28, r28
    21b0:	49 f0       	breq	.+18     	; 0x21c4 <xTaskResumeAll+0xcc>
    21b2:	d1 e0       	ldi	r29, 0x01	; 1
    21b4:	cc de       	rcall	.-616    	; 0x1f4e <xTaskIncrementTick>
    21b6:	81 11       	cpse	r24, r1
    21b8:	d0 93 bd 07 	sts	0x07BD, r29	; 0x8007bd <xYieldPending>
    21bc:	c1 50       	subi	r28, 0x01	; 1
    21be:	d1 f7       	brne	.-12     	; 0x21b4 <xTaskResumeAll+0xbc>
    21c0:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <uxPendedTicks>
    21c4:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <xYieldPending>
    21c8:	88 23       	and	r24, r24
    21ca:	31 f0       	breq	.+12     	; 0x21d8 <xTaskResumeAll+0xe0>
    21cc:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vPortYield>
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <xTaskResumeAll+0xe2>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <xTaskResumeAll+0xe2>
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	0f 90       	pop	r0
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	ff 90       	pop	r15
    21e8:	ef 90       	pop	r14
    21ea:	df 90       	pop	r13
    21ec:	cf 90       	pop	r12
    21ee:	08 95       	ret

000021f0 <vTaskDelay>:
    21f0:	cf 92       	push	r12
    21f2:	df 92       	push	r13
    21f4:	ef 92       	push	r14
    21f6:	ff 92       	push	r15
    21f8:	6b 01       	movw	r12, r22
    21fa:	7c 01       	movw	r14, r24
    21fc:	67 2b       	or	r22, r23
    21fe:	68 2b       	or	r22, r24
    2200:	69 2b       	or	r22, r25
    2202:	41 f0       	breq	.+16     	; 0x2214 <__stack+0x15>
    2204:	90 de       	rcall	.-736    	; 0x1f26 <vTaskSuspendAll>
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	c7 01       	movw	r24, r14
    220a:	b6 01       	movw	r22, r12
    220c:	bb dc       	rcall	.-1674   	; 0x1b84 <prvAddCurrentTaskToDelayedList>
    220e:	74 df       	rcall	.-280    	; 0x20f8 <xTaskResumeAll>
    2210:	81 11       	cpse	r24, r1
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <__stack+0x19>
    2214:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vPortYield>
    2218:	ff 90       	pop	r15
    221a:	ef 90       	pop	r14
    221c:	df 90       	pop	r13
    221e:	cf 90       	pop	r12
    2220:	08 95       	ret

00002222 <vTaskSwitchContext>:
    2222:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    2226:	88 23       	and	r24, r24
    2228:	21 f0       	breq	.+8      	; 0x2232 <vTaskSwitchContext+0x10>
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <xYieldPending>
    2230:	08 95       	ret
    2232:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <xYieldPending>
    2236:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    223a:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    223e:	81 a5       	ldd	r24, Z+41	; 0x29
    2240:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <task_switch_out>
    2244:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <pxCurrentTCB>
    2248:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    224c:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    2250:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2254:	2d 91       	ld	r18, X+
    2256:	3c 91       	ld	r19, X
    2258:	83 8d       	ldd	r24, Z+27	; 0x1b
    225a:	94 8d       	ldd	r25, Z+28	; 0x1c
    225c:	82 17       	cp	r24, r18
    225e:	93 07       	cpc	r25, r19
    2260:	58 f0       	brcs	.+22     	; 0x2278 <vTaskSwitchContext+0x56>
    2262:	60 91 2e 08 	lds	r22, 0x082E	; 0x80082e <pxCurrentTCB>
    2266:	70 91 2f 08 	lds	r23, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    226a:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <pxCurrentTCB>
    226e:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2272:	63 5e       	subi	r22, 0xE3	; 227
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
    2276:	89 d5       	rcall	.+2834   	; 0x2d8a <vApplicationStackOverflowHook>
    2278:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	9b e0       	ldi	r25, 0x0B	; 11
    2282:	89 9f       	mul	r24, r25
    2284:	f0 01       	movw	r30, r0
    2286:	11 24       	eor	r1, r1
    2288:	ee 5f       	subi	r30, 0xFE	; 254
    228a:	f7 4f       	sbci	r31, 0xF7	; 247
    228c:	90 81       	ld	r25, Z
    228e:	91 11       	cpse	r25, r1
    2290:	0e c0       	rjmp	.+28     	; 0x22ae <vTaskSwitchContext+0x8c>
    2292:	4b e0       	ldi	r20, 0x0B	; 11
    2294:	81 50       	subi	r24, 0x01	; 1
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	42 9f       	mul	r20, r18
    229c:	f0 01       	movw	r30, r0
    229e:	43 9f       	mul	r20, r19
    22a0:	f0 0d       	add	r31, r0
    22a2:	11 24       	eor	r1, r1
    22a4:	ee 5f       	subi	r30, 0xFE	; 254
    22a6:	f7 4f       	sbci	r31, 0xF7	; 247
    22a8:	90 81       	ld	r25, Z
    22aa:	99 23       	and	r25, r25
    22ac:	99 f3       	breq	.-26     	; 0x2294 <vTaskSwitchContext+0x72>
    22ae:	9b e0       	ldi	r25, 0x0B	; 11
    22b0:	92 9f       	mul	r25, r18
    22b2:	a0 01       	movw	r20, r0
    22b4:	93 9f       	mul	r25, r19
    22b6:	50 0d       	add	r21, r0
    22b8:	11 24       	eor	r1, r1
    22ba:	da 01       	movw	r26, r20
    22bc:	ae 5f       	subi	r26, 0xFE	; 254
    22be:	b7 4f       	sbci	r27, 0xF7	; 247
    22c0:	11 96       	adiw	r26, 0x01	; 1
    22c2:	ed 91       	ld	r30, X+
    22c4:	fc 91       	ld	r31, X
    22c6:	12 97       	sbiw	r26, 0x02	; 2
    22c8:	04 80       	ldd	r0, Z+4	; 0x04
    22ca:	f5 81       	ldd	r31, Z+5	; 0x05
    22cc:	e0 2d       	mov	r30, r0
    22ce:	12 96       	adiw	r26, 0x02	; 2
    22d0:	fc 93       	st	X, r31
    22d2:	ee 93       	st	-X, r30
    22d4:	11 97       	sbiw	r26, 0x01	; 1
    22d6:	4b 5f       	subi	r20, 0xFB	; 251
    22d8:	57 4f       	sbci	r21, 0xF7	; 247
    22da:	e4 17       	cp	r30, r20
    22dc:	f5 07       	cpc	r31, r21
    22de:	29 f4       	brne	.+10     	; 0x22ea <vTaskSwitchContext+0xc8>
    22e0:	44 81       	ldd	r20, Z+4	; 0x04
    22e2:	55 81       	ldd	r21, Z+5	; 0x05
    22e4:	fd 01       	movw	r30, r26
    22e6:	52 83       	std	Z+2, r21	; 0x02
    22e8:	41 83       	std	Z+1, r20	; 0x01
    22ea:	9b e0       	ldi	r25, 0x0B	; 11
    22ec:	92 9f       	mul	r25, r18
    22ee:	f0 01       	movw	r30, r0
    22f0:	93 9f       	mul	r25, r19
    22f2:	f0 0d       	add	r31, r0
    22f4:	11 24       	eor	r1, r1
    22f6:	ee 5f       	subi	r30, 0xFE	; 254
    22f8:	f7 4f       	sbci	r31, 0xF7	; 247
    22fa:	01 80       	ldd	r0, Z+1	; 0x01
    22fc:	f2 81       	ldd	r31, Z+2	; 0x02
    22fe:	e0 2d       	mov	r30, r0
    2300:	20 85       	ldd	r18, Z+8	; 0x08
    2302:	31 85       	ldd	r19, Z+9	; 0x09
    2304:	30 93 2f 08 	sts	0x082F, r19	; 0x80082f <pxCurrentTCB+0x1>
    2308:	20 93 2e 08 	sts	0x082E, r18	; 0x80082e <pxCurrentTCB>
    230c:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
    2310:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    2314:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2318:	81 a5       	ldd	r24, Z+41	; 0x29
    231a:	0c 94 70 05 	jmp	0xae0	; 0xae0 <task_switch_in>
    231e:	08 95       	ret

00002320 <vTaskPlaceOnEventList>:
    2320:	cf 92       	push	r12
    2322:	df 92       	push	r13
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	6a 01       	movw	r12, r20
    232a:	7b 01       	movw	r14, r22
    232c:	60 91 2e 08 	lds	r22, 0x082E	; 0x80082e <pxCurrentTCB>
    2330:	70 91 2f 08 	lds	r23, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2334:	62 5f       	subi	r22, 0xF2	; 242
    2336:	7f 4f       	sbci	r23, 0xFF	; 255
    2338:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vListInsert>
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	c7 01       	movw	r24, r14
    2340:	b6 01       	movw	r22, r12
    2342:	20 dc       	rcall	.-1984   	; 0x1b84 <prvAddCurrentTaskToDelayedList>
    2344:	ff 90       	pop	r15
    2346:	ef 90       	pop	r14
    2348:	df 90       	pop	r13
    234a:	cf 90       	pop	r12
    234c:	08 95       	ret

0000234e <vTaskPlaceOnEventListRestricted>:
    234e:	cf 92       	push	r12
    2350:	df 92       	push	r13
    2352:	ef 92       	push	r14
    2354:	ff 92       	push	r15
    2356:	cf 93       	push	r28
    2358:	6a 01       	movw	r12, r20
    235a:	7b 01       	movw	r14, r22
    235c:	c2 2f       	mov	r28, r18
    235e:	60 91 2e 08 	lds	r22, 0x082E	; 0x80082e <pxCurrentTCB>
    2362:	70 91 2f 08 	lds	r23, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2366:	62 5f       	subi	r22, 0xF2	; 242
    2368:	7f 4f       	sbci	r23, 0xFF	; 255
    236a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    236e:	cc 23       	and	r28, r28
    2370:	21 f0       	breq	.+8      	; 0x237a <vTaskPlaceOnEventListRestricted+0x2c>
    2372:	cc 24       	eor	r12, r12
    2374:	ca 94       	dec	r12
    2376:	dc 2c       	mov	r13, r12
    2378:	76 01       	movw	r14, r12
    237a:	4c 2f       	mov	r20, r28
    237c:	c7 01       	movw	r24, r14
    237e:	b6 01       	movw	r22, r12
    2380:	01 dc       	rcall	.-2046   	; 0x1b84 <prvAddCurrentTaskToDelayedList>
    2382:	cf 91       	pop	r28
    2384:	ff 90       	pop	r15
    2386:	ef 90       	pop	r14
    2388:	df 90       	pop	r13
    238a:	cf 90       	pop	r12
    238c:	08 95       	ret

0000238e <xTaskRemoveFromEventList>:
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	dc 01       	movw	r26, r24
    2398:	17 96       	adiw	r26, 0x07	; 7
    239a:	ed 91       	ld	r30, X+
    239c:	fc 91       	ld	r31, X
    239e:	18 97       	sbiw	r26, 0x08	; 8
    23a0:	c0 85       	ldd	r28, Z+8	; 0x08
    23a2:	d1 85       	ldd	r29, Z+9	; 0x09
    23a4:	8e 01       	movw	r16, r28
    23a6:	02 5f       	subi	r16, 0xF2	; 242
    23a8:	1f 4f       	sbci	r17, 0xFF	; 255
    23aa:	c8 01       	movw	r24, r16
    23ac:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    23b0:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    23b4:	81 11       	cpse	r24, r1
    23b6:	16 c0       	rjmp	.+44     	; 0x23e4 <xTaskRemoveFromEventList+0x56>
    23b8:	0c 50       	subi	r16, 0x0C	; 12
    23ba:	11 09       	sbc	r17, r1
    23bc:	c8 01       	movw	r24, r16
    23be:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    23c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23c4:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    23c8:	98 17       	cp	r25, r24
    23ca:	10 f4       	brcc	.+4      	; 0x23d0 <xTaskRemoveFromEventList+0x42>
    23cc:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
    23d0:	bb e0       	ldi	r27, 0x0B	; 11
    23d2:	8b 9f       	mul	r24, r27
    23d4:	c0 01       	movw	r24, r0
    23d6:	11 24       	eor	r1, r1
    23d8:	b8 01       	movw	r22, r16
    23da:	8e 5f       	subi	r24, 0xFE	; 254
    23dc:	97 4f       	sbci	r25, 0xF7	; 247
    23de:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    23e2:	05 c0       	rjmp	.+10     	; 0x23ee <xTaskRemoveFromEventList+0x60>
    23e4:	b8 01       	movw	r22, r16
    23e6:	8d ed       	ldi	r24, 0xDD	; 221
    23e8:	97 e0       	ldi	r25, 0x07	; 7
    23ea:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    23ee:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    23f2:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    23f6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    23fa:	89 17       	cp	r24, r25
    23fc:	20 f4       	brcc	.+8      	; 0x2406 <xTaskRemoveFromEventList+0x78>
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <xYieldPending>
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <xTaskRemoveFromEventList+0x7a>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	1f 91       	pop	r17
    240e:	0f 91       	pop	r16
    2410:	08 95       	ret

00002412 <vTaskInternalSetTimeOutState>:
    2412:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <xNumOfOverflows>
    2416:	fc 01       	movw	r30, r24
    2418:	20 83       	st	Z, r18
    241a:	40 91 c1 07 	lds	r20, 0x07C1	; 0x8007c1 <xTickCount>
    241e:	50 91 c2 07 	lds	r21, 0x07C2	; 0x8007c2 <xTickCount+0x1>
    2422:	60 91 c3 07 	lds	r22, 0x07C3	; 0x8007c3 <xTickCount+0x2>
    2426:	70 91 c4 07 	lds	r23, 0x07C4	; 0x8007c4 <xTickCount+0x3>
    242a:	41 83       	std	Z+1, r20	; 0x01
    242c:	52 83       	std	Z+2, r21	; 0x02
    242e:	63 83       	std	Z+3, r22	; 0x03
    2430:	74 83       	std	Z+4, r23	; 0x04
    2432:	08 95       	ret

00002434 <xTaskCheckForTimeOut>:
    2434:	cf 92       	push	r12
    2436:	df 92       	push	r13
    2438:	ef 92       	push	r14
    243a:	ff 92       	push	r15
    243c:	0f 93       	push	r16
    243e:	1f 93       	push	r17
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
    2444:	fb 01       	movw	r30, r22
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	0f 92       	push	r0
    244c:	40 91 c1 07 	lds	r20, 0x07C1	; 0x8007c1 <xTickCount>
    2450:	50 91 c2 07 	lds	r21, 0x07C2	; 0x8007c2 <xTickCount+0x1>
    2454:	60 91 c3 07 	lds	r22, 0x07C3	; 0x8007c3 <xTickCount+0x2>
    2458:	70 91 c4 07 	lds	r23, 0x07C4	; 0x8007c4 <xTickCount+0x3>
    245c:	00 81       	ld	r16, Z
    245e:	11 81       	ldd	r17, Z+1	; 0x01
    2460:	22 81       	ldd	r18, Z+2	; 0x02
    2462:	33 81       	ldd	r19, Z+3	; 0x03
    2464:	0f 3f       	cpi	r16, 0xFF	; 255
    2466:	af ef       	ldi	r26, 0xFF	; 255
    2468:	1a 07       	cpc	r17, r26
    246a:	2a 07       	cpc	r18, r26
    246c:	3a 07       	cpc	r19, r26
    246e:	49 f1       	breq	.+82     	; 0x24c2 <xTaskCheckForTimeOut+0x8e>
    2470:	ec 01       	movw	r28, r24
    2472:	c9 80       	ldd	r12, Y+1	; 0x01
    2474:	da 80       	ldd	r13, Y+2	; 0x02
    2476:	eb 80       	ldd	r14, Y+3	; 0x03
    2478:	fc 80       	ldd	r15, Y+4	; 0x04
    247a:	a0 91 bc 07 	lds	r26, 0x07BC	; 0x8007bc <xNumOfOverflows>
    247e:	b8 81       	ld	r27, Y
    2480:	ba 17       	cp	r27, r26
    2482:	29 f0       	breq	.+10     	; 0x248e <xTaskCheckForTimeOut+0x5a>
    2484:	4c 15       	cp	r20, r12
    2486:	5d 05       	cpc	r21, r13
    2488:	6e 05       	cpc	r22, r14
    248a:	7f 05       	cpc	r23, r15
    248c:	e0 f4       	brcc	.+56     	; 0x24c6 <xTaskCheckForTimeOut+0x92>
    248e:	4c 19       	sub	r20, r12
    2490:	5d 09       	sbc	r21, r13
    2492:	6e 09       	sbc	r22, r14
    2494:	7f 09       	sbc	r23, r15
    2496:	40 17       	cp	r20, r16
    2498:	51 07       	cpc	r21, r17
    249a:	62 07       	cpc	r22, r18
    249c:	73 07       	cpc	r23, r19
    249e:	58 f4       	brcc	.+22     	; 0x24b6 <xTaskCheckForTimeOut+0x82>
    24a0:	04 1b       	sub	r16, r20
    24a2:	15 0b       	sbc	r17, r21
    24a4:	26 0b       	sbc	r18, r22
    24a6:	37 0b       	sbc	r19, r23
    24a8:	00 83       	st	Z, r16
    24aa:	11 83       	std	Z+1, r17	; 0x01
    24ac:	22 83       	std	Z+2, r18	; 0x02
    24ae:	33 83       	std	Z+3, r19	; 0x03
    24b0:	b0 df       	rcall	.-160    	; 0x2412 <vTaskInternalSetTimeOutState>
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	09 c0       	rjmp	.+18     	; 0x24c8 <xTaskCheckForTimeOut+0x94>
    24b6:	10 82       	st	Z, r1
    24b8:	11 82       	std	Z+1, r1	; 0x01
    24ba:	12 82       	std	Z+2, r1	; 0x02
    24bc:	13 82       	std	Z+3, r1	; 0x03
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	03 c0       	rjmp	.+6      	; 0x24c8 <xTaskCheckForTimeOut+0x94>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <xTaskCheckForTimeOut+0x94>
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	0f 90       	pop	r0
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
    24d6:	ef 90       	pop	r14
    24d8:	df 90       	pop	r13
    24da:	cf 90       	pop	r12
    24dc:	08 95       	ret

000024de <vTaskMissedYield>:
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <xYieldPending>
    24e4:	08 95       	ret

000024e6 <xTaskGetCurrentTaskHandle>:
    24e6:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <pxCurrentTCB>
    24ea:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    24ee:	08 95       	ret

000024f0 <xTaskGetSchedulerState>:
    24f0:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <xSchedulerRunning>
    24f4:	88 23       	and	r24, r24
    24f6:	31 f0       	breq	.+12     	; 0x2504 <xTaskGetSchedulerState+0x14>
    24f8:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    24fc:	88 23       	and	r24, r24
    24fe:	21 f0       	breq	.+8      	; 0x2508 <xTaskGetSchedulerState+0x18>
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	08 95       	ret
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	08 95       	ret
    2508:	82 e0       	ldi	r24, 0x02	; 2
    250a:	08 95       	ret

0000250c <xTaskPriorityInherit>:
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	fc 01       	movw	r30, r24
    2516:	89 2b       	or	r24, r25
    2518:	09 f4       	brne	.+2      	; 0x251c <xTaskPriorityInherit+0x10>
    251a:	60 c0       	rjmp	.+192    	; 0x25dc <xTaskPriorityInherit+0xd0>
    251c:	82 8d       	ldd	r24, Z+26	; 0x1a
    251e:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <pxCurrentTCB>
    2522:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2526:	5a 96       	adiw	r26, 0x1a	; 26
    2528:	9c 91       	ld	r25, X
    252a:	89 17       	cp	r24, r25
    252c:	08 f0       	brcs	.+2      	; 0x2530 <xTaskPriorityInherit+0x24>
    252e:	4a c0       	rjmp	.+148    	; 0x25c4 <xTaskPriorityInherit+0xb8>
    2530:	46 85       	ldd	r20, Z+14	; 0x0e
    2532:	57 85       	ldd	r21, Z+15	; 0x0f
    2534:	60 89       	ldd	r22, Z+16	; 0x10
    2536:	71 89       	ldd	r23, Z+17	; 0x11
    2538:	77 23       	and	r23, r23
    253a:	94 f0       	brlt	.+36     	; 0x2560 <xTaskPriorityInherit+0x54>
    253c:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <pxCurrentTCB>
    2540:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2544:	5a 96       	adiw	r26, 0x1a	; 26
    2546:	9c 91       	ld	r25, X
    2548:	44 e0       	ldi	r20, 0x04	; 4
    254a:	50 e0       	ldi	r21, 0x00	; 0
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	49 1b       	sub	r20, r25
    2552:	51 09       	sbc	r21, r1
    2554:	61 09       	sbc	r22, r1
    2556:	71 09       	sbc	r23, r1
    2558:	46 87       	std	Z+14, r20	; 0x0e
    255a:	57 87       	std	Z+15, r21	; 0x0f
    255c:	60 8b       	std	Z+16, r22	; 0x10
    255e:	71 8b       	std	Z+17, r23	; 0x11
    2560:	2b e0       	ldi	r18, 0x0B	; 11
    2562:	82 9f       	mul	r24, r18
    2564:	c0 01       	movw	r24, r0
    2566:	11 24       	eor	r1, r1
    2568:	8e 5f       	subi	r24, 0xFE	; 254
    256a:	97 4f       	sbci	r25, 0xF7	; 247
    256c:	24 85       	ldd	r18, Z+12	; 0x0c
    256e:	35 85       	ldd	r19, Z+13	; 0x0d
    2570:	28 17       	cp	r18, r24
    2572:	39 07       	cpc	r19, r25
    2574:	f1 f4       	brne	.+60     	; 0x25b2 <xTaskPriorityInherit+0xa6>
    2576:	8f 01       	movw	r16, r30
    2578:	ef 01       	movw	r28, r30
    257a:	22 96       	adiw	r28, 0x02	; 2
    257c:	ce 01       	movw	r24, r28
    257e:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    2582:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    2586:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    258a:	82 8d       	ldd	r24, Z+26	; 0x1a
    258c:	f8 01       	movw	r30, r16
    258e:	82 8f       	std	Z+26, r24	; 0x1a
    2590:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    2594:	98 17       	cp	r25, r24
    2596:	10 f4       	brcc	.+4      	; 0x259c <xTaskPriorityInherit+0x90>
    2598:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
    259c:	fb e0       	ldi	r31, 0x0B	; 11
    259e:	8f 9f       	mul	r24, r31
    25a0:	c0 01       	movw	r24, r0
    25a2:	11 24       	eor	r1, r1
    25a4:	be 01       	movw	r22, r28
    25a6:	8e 5f       	subi	r24, 0xFE	; 254
    25a8:	97 4f       	sbci	r25, 0xF7	; 247
    25aa:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	16 c0       	rjmp	.+44     	; 0x25de <xTaskPriorityInherit+0xd2>
    25b2:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <pxCurrentTCB>
    25b6:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    25ba:	5a 96       	adiw	r26, 0x1a	; 26
    25bc:	8c 91       	ld	r24, X
    25be:	82 8f       	std	Z+26, r24	; 0x1a
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	0d c0       	rjmp	.+26     	; 0x25de <xTaskPriorityInherit+0xd2>
    25c4:	a0 91 2e 08 	lds	r26, 0x082E	; 0x80082e <pxCurrentTCB>
    25c8:	b0 91 2f 08 	lds	r27, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	27 a1       	ldd	r18, Z+39	; 0x27
    25d0:	5a 96       	adiw	r26, 0x1a	; 26
    25d2:	9c 91       	ld	r25, X
    25d4:	29 17       	cp	r18, r25
    25d6:	18 f0       	brcs	.+6      	; 0x25de <xTaskPriorityInherit+0xd2>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	01 c0       	rjmp	.+2      	; 0x25de <xTaskPriorityInherit+0xd2>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	08 95       	ret

000025e8 <xTaskPriorityDisinherit>:
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	fc 01       	movw	r30, r24
    25f2:	89 2b       	or	r24, r25
    25f4:	79 f1       	breq	.+94     	; 0x2654 <xTaskPriorityDisinherit+0x6c>
    25f6:	80 a5       	ldd	r24, Z+40	; 0x28
    25f8:	81 50       	subi	r24, 0x01	; 1
    25fa:	80 a7       	std	Z+40, r24	; 0x28
    25fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    25fe:	97 a1       	ldd	r25, Z+39	; 0x27
    2600:	29 17       	cp	r18, r25
    2602:	51 f1       	breq	.+84     	; 0x2658 <xTaskPriorityDisinherit+0x70>
    2604:	81 11       	cpse	r24, r1
    2606:	2a c0       	rjmp	.+84     	; 0x265c <xTaskPriorityDisinherit+0x74>
    2608:	ef 01       	movw	r28, r30
    260a:	8f 01       	movw	r16, r30
    260c:	0e 5f       	subi	r16, 0xFE	; 254
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	c8 01       	movw	r24, r16
    2612:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    2616:	8f a1       	ldd	r24, Y+39	; 0x27
    2618:	8a 8f       	std	Y+26, r24	; 0x1a
    261a:	44 e0       	ldi	r20, 0x04	; 4
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	60 e0       	ldi	r22, 0x00	; 0
    2620:	70 e0       	ldi	r23, 0x00	; 0
    2622:	48 1b       	sub	r20, r24
    2624:	51 09       	sbc	r21, r1
    2626:	61 09       	sbc	r22, r1
    2628:	71 09       	sbc	r23, r1
    262a:	4e 87       	std	Y+14, r20	; 0x0e
    262c:	5f 87       	std	Y+15, r21	; 0x0f
    262e:	68 8b       	std	Y+16, r22	; 0x10
    2630:	79 8b       	std	Y+17, r23	; 0x11
    2632:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    2636:	98 17       	cp	r25, r24
    2638:	10 f4       	brcc	.+4      	; 0x263e <xTaskPriorityDisinherit+0x56>
    263a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
    263e:	2b e0       	ldi	r18, 0x0B	; 11
    2640:	82 9f       	mul	r24, r18
    2642:	c0 01       	movw	r24, r0
    2644:	11 24       	eor	r1, r1
    2646:	b8 01       	movw	r22, r16
    2648:	8e 5f       	subi	r24, 0xFE	; 254
    264a:	97 4f       	sbci	r25, 0xF7	; 247
    264c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	05 c0       	rjmp	.+10     	; 0x265e <xTaskPriorityDisinherit+0x76>
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	03 c0       	rjmp	.+6      	; 0x265e <xTaskPriorityDisinherit+0x76>
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	01 c0       	rjmp	.+2      	; 0x265e <xTaskPriorityDisinherit+0x76>
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	08 95       	ret

00002668 <vTaskPriorityDisinheritAfterTimeout>:
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	fc 01       	movw	r30, r24
    2672:	89 2b       	or	r24, r25
    2674:	09 f4       	brne	.+2      	; 0x2678 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2676:	3f c0       	rjmp	.+126    	; 0x26f6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2678:	87 a1       	ldd	r24, Z+39	; 0x27
    267a:	86 17       	cp	r24, r22
    267c:	08 f4       	brcc	.+2      	; 0x2680 <vTaskPriorityDisinheritAfterTimeout+0x18>
    267e:	86 2f       	mov	r24, r22
    2680:	92 8d       	ldd	r25, Z+26	; 0x1a
    2682:	98 17       	cp	r25, r24
    2684:	c1 f1       	breq	.+112    	; 0x26f6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    2686:	20 a5       	ldd	r18, Z+40	; 0x28
    2688:	21 30       	cpi	r18, 0x01	; 1
    268a:	a9 f5       	brne	.+106    	; 0x26f6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    268c:	82 8f       	std	Z+26, r24	; 0x1a
    268e:	46 85       	ldd	r20, Z+14	; 0x0e
    2690:	57 85       	ldd	r21, Z+15	; 0x0f
    2692:	60 89       	ldd	r22, Z+16	; 0x10
    2694:	71 89       	ldd	r23, Z+17	; 0x11
    2696:	77 23       	and	r23, r23
    2698:	64 f0       	brlt	.+24     	; 0x26b2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
    269a:	44 e0       	ldi	r20, 0x04	; 4
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	48 1b       	sub	r20, r24
    26a4:	51 09       	sbc	r21, r1
    26a6:	61 09       	sbc	r22, r1
    26a8:	71 09       	sbc	r23, r1
    26aa:	46 87       	std	Z+14, r20	; 0x0e
    26ac:	57 87       	std	Z+15, r21	; 0x0f
    26ae:	60 8b       	std	Z+16, r22	; 0x10
    26b0:	71 8b       	std	Z+17, r23	; 0x11
    26b2:	2b e0       	ldi	r18, 0x0B	; 11
    26b4:	92 9f       	mul	r25, r18
    26b6:	c0 01       	movw	r24, r0
    26b8:	11 24       	eor	r1, r1
    26ba:	8e 5f       	subi	r24, 0xFE	; 254
    26bc:	97 4f       	sbci	r25, 0xF7	; 247
    26be:	24 85       	ldd	r18, Z+12	; 0x0c
    26c0:	35 85       	ldd	r19, Z+13	; 0x0d
    26c2:	28 17       	cp	r18, r24
    26c4:	39 07       	cpc	r19, r25
    26c6:	b9 f4       	brne	.+46     	; 0x26f6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
    26c8:	ef 01       	movw	r28, r30
    26ca:	8f 01       	movw	r16, r30
    26cc:	0e 5f       	subi	r16, 0xFE	; 254
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	c8 01       	movw	r24, r16
    26d2:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    26d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26d8:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    26dc:	98 17       	cp	r25, r24
    26de:	10 f4       	brcc	.+4      	; 0x26e4 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    26e0:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
    26e4:	2b e0       	ldi	r18, 0x0B	; 11
    26e6:	82 9f       	mul	r24, r18
    26e8:	c0 01       	movw	r24, r0
    26ea:	11 24       	eor	r1, r1
    26ec:	b8 01       	movw	r22, r16
    26ee:	8e 5f       	subi	r24, 0xFE	; 254
    26f0:	97 4f       	sbci	r25, 0xF7	; 247
    26f2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	08 95       	ret

00002700 <pvTaskIncrementMutexHeldCount>:
    2700:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <pxCurrentTCB>
    2704:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2708:	89 2b       	or	r24, r25
    270a:	39 f0       	breq	.+14     	; 0x271a <pvTaskIncrementMutexHeldCount+0x1a>
    270c:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    2710:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2714:	80 a5       	ldd	r24, Z+40	; 0x28
    2716:	8f 5f       	subi	r24, 0xFF	; 255
    2718:	80 a7       	std	Z+40, r24	; 0x28
    271a:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <pxCurrentTCB>
    271e:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2722:	08 95       	ret

00002724 <xTaskNotifyWait>:
    2724:	4f 92       	push	r4
    2726:	5f 92       	push	r5
    2728:	6f 92       	push	r6
    272a:	7f 92       	push	r7
    272c:	8f 92       	push	r8
    272e:	9f 92       	push	r9
    2730:	af 92       	push	r10
    2732:	bf 92       	push	r11
    2734:	cf 92       	push	r12
    2736:	df 92       	push	r13
    2738:	ef 92       	push	r14
    273a:	ff 92       	push	r15
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	49 01       	movw	r8, r18
    2742:	5a 01       	movw	r10, r20
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	0f 92       	push	r0
    274a:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    274e:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2752:	27 a5       	ldd	r18, Z+47	; 0x2f
    2754:	22 30       	cpi	r18, 0x02	; 2
    2756:	39 f1       	breq	.+78     	; 0x27a6 <xTaskNotifyWait+0x82>
    2758:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    275c:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2760:	43 a4       	ldd	r4, Z+43	; 0x2b
    2762:	54 a4       	ldd	r5, Z+44	; 0x2c
    2764:	65 a4       	ldd	r6, Z+45	; 0x2d
    2766:	76 a4       	ldd	r7, Z+46	; 0x2e
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	80 95       	com	r24
    276e:	90 95       	com	r25
    2770:	a0 95       	com	r26
    2772:	b0 95       	com	r27
    2774:	84 21       	and	r24, r4
    2776:	95 21       	and	r25, r5
    2778:	a6 21       	and	r26, r6
    277a:	b7 21       	and	r27, r7
    277c:	83 a7       	std	Z+43, r24	; 0x2b
    277e:	94 a7       	std	Z+44, r25	; 0x2c
    2780:	a5 a7       	std	Z+45, r26	; 0x2d
    2782:	b6 a7       	std	Z+46, r27	; 0x2e
    2784:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    2788:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	87 a7       	std	Z+47, r24	; 0x2f
    2790:	c1 14       	cp	r12, r1
    2792:	d1 04       	cpc	r13, r1
    2794:	e1 04       	cpc	r14, r1
    2796:	f1 04       	cpc	r15, r1
    2798:	31 f0       	breq	.+12     	; 0x27a6 <xTaskNotifyWait+0x82>
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	c7 01       	movw	r24, r14
    279e:	b6 01       	movw	r22, r12
    27a0:	f1 d9       	rcall	.-3102   	; 0x1b84 <prvAddCurrentTaskToDelayedList>
    27a2:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vPortYield>
    27a6:	0f 90       	pop	r0
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	0f 92       	push	r0
    27b0:	01 15       	cp	r16, r1
    27b2:	11 05       	cpc	r17, r1
    27b4:	69 f0       	breq	.+26     	; 0x27d0 <xTaskNotifyWait+0xac>
    27b6:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    27ba:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    27be:	83 a5       	ldd	r24, Z+43	; 0x2b
    27c0:	94 a5       	ldd	r25, Z+44	; 0x2c
    27c2:	a5 a5       	ldd	r26, Z+45	; 0x2d
    27c4:	b6 a5       	ldd	r27, Z+46	; 0x2e
    27c6:	f8 01       	movw	r30, r16
    27c8:	80 83       	st	Z, r24
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	a2 83       	std	Z+2, r26	; 0x02
    27ce:	b3 83       	std	Z+3, r27	; 0x03
    27d0:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    27d4:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    27d8:	87 a5       	ldd	r24, Z+47	; 0x2f
    27da:	82 30       	cpi	r24, 0x02	; 2
    27dc:	b1 f4       	brne	.+44     	; 0x280a <xTaskNotifyWait+0xe6>
    27de:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    27e2:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    27e6:	83 a5       	ldd	r24, Z+43	; 0x2b
    27e8:	94 a5       	ldd	r25, Z+44	; 0x2c
    27ea:	a5 a5       	ldd	r26, Z+45	; 0x2d
    27ec:	b6 a5       	ldd	r27, Z+46	; 0x2e
    27ee:	80 94       	com	r8
    27f0:	90 94       	com	r9
    27f2:	a0 94       	com	r10
    27f4:	b0 94       	com	r11
    27f6:	88 22       	and	r8, r24
    27f8:	99 22       	and	r9, r25
    27fa:	aa 22       	and	r10, r26
    27fc:	bb 22       	and	r11, r27
    27fe:	83 a6       	std	Z+43, r8	; 0x2b
    2800:	94 a6       	std	Z+44, r9	; 0x2c
    2802:	a5 a6       	std	Z+45, r10	; 0x2d
    2804:	b6 a6       	std	Z+46, r11	; 0x2e
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	01 c0       	rjmp	.+2      	; 0x280c <xTaskNotifyWait+0xe8>
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    2810:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2814:	17 a6       	std	Z+47, r1	; 0x2f
    2816:	0f 90       	pop	r0
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	ff 90       	pop	r15
    2820:	ef 90       	pop	r14
    2822:	df 90       	pop	r13
    2824:	cf 90       	pop	r12
    2826:	bf 90       	pop	r11
    2828:	af 90       	pop	r10
    282a:	9f 90       	pop	r9
    282c:	8f 90       	pop	r8
    282e:	7f 90       	pop	r7
    2830:	6f 90       	pop	r6
    2832:	5f 90       	pop	r5
    2834:	4f 90       	pop	r4
    2836:	08 95       	ret

00002838 <xTaskGenericNotify>:
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	fc 01       	movw	r30, r24
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	0f 92       	push	r0
    2848:	01 15       	cp	r16, r1
    284a:	11 05       	cpc	r17, r1
    284c:	49 f0       	breq	.+18     	; 0x2860 <xTaskGenericNotify+0x28>
    284e:	83 a5       	ldd	r24, Z+43	; 0x2b
    2850:	94 a5       	ldd	r25, Z+44	; 0x2c
    2852:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2854:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2856:	e8 01       	movw	r28, r16
    2858:	88 83       	st	Y, r24
    285a:	99 83       	std	Y+1, r25	; 0x01
    285c:	aa 83       	std	Y+2, r26	; 0x02
    285e:	bb 83       	std	Y+3, r27	; 0x03
    2860:	87 a5       	ldd	r24, Z+47	; 0x2f
    2862:	92 e0       	ldi	r25, 0x02	; 2
    2864:	97 a7       	std	Z+47, r25	; 0x2f
    2866:	22 30       	cpi	r18, 0x02	; 2
    2868:	b1 f0       	breq	.+44     	; 0x2896 <xTaskGenericNotify+0x5e>
    286a:	18 f4       	brcc	.+6      	; 0x2872 <xTaskGenericNotify+0x3a>
    286c:	21 30       	cpi	r18, 0x01	; 1
    286e:	31 f0       	breq	.+12     	; 0x287c <xTaskGenericNotify+0x44>
    2870:	2a c0       	rjmp	.+84     	; 0x28c6 <xTaskGenericNotify+0x8e>
    2872:	23 30       	cpi	r18, 0x03	; 3
    2874:	e9 f0       	breq	.+58     	; 0x28b0 <xTaskGenericNotify+0x78>
    2876:	24 30       	cpi	r18, 0x04	; 4
    2878:	01 f1       	breq	.+64     	; 0x28ba <xTaskGenericNotify+0x82>
    287a:	25 c0       	rjmp	.+74     	; 0x28c6 <xTaskGenericNotify+0x8e>
    287c:	03 a5       	ldd	r16, Z+43	; 0x2b
    287e:	14 a5       	ldd	r17, Z+44	; 0x2c
    2880:	25 a5       	ldd	r18, Z+45	; 0x2d
    2882:	36 a5       	ldd	r19, Z+46	; 0x2e
    2884:	40 2b       	or	r20, r16
    2886:	51 2b       	or	r21, r17
    2888:	62 2b       	or	r22, r18
    288a:	73 2b       	or	r23, r19
    288c:	43 a7       	std	Z+43, r20	; 0x2b
    288e:	54 a7       	std	Z+44, r21	; 0x2c
    2890:	65 a7       	std	Z+45, r22	; 0x2d
    2892:	76 a7       	std	Z+46, r23	; 0x2e
    2894:	18 c0       	rjmp	.+48     	; 0x28c6 <xTaskGenericNotify+0x8e>
    2896:	43 a5       	ldd	r20, Z+43	; 0x2b
    2898:	54 a5       	ldd	r21, Z+44	; 0x2c
    289a:	65 a5       	ldd	r22, Z+45	; 0x2d
    289c:	76 a5       	ldd	r23, Z+46	; 0x2e
    289e:	4f 5f       	subi	r20, 0xFF	; 255
    28a0:	5f 4f       	sbci	r21, 0xFF	; 255
    28a2:	6f 4f       	sbci	r22, 0xFF	; 255
    28a4:	7f 4f       	sbci	r23, 0xFF	; 255
    28a6:	43 a7       	std	Z+43, r20	; 0x2b
    28a8:	54 a7       	std	Z+44, r21	; 0x2c
    28aa:	65 a7       	std	Z+45, r22	; 0x2d
    28ac:	76 a7       	std	Z+46, r23	; 0x2e
    28ae:	0b c0       	rjmp	.+22     	; 0x28c6 <xTaskGenericNotify+0x8e>
    28b0:	43 a7       	std	Z+43, r20	; 0x2b
    28b2:	54 a7       	std	Z+44, r21	; 0x2c
    28b4:	65 a7       	std	Z+45, r22	; 0x2d
    28b6:	76 a7       	std	Z+46, r23	; 0x2e
    28b8:	06 c0       	rjmp	.+12     	; 0x28c6 <xTaskGenericNotify+0x8e>
    28ba:	82 30       	cpi	r24, 0x02	; 2
    28bc:	49 f1       	breq	.+82     	; 0x2910 <xTaskGenericNotify+0xd8>
    28be:	43 a7       	std	Z+43, r20	; 0x2b
    28c0:	54 a7       	std	Z+44, r21	; 0x2c
    28c2:	65 a7       	std	Z+45, r22	; 0x2d
    28c4:	76 a7       	std	Z+46, r23	; 0x2e
    28c6:	81 30       	cpi	r24, 0x01	; 1
    28c8:	29 f5       	brne	.+74     	; 0x2914 <xTaskGenericNotify+0xdc>
    28ca:	ef 01       	movw	r28, r30
    28cc:	8f 01       	movw	r16, r30
    28ce:	0e 5f       	subi	r16, 0xFE	; 254
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	c8 01       	movw	r24, r16
    28d4:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    28d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28da:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    28de:	98 17       	cp	r25, r24
    28e0:	10 f4       	brcc	.+4      	; 0x28e6 <xTaskGenericNotify+0xae>
    28e2:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
    28e6:	2b e0       	ldi	r18, 0x0B	; 11
    28e8:	82 9f       	mul	r24, r18
    28ea:	c0 01       	movw	r24, r0
    28ec:	11 24       	eor	r1, r1
    28ee:	b8 01       	movw	r22, r16
    28f0:	8e 5f       	subi	r24, 0xFE	; 254
    28f2:	97 4f       	sbci	r25, 0xF7	; 247
    28f4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    28f8:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    28fc:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2900:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2902:	82 8d       	ldd	r24, Z+26	; 0x1a
    2904:	89 17       	cp	r24, r25
    2906:	40 f4       	brcc	.+16     	; 0x2918 <xTaskGenericNotify+0xe0>
    2908:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vPortYield>
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	05 c0       	rjmp	.+10     	; 0x291a <xTaskGenericNotify+0xe2>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	03 c0       	rjmp	.+6      	; 0x291a <xTaskGenericNotify+0xe2>
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	01 c0       	rjmp	.+2      	; 0x291a <xTaskGenericNotify+0xe2>
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	0f 90       	pop	r0
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	08 95       	ret

00002928 <xTaskGenericNotifyFromISR>:
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	fc 01       	movw	r30, r24
    2936:	01 15       	cp	r16, r1
    2938:	11 05       	cpc	r17, r1
    293a:	49 f0       	breq	.+18     	; 0x294e <xTaskGenericNotifyFromISR+0x26>
    293c:	83 a5       	ldd	r24, Z+43	; 0x2b
    293e:	94 a5       	ldd	r25, Z+44	; 0x2c
    2940:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2942:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2944:	e8 01       	movw	r28, r16
    2946:	88 83       	st	Y, r24
    2948:	99 83       	std	Y+1, r25	; 0x01
    294a:	aa 83       	std	Y+2, r26	; 0x02
    294c:	bb 83       	std	Y+3, r27	; 0x03
    294e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2950:	92 e0       	ldi	r25, 0x02	; 2
    2952:	97 a7       	std	Z+47, r25	; 0x2f
    2954:	22 30       	cpi	r18, 0x02	; 2
    2956:	b1 f0       	breq	.+44     	; 0x2984 <xTaskGenericNotifyFromISR+0x5c>
    2958:	18 f4       	brcc	.+6      	; 0x2960 <xTaskGenericNotifyFromISR+0x38>
    295a:	21 30       	cpi	r18, 0x01	; 1
    295c:	31 f0       	breq	.+12     	; 0x296a <xTaskGenericNotifyFromISR+0x42>
    295e:	2a c0       	rjmp	.+84     	; 0x29b4 <xTaskGenericNotifyFromISR+0x8c>
    2960:	23 30       	cpi	r18, 0x03	; 3
    2962:	e9 f0       	breq	.+58     	; 0x299e <xTaskGenericNotifyFromISR+0x76>
    2964:	24 30       	cpi	r18, 0x04	; 4
    2966:	01 f1       	breq	.+64     	; 0x29a8 <xTaskGenericNotifyFromISR+0x80>
    2968:	25 c0       	rjmp	.+74     	; 0x29b4 <xTaskGenericNotifyFromISR+0x8c>
    296a:	03 a5       	ldd	r16, Z+43	; 0x2b
    296c:	14 a5       	ldd	r17, Z+44	; 0x2c
    296e:	25 a5       	ldd	r18, Z+45	; 0x2d
    2970:	36 a5       	ldd	r19, Z+46	; 0x2e
    2972:	40 2b       	or	r20, r16
    2974:	51 2b       	or	r21, r17
    2976:	62 2b       	or	r22, r18
    2978:	73 2b       	or	r23, r19
    297a:	43 a7       	std	Z+43, r20	; 0x2b
    297c:	54 a7       	std	Z+44, r21	; 0x2c
    297e:	65 a7       	std	Z+45, r22	; 0x2d
    2980:	76 a7       	std	Z+46, r23	; 0x2e
    2982:	18 c0       	rjmp	.+48     	; 0x29b4 <xTaskGenericNotifyFromISR+0x8c>
    2984:	43 a5       	ldd	r20, Z+43	; 0x2b
    2986:	54 a5       	ldd	r21, Z+44	; 0x2c
    2988:	65 a5       	ldd	r22, Z+45	; 0x2d
    298a:	76 a5       	ldd	r23, Z+46	; 0x2e
    298c:	4f 5f       	subi	r20, 0xFF	; 255
    298e:	5f 4f       	sbci	r21, 0xFF	; 255
    2990:	6f 4f       	sbci	r22, 0xFF	; 255
    2992:	7f 4f       	sbci	r23, 0xFF	; 255
    2994:	43 a7       	std	Z+43, r20	; 0x2b
    2996:	54 a7       	std	Z+44, r21	; 0x2c
    2998:	65 a7       	std	Z+45, r22	; 0x2d
    299a:	76 a7       	std	Z+46, r23	; 0x2e
    299c:	0b c0       	rjmp	.+22     	; 0x29b4 <xTaskGenericNotifyFromISR+0x8c>
    299e:	43 a7       	std	Z+43, r20	; 0x2b
    29a0:	54 a7       	std	Z+44, r21	; 0x2c
    29a2:	65 a7       	std	Z+45, r22	; 0x2d
    29a4:	76 a7       	std	Z+46, r23	; 0x2e
    29a6:	06 c0       	rjmp	.+12     	; 0x29b4 <xTaskGenericNotifyFromISR+0x8c>
    29a8:	82 30       	cpi	r24, 0x02	; 2
    29aa:	d9 f1       	breq	.+118    	; 0x2a22 <xTaskGenericNotifyFromISR+0xfa>
    29ac:	43 a7       	std	Z+43, r20	; 0x2b
    29ae:	54 a7       	std	Z+44, r21	; 0x2c
    29b0:	65 a7       	std	Z+45, r22	; 0x2d
    29b2:	76 a7       	std	Z+46, r23	; 0x2e
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	b9 f5       	brne	.+110    	; 0x2a26 <xTaskGenericNotifyFromISR+0xfe>
    29b8:	ef 01       	movw	r28, r30
    29ba:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    29be:	81 11       	cpse	r24, r1
    29c0:	17 c0       	rjmp	.+46     	; 0x29f0 <xTaskGenericNotifyFromISR+0xc8>
    29c2:	8f 01       	movw	r16, r30
    29c4:	0e 5f       	subi	r16, 0xFE	; 254
    29c6:	1f 4f       	sbci	r17, 0xFF	; 255
    29c8:	c8 01       	movw	r24, r16
    29ca:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
    29ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    29d0:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    29d4:	98 17       	cp	r25, r24
    29d6:	10 f4       	brcc	.+4      	; 0x29dc <xTaskGenericNotifyFromISR+0xb4>
    29d8:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
    29dc:	eb e0       	ldi	r30, 0x0B	; 11
    29de:	8e 9f       	mul	r24, r30
    29e0:	c0 01       	movw	r24, r0
    29e2:	11 24       	eor	r1, r1
    29e4:	b8 01       	movw	r22, r16
    29e6:	8e 5f       	subi	r24, 0xFE	; 254
    29e8:	97 4f       	sbci	r25, 0xF7	; 247
    29ea:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    29ee:	07 c0       	rjmp	.+14     	; 0x29fe <xTaskGenericNotifyFromISR+0xd6>
    29f0:	bf 01       	movw	r22, r30
    29f2:	62 5f       	subi	r22, 0xF2	; 242
    29f4:	7f 4f       	sbci	r23, 0xFF	; 255
    29f6:	8d ed       	ldi	r24, 0xDD	; 221
    29f8:	97 e0       	ldi	r25, 0x07	; 7
    29fa:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vListInsertEnd>
    29fe:	e0 91 2e 08 	lds	r30, 0x082E	; 0x80082e <pxCurrentTCB>
    2a02:	f0 91 2f 08 	lds	r31, 0x082F	; 0x80082f <pxCurrentTCB+0x1>
    2a06:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2a08:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a0a:	89 17       	cp	r24, r25
    2a0c:	70 f4       	brcc	.+28     	; 0x2a2a <xTaskGenericNotifyFromISR+0x102>
    2a0e:	e1 14       	cp	r14, r1
    2a10:	f1 04       	cpc	r15, r1
    2a12:	19 f0       	breq	.+6      	; 0x2a1a <xTaskGenericNotifyFromISR+0xf2>
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	e7 01       	movw	r28, r14
    2a18:	88 83       	st	Y, r24
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <xYieldPending>
    2a20:	05 c0       	rjmp	.+10     	; 0x2a2c <xTaskGenericNotifyFromISR+0x104>
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	03 c0       	rjmp	.+6      	; 0x2a2c <xTaskGenericNotifyFromISR+0x104>
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	01 c0       	rjmp	.+2      	; 0x2a2c <xTaskGenericNotifyFromISR+0x104>
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	1f 91       	pop	r17
    2a32:	0f 91       	pop	r16
    2a34:	ff 90       	pop	r15
    2a36:	ef 90       	pop	r14
    2a38:	08 95       	ret

00002a3a <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	21 f4       	brne	.+8      	; 0x2a46 <xTaskNotifyStateClear+0xc>
    2a3e:	80 91 2e 08 	lds	r24, 0x082E	; 0x80082e <pxCurrentTCB>
    2a42:	90 91 2f 08 	lds	r25, 0x082F	; 0x80082f <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	27 a5       	ldd	r18, Z+47	; 0x2f
    2a50:	22 30       	cpi	r18, 0x02	; 2
    2a52:	19 f4       	brne	.+6      	; 0x2a5a <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2a54:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	01 c0       	rjmp	.+2      	; 0x2a5c <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2a5c:	0f 90       	pop	r0
    2a5e:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2a60:	08 95       	ret

00002a62 <prvInsertTimerInActiveList>:
    2a62:	cf 92       	push	r12
    2a64:	df 92       	push	r13
    2a66:	ef 92       	push	r14
    2a68:	ff 92       	push	r15
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    2a6e:	fc 01       	movw	r30, r24
    2a70:	42 83       	std	Z+2, r20	; 0x02
    2a72:	53 83       	std	Z+3, r21	; 0x03
    2a74:	64 83       	std	Z+4, r22	; 0x04
    2a76:	75 83       	std	Z+5, r23	; 0x05
    2a78:	93 87       	std	Z+11, r25	; 0x0b
    2a7a:	82 87       	std	Z+10, r24	; 0x0a
    2a7c:	04 17       	cp	r16, r20
    2a7e:	15 07       	cpc	r17, r21
    2a80:	26 07       	cpc	r18, r22
    2a82:	37 07       	cpc	r19, r23
    2a84:	c0 f0       	brcs	.+48     	; 0x2ab6 <prvInsertTimerInActiveList+0x54>
    2a86:	0c 19       	sub	r16, r12
    2a88:	1d 09       	sbc	r17, r13
    2a8a:	2e 09       	sbc	r18, r14
    2a8c:	3f 09       	sbc	r19, r15
    2a8e:	86 85       	ldd	r24, Z+14	; 0x0e
    2a90:	97 85       	ldd	r25, Z+15	; 0x0f
    2a92:	a0 89       	ldd	r26, Z+16	; 0x10
    2a94:	b1 89       	ldd	r27, Z+17	; 0x11
    2a96:	08 17       	cp	r16, r24
    2a98:	19 07       	cpc	r17, r25
    2a9a:	2a 07       	cpc	r18, r26
    2a9c:	3b 07       	cpc	r19, r27
    2a9e:	00 f5       	brcc	.+64     	; 0x2ae0 <prvInsertTimerInActiveList+0x7e>
    2aa0:	bf 01       	movw	r22, r30
    2aa2:	6e 5f       	subi	r22, 0xFE	; 254
    2aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa6:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <pxOverflowTimerList>
    2aaa:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <pxOverflowTimerList+0x1>
    2aae:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vListInsert>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	18 c0       	rjmp	.+48     	; 0x2ae6 <prvInsertTimerInActiveList+0x84>
    2ab6:	0c 15       	cp	r16, r12
    2ab8:	1d 05       	cpc	r17, r13
    2aba:	2e 05       	cpc	r18, r14
    2abc:	3f 05       	cpc	r19, r15
    2abe:	28 f4       	brcc	.+10     	; 0x2aca <prvInsertTimerInActiveList+0x68>
    2ac0:	4c 15       	cp	r20, r12
    2ac2:	5d 05       	cpc	r21, r13
    2ac4:	6e 05       	cpc	r22, r14
    2ac6:	7f 05       	cpc	r23, r15
    2ac8:	68 f4       	brcc	.+26     	; 0x2ae4 <prvInsertTimerInActiveList+0x82>
    2aca:	bf 01       	movw	r22, r30
    2acc:	6e 5f       	subi	r22, 0xFE	; 254
    2ace:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad0:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <pxCurrentTimerList>
    2ad4:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <pxCurrentTimerList+0x1>
    2ad8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vListInsert>
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	03 c0       	rjmp	.+6      	; 0x2ae6 <prvInsertTimerInActiveList+0x84>
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	01 c0       	rjmp	.+2      	; 0x2ae6 <prvInsertTimerInActiveList+0x84>
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	ff 90       	pop	r15
    2aec:	ef 90       	pop	r14
    2aee:	df 90       	pop	r13
    2af0:	cf 90       	pop	r12
    2af2:	08 95       	ret

00002af4 <prvCheckForValidListAndQueue>:
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	0f 92       	push	r0
    2afa:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <xTimerQueue>
    2afe:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <xTimerQueue+0x1>
    2b02:	89 2b       	or	r24, r25
    2b04:	e9 f4       	brne	.+58     	; 0x2b40 <prvCheckForValidListAndQueue+0x4c>
    2b06:	87 e4       	ldi	r24, 0x47	; 71
    2b08:	98 e0       	ldi	r25, 0x08	; 8
    2b0a:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    2b0e:	8c e3       	ldi	r24, 0x3C	; 60
    2b10:	98 e0       	ldi	r25, 0x08	; 8
    2b12:	0e 94 a2 05 	call	0xb44	; 0xb44 <vListInitialise>
    2b16:	87 e4       	ldi	r24, 0x47	; 71
    2b18:	98 e0       	ldi	r25, 0x08	; 8
    2b1a:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <pxCurrentTimerList+0x1>
    2b1e:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <pxCurrentTimerList>
    2b22:	8c e3       	ldi	r24, 0x3C	; 60
    2b24:	98 e0       	ldi	r25, 0x08	; 8
    2b26:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <pxOverflowTimerList+0x1>
    2b2a:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <pxOverflowTimerList>
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	67 e0       	ldi	r22, 0x07	; 7
    2b32:	8a e0       	ldi	r24, 0x0A	; 10
    2b34:	0e 94 c6 08 	call	0x118c	; 0x118c <xQueueGenericCreate>
    2b38:	90 93 37 08 	sts	0x0837, r25	; 0x800837 <xTimerQueue+0x1>
    2b3c:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <xTimerQueue>
    2b40:	0f 90       	pop	r0
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	08 95       	ret

00002b46 <xTimerCreateTimerTask>:
    2b46:	ef 92       	push	r14
    2b48:	ff 92       	push	r15
    2b4a:	0f 93       	push	r16
    2b4c:	d3 df       	rcall	.-90     	; 0x2af4 <prvCheckForValidListAndQueue>
    2b4e:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <xTimerQueue>
    2b52:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <xTimerQueue+0x1>
    2b56:	89 2b       	or	r24, r25
    2b58:	89 f0       	breq	.+34     	; 0x2b7c <xTimerCreateTimerTask+0x36>
    2b5a:	0f 2e       	mov	r0, r31
    2b5c:	f4 e3       	ldi	r31, 0x34	; 52
    2b5e:	ef 2e       	mov	r14, r31
    2b60:	f8 e0       	ldi	r31, 0x08	; 8
    2b62:	ff 2e       	mov	r15, r31
    2b64:	f0 2d       	mov	r31, r0
    2b66:	06 e0       	ldi	r16, 0x06	; 6
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	45 e5       	ldi	r20, 0x55	; 85
    2b6e:	50 e0       	ldi	r21, 0x00	; 0
    2b70:	6d ec       	ldi	r22, 0xCD	; 205
    2b72:	74 e0       	ldi	r23, 0x04	; 4
    2b74:	83 e0       	ldi	r24, 0x03	; 3
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	7b d8       	rcall	.-3850   	; 0x1c70 <xTaskCreate>
    2b7a:	01 c0       	rjmp	.+2      	; 0x2b7e <xTimerCreateTimerTask+0x38>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	0f 91       	pop	r16
    2b80:	ff 90       	pop	r15
    2b82:	ef 90       	pop	r14
    2b84:	08 95       	ret

00002b86 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2b86:	8f 92       	push	r8
    2b88:	9f 92       	push	r9
    2b8a:	af 92       	push	r10
    2b8c:	bf 92       	push	r11
    2b8e:	cf 92       	push	r12
    2b90:	df 92       	push	r13
    2b92:	ef 92       	push	r14
    2b94:	ff 92       	push	r15
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	27 97       	sbiw	r28, 0x07	; 7
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2bae:	e0 91 36 08 	lds	r30, 0x0836	; 0x800836 <xTimerQueue>
    2bb2:	f0 91 37 08 	lds	r31, 0x0837	; 0x800837 <xTimerQueue+0x1>
    2bb6:	30 97       	sbiw	r30, 0x00	; 0
    2bb8:	81 f1       	breq	.+96     	; 0x2c1a <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2bba:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2bbc:	2a 83       	std	Y+2, r18	; 0x02
    2bbe:	3b 83       	std	Y+3, r19	; 0x03
    2bc0:	4c 83       	std	Y+4, r20	; 0x04
    2bc2:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2bc4:	9f 83       	std	Y+7, r25	; 0x07
    2bc6:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2bc8:	66 30       	cpi	r22, 0x06	; 6
    2bca:	f4 f4       	brge	.+60     	; 0x2c08 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2bcc:	91 dc       	rcall	.-1758   	; 0x24f0 <xTaskGetSchedulerState>
    2bce:	82 30       	cpi	r24, 0x02	; 2
    2bd0:	69 f4       	brne	.+26     	; 0x2bec <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2bd2:	00 e0       	ldi	r16, 0x00	; 0
    2bd4:	a7 01       	movw	r20, r14
    2bd6:	96 01       	movw	r18, r12
    2bd8:	be 01       	movw	r22, r28
    2bda:	6f 5f       	subi	r22, 0xFF	; 255
    2bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bde:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <xTimerQueue>
    2be2:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <xTimerQueue+0x1>
    2be6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <xQueueGenericSend>
    2bea:	18 c0       	rjmp	.+48     	; 0x2c1c <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2bec:	00 e0       	ldi	r16, 0x00	; 0
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	a9 01       	movw	r20, r18
    2bf4:	be 01       	movw	r22, r28
    2bf6:	6f 5f       	subi	r22, 0xFF	; 255
    2bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfa:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <xTimerQueue>
    2bfe:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <xTimerQueue+0x1>
    2c02:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <xQueueGenericSend>
    2c06:	0a c0       	rjmp	.+20     	; 0x2c1c <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	a8 01       	movw	r20, r16
    2c0c:	be 01       	movw	r22, r28
    2c0e:	6f 5f       	subi	r22, 0xFF	; 255
    2c10:	7f 4f       	sbci	r23, 0xFF	; 255
    2c12:	cf 01       	movw	r24, r30
    2c14:	0e 94 af 09 	call	0x135e	; 0x135e <xQueueGenericSendFromISR>
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2c1c:	27 96       	adiw	r28, 0x07	; 7
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	df 90       	pop	r13
    2c36:	cf 90       	pop	r12
    2c38:	bf 90       	pop	r11
    2c3a:	af 90       	pop	r10
    2c3c:	9f 90       	pop	r9
    2c3e:	8f 90       	pop	r8
    2c40:	08 95       	ret

00002c42 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2c42:	2f 92       	push	r2
    2c44:	3f 92       	push	r3
    2c46:	4f 92       	push	r4
    2c48:	5f 92       	push	r5
    2c4a:	6f 92       	push	r6
    2c4c:	7f 92       	push	r7
    2c4e:	8f 92       	push	r8
    2c50:	9f 92       	push	r9
    2c52:	af 92       	push	r10
    2c54:	bf 92       	push	r11
    2c56:	cf 92       	push	r12
    2c58:	df 92       	push	r13
    2c5a:	ef 92       	push	r14
    2c5c:	ff 92       	push	r15
    2c5e:	0f 93       	push	r16
    2c60:	1f 93       	push	r17
    2c62:	cf 93       	push	r28
    2c64:	df 93       	push	r29
    2c66:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2c68:	64 d9       	rcall	.-3384   	; 0x1f32 <xTaskGetTickCount>
    2c6a:	2b 01       	movw	r4, r22
    2c6c:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    2c6e:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <xLastTime.2432>
    2c72:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <xLastTime.2432+0x1>
    2c76:	a0 91 32 08 	lds	r26, 0x0832	; 0x800832 <xLastTime.2432+0x2>
    2c7a:	b0 91 33 08 	lds	r27, 0x0833	; 0x800833 <xLastTime.2432+0x3>
    2c7e:	48 16       	cp	r4, r24
    2c80:	59 06       	cpc	r5, r25
    2c82:	6a 06       	cpc	r6, r26
    2c84:	7b 06       	cpc	r7, r27
    2c86:	08 f0       	brcs	.+2      	; 0x2c8a <prvSampleTimeNow+0x48>
    2c88:	53 c0       	rjmp	.+166    	; 0x2d30 <prvSampleTimeNow+0xee>
    2c8a:	3b c0       	rjmp	.+118    	; 0x2d02 <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2c8c:	07 80       	ldd	r0, Z+7	; 0x07
    2c8e:	f0 85       	ldd	r31, Z+8	; 0x08
    2c90:	e0 2d       	mov	r30, r0
    2c92:	80 80       	ld	r8, Z
    2c94:	91 80       	ldd	r9, Z+1	; 0x01
    2c96:	a2 80       	ldd	r10, Z+2	; 0x02
    2c98:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c9a:	c0 85       	ldd	r28, Z+8	; 0x08
    2c9c:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c9e:	8e 01       	movw	r16, r28
    2ca0:	0e 5f       	subi	r16, 0xFE	; 254
    2ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca4:	c8 01       	movw	r24, r16
    2ca6:	0e 94 15 06 	call	0xc2a	; 0xc2a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2caa:	ec 89       	ldd	r30, Y+20	; 0x14
    2cac:	fd 89       	ldd	r31, Y+21	; 0x15
    2cae:	ce 01       	movw	r24, r28
    2cb0:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb4:	82 ff       	sbrs	r24, 2
    2cb6:	25 c0       	rjmp	.+74     	; 0x2d02 <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2cb8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cba:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cbc:	a8 89       	ldd	r26, Y+16	; 0x10
    2cbe:	b9 89       	ldd	r27, Y+17	; 0x11
    2cc0:	88 0d       	add	r24, r8
    2cc2:	99 1d       	adc	r25, r9
    2cc4:	aa 1d       	adc	r26, r10
    2cc6:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    2cc8:	88 16       	cp	r8, r24
    2cca:	99 06       	cpc	r9, r25
    2ccc:	aa 06       	cpc	r10, r26
    2cce:	bb 06       	cpc	r11, r27
    2cd0:	70 f4       	brcc	.+28     	; 0x2cee <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2cd2:	8a 83       	std	Y+2, r24	; 0x02
    2cd4:	9b 83       	std	Y+3, r25	; 0x03
    2cd6:	ac 83       	std	Y+4, r26	; 0x04
    2cd8:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2cda:	db 87       	std	Y+11, r29	; 0x0b
    2cdc:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2cde:	b8 01       	movw	r22, r16
    2ce0:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <pxCurrentTimerList>
    2ce4:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <pxCurrentTimerList+0x1>
    2ce8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <vListInsert>
    2cec:	0a c0       	rjmp	.+20     	; 0x2d02 <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2cee:	c1 2c       	mov	r12, r1
    2cf0:	d1 2c       	mov	r13, r1
    2cf2:	76 01       	movw	r14, r12
    2cf4:	00 e0       	ldi	r16, 0x00	; 0
    2cf6:	10 e0       	ldi	r17, 0x00	; 0
    2cf8:	a5 01       	movw	r20, r10
    2cfa:	94 01       	movw	r18, r8
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	ce 01       	movw	r24, r28
    2d00:	42 df       	rcall	.-380    	; 0x2b86 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2d02:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <pxCurrentTimerList>
    2d06:	f0 91 3b 08 	lds	r31, 0x083B	; 0x80083b <pxCurrentTimerList+0x1>
    2d0a:	80 81       	ld	r24, Z
    2d0c:	81 11       	cpse	r24, r1
    2d0e:	be cf       	rjmp	.-132    	; 0x2c8c <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2d10:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <pxOverflowTimerList>
    2d14:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <pxOverflowTimerList+0x1>
    2d18:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <pxCurrentTimerList+0x1>
    2d1c:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2d20:	f0 93 39 08 	sts	0x0839, r31	; 0x800839 <pxOverflowTimerList+0x1>
    2d24:	e0 93 38 08 	sts	0x0838, r30	; 0x800838 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	f1 01       	movw	r30, r2
    2d2c:	80 83       	st	Z, r24
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2d30:	f1 01       	movw	r30, r2
    2d32:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2d34:	40 92 30 08 	sts	0x0830, r4	; 0x800830 <xLastTime.2432>
    2d38:	50 92 31 08 	sts	0x0831, r5	; 0x800831 <xLastTime.2432+0x1>
    2d3c:	60 92 32 08 	sts	0x0832, r6	; 0x800832 <xLastTime.2432+0x2>
    2d40:	70 92 33 08 	sts	0x0833, r7	; 0x800833 <xLastTime.2432+0x3>

    return xTimeNow;
}
    2d44:	c3 01       	movw	r24, r6
    2d46:	b2 01       	movw	r22, r4
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	ff 90       	pop	r15
    2d52:	ef 90       	pop	r14
    2d54:	df 90       	pop	r13
    2d56:	cf 90       	pop	r12
    2d58:	bf 90       	pop	r11
    2d5a:	af 90       	pop	r10
    2d5c:	9f 90       	pop	r9
    2d5e:	8f 90       	pop	r8
    2d60:	7f 90       	pop	r7
    2d62:	6f 90       	pop	r6
    2d64:	5f 90       	pop	r5
    2d66:	4f 90       	pop	r4
    2d68:	3f 90       	pop	r3
    2d6a:	2f 90       	pop	r2
    2d6c:	08 95       	ret

00002d6e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2d6e:	08 95       	ret

00002d70 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2d70:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2d72:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d74:	2f ef       	ldi	r18, 0xFF	; 255
    2d76:	80 e7       	ldi	r24, 0x70	; 112
    2d78:	92 e0       	ldi	r25, 0x02	; 2
    2d7a:	21 50       	subi	r18, 0x01	; 1
    2d7c:	80 40       	sbci	r24, 0x00	; 0
    2d7e:	90 40       	sbci	r25, 0x00	; 0
    2d80:	e1 f7       	brne	.-8      	; 0x2d7a <vApplicationMallocFailedHook+0xa>
    2d82:	00 c0       	rjmp	.+0      	; 0x2d84 <vApplicationMallocFailedHook+0x14>
    2d84:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2d86:	1f 9a       	sbi	0x03, 7	; 3
    2d88:	f5 cf       	rjmp	.-22     	; 0x2d74 <vApplicationMallocFailedHook+0x4>

00002d8a <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2d8a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2d8c:	2f 9a       	sbi	0x05, 7	; 5
    2d8e:	2f ef       	ldi	r18, 0xFF	; 255
    2d90:	87 ea       	ldi	r24, 0xA7	; 167
    2d92:	91 e6       	ldi	r25, 0x61	; 97
    2d94:	21 50       	subi	r18, 0x01	; 1
    2d96:	80 40       	sbci	r24, 0x00	; 0
    2d98:	90 40       	sbci	r25, 0x00	; 0
    2d9a:	e1 f7       	brne	.-8      	; 0x2d94 <vApplicationStackOverflowHook+0xa>
    2d9c:	00 c0       	rjmp	.+0      	; 0x2d9e <vApplicationStackOverflowHook+0x14>
    2d9e:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2da0:	1f 9a       	sbi	0x03, 7	; 3
    2da2:	f5 cf       	rjmp	.-22     	; 0x2d8e <vApplicationStackOverflowHook+0x4>

00002da4 <__fixsfsi>:
    2da4:	04 d0       	rcall	.+8      	; 0x2dae <__fixunssfsi>
    2da6:	68 94       	set
    2da8:	b1 11       	cpse	r27, r1
    2daa:	50 c0       	rjmp	.+160    	; 0x2e4c <__fp_szero>
    2dac:	08 95       	ret

00002dae <__fixunssfsi>:
    2dae:	33 d0       	rcall	.+102    	; 0x2e16 <__fp_splitA>
    2db0:	88 f0       	brcs	.+34     	; 0x2dd4 <__fixunssfsi+0x26>
    2db2:	9f 57       	subi	r25, 0x7F	; 127
    2db4:	90 f0       	brcs	.+36     	; 0x2dda <__fixunssfsi+0x2c>
    2db6:	b9 2f       	mov	r27, r25
    2db8:	99 27       	eor	r25, r25
    2dba:	b7 51       	subi	r27, 0x17	; 23
    2dbc:	a0 f0       	brcs	.+40     	; 0x2de6 <__fixunssfsi+0x38>
    2dbe:	d1 f0       	breq	.+52     	; 0x2df4 <__fixunssfsi+0x46>
    2dc0:	66 0f       	add	r22, r22
    2dc2:	77 1f       	adc	r23, r23
    2dc4:	88 1f       	adc	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	1a f0       	brmi	.+6      	; 0x2dd0 <__fixunssfsi+0x22>
    2dca:	ba 95       	dec	r27
    2dcc:	c9 f7       	brne	.-14     	; 0x2dc0 <__fixunssfsi+0x12>
    2dce:	12 c0       	rjmp	.+36     	; 0x2df4 <__fixunssfsi+0x46>
    2dd0:	b1 30       	cpi	r27, 0x01	; 1
    2dd2:	81 f0       	breq	.+32     	; 0x2df4 <__fixunssfsi+0x46>
    2dd4:	3a d0       	rcall	.+116    	; 0x2e4a <__fp_zero>
    2dd6:	b1 e0       	ldi	r27, 0x01	; 1
    2dd8:	08 95       	ret
    2dda:	37 c0       	rjmp	.+110    	; 0x2e4a <__fp_zero>
    2ddc:	67 2f       	mov	r22, r23
    2dde:	78 2f       	mov	r23, r24
    2de0:	88 27       	eor	r24, r24
    2de2:	b8 5f       	subi	r27, 0xF8	; 248
    2de4:	39 f0       	breq	.+14     	; 0x2df4 <__fixunssfsi+0x46>
    2de6:	b9 3f       	cpi	r27, 0xF9	; 249
    2de8:	cc f3       	brlt	.-14     	; 0x2ddc <__fixunssfsi+0x2e>
    2dea:	86 95       	lsr	r24
    2dec:	77 95       	ror	r23
    2dee:	67 95       	ror	r22
    2df0:	b3 95       	inc	r27
    2df2:	d9 f7       	brne	.-10     	; 0x2dea <__fixunssfsi+0x3c>
    2df4:	3e f4       	brtc	.+14     	; 0x2e04 <__fixunssfsi+0x56>
    2df6:	90 95       	com	r25
    2df8:	80 95       	com	r24
    2dfa:	70 95       	com	r23
    2dfc:	61 95       	neg	r22
    2dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2e00:	8f 4f       	sbci	r24, 0xFF	; 255
    2e02:	9f 4f       	sbci	r25, 0xFF	; 255
    2e04:	08 95       	ret

00002e06 <__fp_split3>:
    2e06:	57 fd       	sbrc	r21, 7
    2e08:	90 58       	subi	r25, 0x80	; 128
    2e0a:	44 0f       	add	r20, r20
    2e0c:	55 1f       	adc	r21, r21
    2e0e:	59 f0       	breq	.+22     	; 0x2e26 <__fp_splitA+0x10>
    2e10:	5f 3f       	cpi	r21, 0xFF	; 255
    2e12:	71 f0       	breq	.+28     	; 0x2e30 <__fp_splitA+0x1a>
    2e14:	47 95       	ror	r20

00002e16 <__fp_splitA>:
    2e16:	88 0f       	add	r24, r24
    2e18:	97 fb       	bst	r25, 7
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	61 f0       	breq	.+24     	; 0x2e36 <__fp_splitA+0x20>
    2e1e:	9f 3f       	cpi	r25, 0xFF	; 255
    2e20:	79 f0       	breq	.+30     	; 0x2e40 <__fp_splitA+0x2a>
    2e22:	87 95       	ror	r24
    2e24:	08 95       	ret
    2e26:	12 16       	cp	r1, r18
    2e28:	13 06       	cpc	r1, r19
    2e2a:	14 06       	cpc	r1, r20
    2e2c:	55 1f       	adc	r21, r21
    2e2e:	f2 cf       	rjmp	.-28     	; 0x2e14 <__fp_split3+0xe>
    2e30:	46 95       	lsr	r20
    2e32:	f1 df       	rcall	.-30     	; 0x2e16 <__fp_splitA>
    2e34:	08 c0       	rjmp	.+16     	; 0x2e46 <__fp_splitA+0x30>
    2e36:	16 16       	cp	r1, r22
    2e38:	17 06       	cpc	r1, r23
    2e3a:	18 06       	cpc	r1, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	f1 cf       	rjmp	.-30     	; 0x2e22 <__fp_splitA+0xc>
    2e40:	86 95       	lsr	r24
    2e42:	71 05       	cpc	r23, r1
    2e44:	61 05       	cpc	r22, r1
    2e46:	08 94       	sec
    2e48:	08 95       	ret

00002e4a <__fp_zero>:
    2e4a:	e8 94       	clt

00002e4c <__fp_szero>:
    2e4c:	bb 27       	eor	r27, r27
    2e4e:	66 27       	eor	r22, r22
    2e50:	77 27       	eor	r23, r23
    2e52:	cb 01       	movw	r24, r22
    2e54:	97 f9       	bld	r25, 7
    2e56:	08 95       	ret

00002e58 <usart_getchar>:
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	1f 92       	push	r1
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    2e62:	be 01       	movw	r22, r28
    2e64:	6f 5f       	subi	r22, 0xFF	; 255
    2e66:	7f 4f       	sbci	r23, 0xFF	; 255
    2e68:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <_com_serial_instance>
    2e6c:	90 91 53 08 	lds	r25, 0x0853	; 0x800853 <_com_serial_instance+0x1>
    2e70:	4e d1       	rcall	.+668    	; 0x310e <serial_get_byte>
    2e72:	81 11       	cpse	r24, r1
    2e74:	f6 cf       	rjmp	.-20     	; 0x2e62 <usart_getchar+0xa>
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0f 90       	pop	r0
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	08 95       	ret

00002e82 <usart_putchar>:
    2e82:	68 2f       	mov	r22, r24
    2e84:	80 91 52 08 	lds	r24, 0x0852	; 0x800852 <_com_serial_instance>
    2e88:	90 91 53 08 	lds	r25, 0x0853	; 0x800853 <_com_serial_instance+0x1>
    2e8c:	cb d0       	rcall	.+406    	; 0x3024 <serial_send_byte>
    2e8e:	80 e0       	ldi	r24, 0x00	; 0
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	08 95       	ret

00002e94 <stdioCreate>:
    2e94:	8f 92       	push	r8
    2e96:	9f 92       	push	r9
    2e98:	af 92       	push	r10
    2e9a:	cf 92       	push	r12
    2e9c:	ef 92       	push	r14
    2e9e:	0f 93       	push	r16
    2ea0:	81 2c       	mov	r8, r1
    2ea2:	91 2c       	mov	r9, r1
    2ea4:	68 94       	set
    2ea6:	aa 24       	eor	r10, r10
    2ea8:	a7 f8       	bld	r10, 7
    2eaa:	68 94       	set
    2eac:	cc 24       	eor	r12, r12
    2eae:	c7 f8       	bld	r12, 7
    2eb0:	e1 2c       	mov	r14, r1
    2eb2:	00 e0       	ldi	r16, 0x00	; 0
    2eb4:	23 e0       	ldi	r18, 0x03	; 3
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	51 ee       	ldi	r21, 0xE1	; 225
    2eba:	60 e0       	ldi	r22, 0x00	; 0
    2ebc:	70 e0       	ldi	r23, 0x00	; 0
    2ebe:	13 d0       	rcall	.+38     	; 0x2ee6 <serial_new_instance>
    2ec0:	90 93 53 08 	sts	0x0853, r25	; 0x800853 <_com_serial_instance+0x1>
    2ec4:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <_com_serial_instance>
    2ec8:	e8 e4       	ldi	r30, 0x48	; 72
    2eca:	fa e0       	ldi	r31, 0x0A	; 10
    2ecc:	86 e0       	ldi	r24, 0x06	; 6
    2ece:	92 e0       	ldi	r25, 0x02	; 2
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
    2ed4:	93 83       	std	Z+3, r25	; 0x03
    2ed6:	82 83       	std	Z+2, r24	; 0x02
    2ed8:	0f 91       	pop	r16
    2eda:	ef 90       	pop	r14
    2edc:	cf 90       	pop	r12
    2ede:	af 90       	pop	r10
    2ee0:	9f 90       	pop	r9
    2ee2:	8f 90       	pop	r8
    2ee4:	08 95       	ret

00002ee6 <serial_new_instance>:
    2ee6:	2f 92       	push	r2
    2ee8:	3f 92       	push	r3
    2eea:	4f 92       	push	r4
    2eec:	5f 92       	push	r5
    2eee:	6f 92       	push	r6
    2ef0:	7f 92       	push	r7
    2ef2:	8f 92       	push	r8
    2ef4:	9f 92       	push	r9
    2ef6:	af 92       	push	r10
    2ef8:	cf 92       	push	r12
    2efa:	ef 92       	push	r14
    2efc:	ff 92       	push	r15
    2efe:	0f 93       	push	r16
    2f00:	1f 93       	push	r17
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	f8 2e       	mov	r15, r24
    2f0c:	2a 01       	movw	r4, r20
    2f0e:	3b 01       	movw	r6, r22
    2f10:	88 e0       	ldi	r24, 0x08	; 8
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <malloc>
    2f18:	8c 01       	movw	r16, r24
    2f1a:	8f 2d       	mov	r24, r15
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	fc 01       	movw	r30, r24
    2f24:	ec 5a       	subi	r30, 0xAC	; 172
    2f26:	f7 4f       	sbci	r31, 0xF7	; 247
    2f28:	11 83       	std	Z+1, r17	; 0x01
    2f2a:	00 83       	st	Z, r16
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	ec 5e       	subi	r30, 0xEC	; 236
    2f30:	fd 4f       	sbci	r31, 0xFD	; 253
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	d8 01       	movw	r26, r16
    2f38:	8d 93       	st	X+, r24
    2f3a:	9c 93       	st	X, r25
    2f3c:	6c 2d       	mov	r22, r12
    2f3e:	70 e0       	ldi	r23, 0x00	; 0
    2f40:	84 e0       	ldi	r24, 0x04	; 4
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <calloc>
    2f48:	1c 01       	movw	r2, r24
    2f4a:	61 e0       	ldi	r22, 0x01	; 1
    2f4c:	70 e0       	ldi	r23, 0x00	; 0
    2f4e:	86 e0       	ldi	r24, 0x06	; 6
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <calloc>
    2f56:	7c 01       	movw	r14, r24
    2f58:	4c 2d       	mov	r20, r12
    2f5a:	b1 01       	movw	r22, r2
    2f5c:	4c d3       	rcall	.+1688   	; 0x35f6 <fifo_init>
    2f5e:	f8 01       	movw	r30, r16
    2f60:	f5 82       	std	Z+5, r15	; 0x05
    2f62:	e4 82       	std	Z+4, r14	; 0x04
    2f64:	6a 2d       	mov	r22, r10
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	84 e0       	ldi	r24, 0x04	; 4
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <calloc>
    2f70:	1c 01       	movw	r2, r24
    2f72:	61 e0       	ldi	r22, 0x01	; 1
    2f74:	70 e0       	ldi	r23, 0x00	; 0
    2f76:	86 e0       	ldi	r24, 0x06	; 6
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <calloc>
    2f7e:	7c 01       	movw	r14, r24
    2f80:	4a 2d       	mov	r20, r10
    2f82:	b1 01       	movw	r22, r2
    2f84:	38 d3       	rcall	.+1648   	; 0x35f6 <fifo_init>
    2f86:	d8 01       	movw	r26, r16
    2f88:	13 96       	adiw	r26, 0x03	; 3
    2f8a:	fc 92       	st	X, r15
    2f8c:	ee 92       	st	-X, r14
    2f8e:	12 97       	sbiw	r26, 0x02	; 2
    2f90:	17 96       	adiw	r26, 0x07	; 7
    2f92:	9c 92       	st	X, r9
    2f94:	8e 92       	st	-X, r8
    2f96:	16 97       	sbiw	r26, 0x06	; 6
    2f98:	ff b6       	in	r15, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	ed 91       	ld	r30, X+
    2f9e:	fc 91       	ld	r31, X
    2fa0:	11 97       	sbiw	r26, 0x01	; 1
    2fa2:	36 97       	sbiw	r30, 0x06	; 6
    2fa4:	80 81       	ld	r24, Z
    2fa6:	82 60       	ori	r24, 0x02	; 2
    2fa8:	80 83       	st	Z, r24
    2faa:	8d 90       	ld	r8, X+
    2fac:	9c 90       	ld	r9, X
    2fae:	c3 01       	movw	r24, r6
    2fb0:	b2 01       	movw	r22, r4
    2fb2:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__floatunsisf>
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	40 e0       	ldi	r20, 0x00	; 0
    2fbc:	51 e4       	ldi	r21, 0x41	; 65
    2fbe:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    2fc2:	9b 01       	movw	r18, r22
    2fc4:	ac 01       	movw	r20, r24
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	74 e2       	ldi	r23, 0x24	; 36
    2fca:	84 e7       	ldi	r24, 0x74	; 116
    2fcc:	9b e4       	ldi	r25, 0x4B	; 75
    2fce:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__divsf3>
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e8       	ldi	r20, 0x80	; 128
    2fd8:	5f e3       	ldi	r21, 0x3F	; 63
    2fda:	0e 94 3f 25 	call	0x4a7e	; 0x4a7e <__subsf3>
    2fde:	e7 de       	rcall	.-562    	; 0x2dae <__fixunssfsi>
    2fe0:	f4 01       	movw	r30, r8
    2fe2:	32 97       	sbiw	r30, 0x02	; 2
    2fe4:	60 83       	st	Z, r22
    2fe6:	d8 01       	movw	r26, r16
    2fe8:	ed 91       	ld	r30, X+
    2fea:	fc 91       	ld	r31, X
    2fec:	11 97       	sbiw	r26, 0x01	; 1
    2fee:	35 97       	sbiw	r30, 0x05	; 5
    2ff0:	88 e9       	ldi	r24, 0x98	; 152
    2ff2:	80 83       	st	Z, r24
    2ff4:	ed 91       	ld	r30, X+
    2ff6:	fc 91       	ld	r31, X
    2ff8:	34 97       	sbiw	r30, 0x04	; 4
    2ffa:	86 e0       	ldi	r24, 0x06	; 6
    2ffc:	80 83       	st	Z, r24
    2ffe:	ff be       	out	0x3f, r15	; 63
    3000:	c8 01       	movw	r24, r16
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	ff 90       	pop	r15
    300c:	ef 90       	pop	r14
    300e:	cf 90       	pop	r12
    3010:	af 90       	pop	r10
    3012:	9f 90       	pop	r9
    3014:	8f 90       	pop	r8
    3016:	7f 90       	pop	r7
    3018:	6f 90       	pop	r6
    301a:	5f 90       	pop	r5
    301c:	4f 90       	pop	r4
    301e:	3f 90       	pop	r3
    3020:	2f 90       	pop	r2
    3022:	08 95       	ret

00003024 <serial_send_byte>:
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	ec 01       	movw	r28, r24
    302a:	ea 81       	ldd	r30, Y+2	; 0x02
    302c:	fb 81       	ldd	r31, Y+3	; 0x03
    302e:	93 81       	ldd	r25, Z+3	; 0x03
    3030:	82 81       	ldd	r24, Z+2	; 0x02
    3032:	25 81       	ldd	r18, Z+5	; 0x05
    3034:	98 1b       	sub	r25, r24
    3036:	92 23       	and	r25, r18
    3038:	84 81       	ldd	r24, Z+4	; 0x04
    303a:	98 17       	cp	r25, r24
    303c:	a1 f0       	breq	.+40     	; 0x3066 <serial_send_byte+0x42>
    303e:	93 81       	ldd	r25, Z+3	; 0x03
    3040:	26 95       	lsr	r18
    3042:	29 23       	and	r18, r25
    3044:	a0 81       	ld	r26, Z
    3046:	b1 81       	ldd	r27, Z+1	; 0x01
    3048:	a2 0f       	add	r26, r18
    304a:	b1 1d       	adc	r27, r1
    304c:	6c 93       	st	X, r22
    304e:	9f 5f       	subi	r25, 0xFF	; 255
    3050:	25 81       	ldd	r18, Z+5	; 0x05
    3052:	92 23       	and	r25, r18
    3054:	93 83       	std	Z+3, r25	; 0x03
    3056:	e8 81       	ld	r30, Y
    3058:	f9 81       	ldd	r31, Y+1	; 0x01
    305a:	35 97       	sbiw	r30, 0x05	; 5
    305c:	80 81       	ld	r24, Z
    305e:	80 62       	ori	r24, 0x20	; 32
    3060:	80 83       	st	Z, r24
    3062:	80 e0       	ldi	r24, 0x00	; 0
    3064:	01 c0       	rjmp	.+2      	; 0x3068 <serial_send_byte+0x44>
    3066:	82 e0       	ldi	r24, 0x02	; 2
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	08 95       	ret

0000306e <serial_send_bytes>:
    306e:	ef 92       	push	r14
    3070:	ff 92       	push	r15
    3072:	0f 93       	push	r16
    3074:	1f 93       	push	r17
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	7c 01       	movw	r14, r24
    307c:	dc 01       	movw	r26, r24
    307e:	12 96       	adiw	r26, 0x02	; 2
    3080:	ed 91       	ld	r30, X+
    3082:	fc 91       	ld	r31, X
    3084:	13 97       	sbiw	r26, 0x03	; 3
    3086:	93 81       	ldd	r25, Z+3	; 0x03
    3088:	82 81       	ldd	r24, Z+2	; 0x02
    308a:	98 1b       	sub	r25, r24
    308c:	85 81       	ldd	r24, Z+5	; 0x05
    308e:	98 23       	and	r25, r24
    3090:	84 81       	ldd	r24, Z+4	; 0x04
    3092:	89 1b       	sub	r24, r25
    3094:	86 17       	cp	r24, r22
    3096:	98 f1       	brcs	.+102    	; 0x30fe <serial_send_bytes+0x90>
    3098:	66 23       	and	r22, r22
    309a:	41 f1       	breq	.+80     	; 0x30ec <serial_send_bytes+0x7e>
    309c:	84 2f       	mov	r24, r20
    309e:	95 2f       	mov	r25, r21
    30a0:	dc 01       	movw	r26, r24
    30a2:	61 50       	subi	r22, 0x01	; 1
    30a4:	46 2f       	mov	r20, r22
    30a6:	50 e0       	ldi	r21, 0x00	; 0
    30a8:	4f 5f       	subi	r20, 0xFF	; 255
    30aa:	5f 4f       	sbci	r21, 0xFF	; 255
    30ac:	48 0f       	add	r20, r24
    30ae:	59 1f       	adc	r21, r25
    30b0:	e7 01       	movw	r28, r14
    30b2:	ea 81       	ldd	r30, Y+2	; 0x02
    30b4:	fb 81       	ldd	r31, Y+3	; 0x03
    30b6:	93 81       	ldd	r25, Z+3	; 0x03
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	25 81       	ldd	r18, Z+5	; 0x05
    30bc:	98 1b       	sub	r25, r24
    30be:	92 23       	and	r25, r18
    30c0:	84 81       	ldd	r24, Z+4	; 0x04
    30c2:	98 17       	cp	r25, r24
    30c4:	79 f0       	breq	.+30     	; 0x30e4 <serial_send_bytes+0x76>
    30c6:	8c 91       	ld	r24, X
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	26 95       	lsr	r18
    30cc:	29 23       	and	r18, r25
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	8b 01       	movw	r16, r22
    30d4:	02 0f       	add	r16, r18
    30d6:	11 1d       	adc	r17, r1
    30d8:	e8 01       	movw	r28, r16
    30da:	88 83       	st	Y, r24
    30dc:	9f 5f       	subi	r25, 0xFF	; 255
    30de:	85 81       	ldd	r24, Z+5	; 0x05
    30e0:	98 23       	and	r25, r24
    30e2:	93 83       	std	Z+3, r25	; 0x03
    30e4:	11 96       	adiw	r26, 0x01	; 1
    30e6:	a4 17       	cp	r26, r20
    30e8:	b5 07       	cpc	r27, r21
    30ea:	11 f7       	brne	.-60     	; 0x30b0 <serial_send_bytes+0x42>
    30ec:	d7 01       	movw	r26, r14
    30ee:	ed 91       	ld	r30, X+
    30f0:	fc 91       	ld	r31, X
    30f2:	35 97       	sbiw	r30, 0x05	; 5
    30f4:	80 81       	ld	r24, Z
    30f6:	80 62       	ori	r24, 0x20	; 32
    30f8:	80 83       	st	Z, r24
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	01 c0       	rjmp	.+2      	; 0x3100 <serial_send_bytes+0x92>
    30fe:	82 e0       	ldi	r24, 0x02	; 2
    3100:	df 91       	pop	r29
    3102:	cf 91       	pop	r28
    3104:	1f 91       	pop	r17
    3106:	0f 91       	pop	r16
    3108:	ff 90       	pop	r15
    310a:	ef 90       	pop	r14
    310c:	08 95       	ret

0000310e <serial_get_byte>:
    310e:	dc 01       	movw	r26, r24
    3110:	14 96       	adiw	r26, 0x04	; 4
    3112:	ed 91       	ld	r30, X+
    3114:	fc 91       	ld	r31, X
    3116:	15 97       	sbiw	r26, 0x05	; 5
    3118:	93 81       	ldd	r25, Z+3	; 0x03
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	98 17       	cp	r25, r24
    311e:	89 f0       	breq	.+34     	; 0x3142 <serial_get_byte+0x34>
    3120:	92 81       	ldd	r25, Z+2	; 0x02
    3122:	85 81       	ldd	r24, Z+5	; 0x05
    3124:	86 95       	lsr	r24
    3126:	89 23       	and	r24, r25
    3128:	a0 81       	ld	r26, Z
    312a:	b1 81       	ldd	r27, Z+1	; 0x01
    312c:	a8 0f       	add	r26, r24
    312e:	b1 1d       	adc	r27, r1
    3130:	8c 91       	ld	r24, X
    3132:	db 01       	movw	r26, r22
    3134:	8c 93       	st	X, r24
    3136:	9f 5f       	subi	r25, 0xFF	; 255
    3138:	85 81       	ldd	r24, Z+5	; 0x05
    313a:	98 23       	and	r25, r24
    313c:	92 83       	std	Z+2, r25	; 0x02
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	08 95       	ret
    3142:	83 e0       	ldi	r24, 0x03	; 3
    3144:	08 95       	ret

00003146 <__vector_25>:
    3146:	1f 92       	push	r1
    3148:	0f 92       	push	r0
    314a:	0f b6       	in	r0, 0x3f	; 63
    314c:	0f 92       	push	r0
    314e:	11 24       	eor	r1, r1
    3150:	0b b6       	in	r0, 0x3b	; 59
    3152:	0f 92       	push	r0
    3154:	2f 93       	push	r18
    3156:	3f 93       	push	r19
    3158:	4f 93       	push	r20
    315a:	5f 93       	push	r21
    315c:	6f 93       	push	r22
    315e:	7f 93       	push	r23
    3160:	8f 93       	push	r24
    3162:	9f 93       	push	r25
    3164:	af 93       	push	r26
    3166:	bf 93       	push	r27
    3168:	cf 93       	push	r28
    316a:	df 93       	push	r29
    316c:	ef 93       	push	r30
    316e:	ff 93       	push	r31
    3170:	a0 91 54 08 	lds	r26, 0x0854	; 0x800854 <_ser_handle>
    3174:	b0 91 55 08 	lds	r27, 0x0855	; 0x800855 <_ser_handle+0x1>
    3178:	10 97       	sbiw	r26, 0x00	; 0
    317a:	11 f1       	breq	.+68     	; 0x31c0 <__vector_25+0x7a>
    317c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3180:	14 96       	adiw	r26, 0x04	; 4
    3182:	ed 91       	ld	r30, X+
    3184:	fc 91       	ld	r31, X
    3186:	15 97       	sbiw	r26, 0x05	; 5
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	25 81       	ldd	r18, Z+5	; 0x05
    318e:	98 1b       	sub	r25, r24
    3190:	92 23       	and	r25, r18
    3192:	84 81       	ldd	r24, Z+4	; 0x04
    3194:	98 17       	cp	r25, r24
    3196:	61 f0       	breq	.+24     	; 0x31b0 <__vector_25+0x6a>
    3198:	83 81       	ldd	r24, Z+3	; 0x03
    319a:	26 95       	lsr	r18
    319c:	28 23       	and	r18, r24
    319e:	c0 81       	ld	r28, Z
    31a0:	d1 81       	ldd	r29, Z+1	; 0x01
    31a2:	c2 0f       	add	r28, r18
    31a4:	d1 1d       	adc	r29, r1
    31a6:	68 83       	st	Y, r22
    31a8:	8f 5f       	subi	r24, 0xFF	; 255
    31aa:	95 81       	ldd	r25, Z+5	; 0x05
    31ac:	89 23       	and	r24, r25
    31ae:	83 83       	std	Z+3, r24	; 0x03
    31b0:	16 96       	adiw	r26, 0x06	; 6
    31b2:	ed 91       	ld	r30, X+
    31b4:	fc 91       	ld	r31, X
    31b6:	17 97       	sbiw	r26, 0x07	; 7
    31b8:	30 97       	sbiw	r30, 0x00	; 0
    31ba:	11 f0       	breq	.+4      	; 0x31c0 <__vector_25+0x7a>
    31bc:	cd 01       	movw	r24, r26
    31be:	19 95       	eicall
    31c0:	ff 91       	pop	r31
    31c2:	ef 91       	pop	r30
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	bf 91       	pop	r27
    31ca:	af 91       	pop	r26
    31cc:	9f 91       	pop	r25
    31ce:	8f 91       	pop	r24
    31d0:	7f 91       	pop	r23
    31d2:	6f 91       	pop	r22
    31d4:	5f 91       	pop	r21
    31d6:	4f 91       	pop	r20
    31d8:	3f 91       	pop	r19
    31da:	2f 91       	pop	r18
    31dc:	0f 90       	pop	r0
    31de:	0b be       	out	0x3b, r0	; 59
    31e0:	0f 90       	pop	r0
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	0f 90       	pop	r0
    31e6:	1f 90       	pop	r1
    31e8:	18 95       	reti

000031ea <__vector_26>:
    31ea:	1f 92       	push	r1
    31ec:	0f 92       	push	r0
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	0f 92       	push	r0
    31f2:	11 24       	eor	r1, r1
    31f4:	0b b6       	in	r0, 0x3b	; 59
    31f6:	0f 92       	push	r0
    31f8:	2f 93       	push	r18
    31fa:	8f 93       	push	r24
    31fc:	9f 93       	push	r25
    31fe:	af 93       	push	r26
    3200:	bf 93       	push	r27
    3202:	ef 93       	push	r30
    3204:	ff 93       	push	r31
    3206:	e0 91 54 08 	lds	r30, 0x0854	; 0x800854 <_ser_handle>
    320a:	f0 91 55 08 	lds	r31, 0x0855	; 0x800855 <_ser_handle+0x1>
    320e:	30 97       	sbiw	r30, 0x00	; 0
    3210:	b9 f0       	breq	.+46     	; 0x3240 <__vector_26+0x56>
    3212:	02 80       	ldd	r0, Z+2	; 0x02
    3214:	f3 81       	ldd	r31, Z+3	; 0x03
    3216:	e0 2d       	mov	r30, r0
    3218:	93 81       	ldd	r25, Z+3	; 0x03
    321a:	82 81       	ldd	r24, Z+2	; 0x02
    321c:	98 17       	cp	r25, r24
    321e:	b1 f0       	breq	.+44     	; 0x324c <__vector_26+0x62>
    3220:	92 81       	ldd	r25, Z+2	; 0x02
    3222:	85 81       	ldd	r24, Z+5	; 0x05
    3224:	28 2f       	mov	r18, r24
    3226:	26 95       	lsr	r18
    3228:	29 23       	and	r18, r25
    322a:	a0 81       	ld	r26, Z
    322c:	b1 81       	ldd	r27, Z+1	; 0x01
    322e:	a2 0f       	add	r26, r18
    3230:	b1 1d       	adc	r27, r1
    3232:	2c 91       	ld	r18, X
    3234:	9f 5f       	subi	r25, 0xFF	; 255
    3236:	89 23       	and	r24, r25
    3238:	82 83       	std	Z+2, r24	; 0x02
    323a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    323e:	0b c0       	rjmp	.+22     	; 0x3256 <__vector_26+0x6c>
    3240:	e1 ec       	ldi	r30, 0xC1	; 193
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	8f 7d       	andi	r24, 0xDF	; 223
    3248:	80 83       	st	Z, r24
    324a:	05 c0       	rjmp	.+10     	; 0x3256 <__vector_26+0x6c>
    324c:	e1 ec       	ldi	r30, 0xC1	; 193
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	8f 7d       	andi	r24, 0xDF	; 223
    3254:	80 83       	st	Z, r24
    3256:	ff 91       	pop	r31
    3258:	ef 91       	pop	r30
    325a:	bf 91       	pop	r27
    325c:	af 91       	pop	r26
    325e:	9f 91       	pop	r25
    3260:	8f 91       	pop	r24
    3262:	2f 91       	pop	r18
    3264:	0f 90       	pop	r0
    3266:	0b be       	out	0x3b, r0	; 59
    3268:	0f 90       	pop	r0
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	0f 90       	pop	r0
    326e:	1f 90       	pop	r1
    3270:	18 95       	reti

00003272 <__vector_36>:
    3272:	1f 92       	push	r1
    3274:	0f 92       	push	r0
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	0f 92       	push	r0
    327a:	11 24       	eor	r1, r1
    327c:	0b b6       	in	r0, 0x3b	; 59
    327e:	0f 92       	push	r0
    3280:	2f 93       	push	r18
    3282:	3f 93       	push	r19
    3284:	4f 93       	push	r20
    3286:	5f 93       	push	r21
    3288:	6f 93       	push	r22
    328a:	7f 93       	push	r23
    328c:	8f 93       	push	r24
    328e:	9f 93       	push	r25
    3290:	af 93       	push	r26
    3292:	bf 93       	push	r27
    3294:	cf 93       	push	r28
    3296:	df 93       	push	r29
    3298:	ef 93       	push	r30
    329a:	ff 93       	push	r31
    329c:	a0 91 56 08 	lds	r26, 0x0856	; 0x800856 <_ser_handle+0x2>
    32a0:	b0 91 57 08 	lds	r27, 0x0857	; 0x800857 <_ser_handle+0x3>
    32a4:	10 97       	sbiw	r26, 0x00	; 0
    32a6:	11 f1       	breq	.+68     	; 0x32ec <__vector_36+0x7a>
    32a8:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    32ac:	14 96       	adiw	r26, 0x04	; 4
    32ae:	ed 91       	ld	r30, X+
    32b0:	fc 91       	ld	r31, X
    32b2:	15 97       	sbiw	r26, 0x05	; 5
    32b4:	93 81       	ldd	r25, Z+3	; 0x03
    32b6:	82 81       	ldd	r24, Z+2	; 0x02
    32b8:	25 81       	ldd	r18, Z+5	; 0x05
    32ba:	98 1b       	sub	r25, r24
    32bc:	92 23       	and	r25, r18
    32be:	84 81       	ldd	r24, Z+4	; 0x04
    32c0:	98 17       	cp	r25, r24
    32c2:	61 f0       	breq	.+24     	; 0x32dc <__vector_36+0x6a>
    32c4:	83 81       	ldd	r24, Z+3	; 0x03
    32c6:	26 95       	lsr	r18
    32c8:	28 23       	and	r18, r24
    32ca:	c0 81       	ld	r28, Z
    32cc:	d1 81       	ldd	r29, Z+1	; 0x01
    32ce:	c2 0f       	add	r28, r18
    32d0:	d1 1d       	adc	r29, r1
    32d2:	68 83       	st	Y, r22
    32d4:	8f 5f       	subi	r24, 0xFF	; 255
    32d6:	95 81       	ldd	r25, Z+5	; 0x05
    32d8:	89 23       	and	r24, r25
    32da:	83 83       	std	Z+3, r24	; 0x03
    32dc:	16 96       	adiw	r26, 0x06	; 6
    32de:	ed 91       	ld	r30, X+
    32e0:	fc 91       	ld	r31, X
    32e2:	17 97       	sbiw	r26, 0x07	; 7
    32e4:	30 97       	sbiw	r30, 0x00	; 0
    32e6:	11 f0       	breq	.+4      	; 0x32ec <__vector_36+0x7a>
    32e8:	cd 01       	movw	r24, r26
    32ea:	19 95       	eicall
    32ec:	ff 91       	pop	r31
    32ee:	ef 91       	pop	r30
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	bf 91       	pop	r27
    32f6:	af 91       	pop	r26
    32f8:	9f 91       	pop	r25
    32fa:	8f 91       	pop	r24
    32fc:	7f 91       	pop	r23
    32fe:	6f 91       	pop	r22
    3300:	5f 91       	pop	r21
    3302:	4f 91       	pop	r20
    3304:	3f 91       	pop	r19
    3306:	2f 91       	pop	r18
    3308:	0f 90       	pop	r0
    330a:	0b be       	out	0x3b, r0	; 59
    330c:	0f 90       	pop	r0
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	0f 90       	pop	r0
    3312:	1f 90       	pop	r1
    3314:	18 95       	reti

00003316 <__vector_37>:
    3316:	1f 92       	push	r1
    3318:	0f 92       	push	r0
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	0f 92       	push	r0
    331e:	11 24       	eor	r1, r1
    3320:	0b b6       	in	r0, 0x3b	; 59
    3322:	0f 92       	push	r0
    3324:	2f 93       	push	r18
    3326:	8f 93       	push	r24
    3328:	9f 93       	push	r25
    332a:	af 93       	push	r26
    332c:	bf 93       	push	r27
    332e:	ef 93       	push	r30
    3330:	ff 93       	push	r31
    3332:	e0 91 56 08 	lds	r30, 0x0856	; 0x800856 <_ser_handle+0x2>
    3336:	f0 91 57 08 	lds	r31, 0x0857	; 0x800857 <_ser_handle+0x3>
    333a:	30 97       	sbiw	r30, 0x00	; 0
    333c:	b9 f0       	breq	.+46     	; 0x336c <__vector_37+0x56>
    333e:	02 80       	ldd	r0, Z+2	; 0x02
    3340:	f3 81       	ldd	r31, Z+3	; 0x03
    3342:	e0 2d       	mov	r30, r0
    3344:	93 81       	ldd	r25, Z+3	; 0x03
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	98 17       	cp	r25, r24
    334a:	b1 f0       	breq	.+44     	; 0x3378 <__vector_37+0x62>
    334c:	92 81       	ldd	r25, Z+2	; 0x02
    334e:	85 81       	ldd	r24, Z+5	; 0x05
    3350:	28 2f       	mov	r18, r24
    3352:	26 95       	lsr	r18
    3354:	29 23       	and	r18, r25
    3356:	a0 81       	ld	r26, Z
    3358:	b1 81       	ldd	r27, Z+1	; 0x01
    335a:	a2 0f       	add	r26, r18
    335c:	b1 1d       	adc	r27, r1
    335e:	2c 91       	ld	r18, X
    3360:	9f 5f       	subi	r25, 0xFF	; 255
    3362:	89 23       	and	r24, r25
    3364:	82 83       	std	Z+2, r24	; 0x02
    3366:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    336a:	0b c0       	rjmp	.+22     	; 0x3382 <__vector_37+0x6c>
    336c:	e9 ec       	ldi	r30, 0xC9	; 201
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	8f 7d       	andi	r24, 0xDF	; 223
    3374:	80 83       	st	Z, r24
    3376:	05 c0       	rjmp	.+10     	; 0x3382 <__vector_37+0x6c>
    3378:	e9 ec       	ldi	r30, 0xC9	; 201
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	80 81       	ld	r24, Z
    337e:	8f 7d       	andi	r24, 0xDF	; 223
    3380:	80 83       	st	Z, r24
    3382:	ff 91       	pop	r31
    3384:	ef 91       	pop	r30
    3386:	bf 91       	pop	r27
    3388:	af 91       	pop	r26
    338a:	9f 91       	pop	r25
    338c:	8f 91       	pop	r24
    338e:	2f 91       	pop	r18
    3390:	0f 90       	pop	r0
    3392:	0b be       	out	0x3b, r0	; 59
    3394:	0f 90       	pop	r0
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	0f 90       	pop	r0
    339a:	1f 90       	pop	r1
    339c:	18 95       	reti

0000339e <__vector_51>:
    339e:	1f 92       	push	r1
    33a0:	0f 92       	push	r0
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	0f 92       	push	r0
    33a6:	11 24       	eor	r1, r1
    33a8:	0b b6       	in	r0, 0x3b	; 59
    33aa:	0f 92       	push	r0
    33ac:	2f 93       	push	r18
    33ae:	3f 93       	push	r19
    33b0:	4f 93       	push	r20
    33b2:	5f 93       	push	r21
    33b4:	6f 93       	push	r22
    33b6:	7f 93       	push	r23
    33b8:	8f 93       	push	r24
    33ba:	9f 93       	push	r25
    33bc:	af 93       	push	r26
    33be:	bf 93       	push	r27
    33c0:	cf 93       	push	r28
    33c2:	df 93       	push	r29
    33c4:	ef 93       	push	r30
    33c6:	ff 93       	push	r31
    33c8:	a0 91 58 08 	lds	r26, 0x0858	; 0x800858 <_ser_handle+0x4>
    33cc:	b0 91 59 08 	lds	r27, 0x0859	; 0x800859 <_ser_handle+0x5>
    33d0:	10 97       	sbiw	r26, 0x00	; 0
    33d2:	11 f1       	breq	.+68     	; 0x3418 <__vector_51+0x7a>
    33d4:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    33d8:	14 96       	adiw	r26, 0x04	; 4
    33da:	ed 91       	ld	r30, X+
    33dc:	fc 91       	ld	r31, X
    33de:	15 97       	sbiw	r26, 0x05	; 5
    33e0:	93 81       	ldd	r25, Z+3	; 0x03
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	25 81       	ldd	r18, Z+5	; 0x05
    33e6:	98 1b       	sub	r25, r24
    33e8:	92 23       	and	r25, r18
    33ea:	84 81       	ldd	r24, Z+4	; 0x04
    33ec:	98 17       	cp	r25, r24
    33ee:	61 f0       	breq	.+24     	; 0x3408 <__vector_51+0x6a>
    33f0:	83 81       	ldd	r24, Z+3	; 0x03
    33f2:	26 95       	lsr	r18
    33f4:	28 23       	and	r18, r24
    33f6:	c0 81       	ld	r28, Z
    33f8:	d1 81       	ldd	r29, Z+1	; 0x01
    33fa:	c2 0f       	add	r28, r18
    33fc:	d1 1d       	adc	r29, r1
    33fe:	68 83       	st	Y, r22
    3400:	8f 5f       	subi	r24, 0xFF	; 255
    3402:	95 81       	ldd	r25, Z+5	; 0x05
    3404:	89 23       	and	r24, r25
    3406:	83 83       	std	Z+3, r24	; 0x03
    3408:	16 96       	adiw	r26, 0x06	; 6
    340a:	ed 91       	ld	r30, X+
    340c:	fc 91       	ld	r31, X
    340e:	17 97       	sbiw	r26, 0x07	; 7
    3410:	30 97       	sbiw	r30, 0x00	; 0
    3412:	11 f0       	breq	.+4      	; 0x3418 <__vector_51+0x7a>
    3414:	cd 01       	movw	r24, r26
    3416:	19 95       	eicall
    3418:	ff 91       	pop	r31
    341a:	ef 91       	pop	r30
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	bf 91       	pop	r27
    3422:	af 91       	pop	r26
    3424:	9f 91       	pop	r25
    3426:	8f 91       	pop	r24
    3428:	7f 91       	pop	r23
    342a:	6f 91       	pop	r22
    342c:	5f 91       	pop	r21
    342e:	4f 91       	pop	r20
    3430:	3f 91       	pop	r19
    3432:	2f 91       	pop	r18
    3434:	0f 90       	pop	r0
    3436:	0b be       	out	0x3b, r0	; 59
    3438:	0f 90       	pop	r0
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	0f 90       	pop	r0
    343e:	1f 90       	pop	r1
    3440:	18 95       	reti

00003442 <__vector_52>:
    3442:	1f 92       	push	r1
    3444:	0f 92       	push	r0
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	0f 92       	push	r0
    344a:	11 24       	eor	r1, r1
    344c:	0b b6       	in	r0, 0x3b	; 59
    344e:	0f 92       	push	r0
    3450:	2f 93       	push	r18
    3452:	8f 93       	push	r24
    3454:	9f 93       	push	r25
    3456:	af 93       	push	r26
    3458:	bf 93       	push	r27
    345a:	ef 93       	push	r30
    345c:	ff 93       	push	r31
    345e:	e0 91 58 08 	lds	r30, 0x0858	; 0x800858 <_ser_handle+0x4>
    3462:	f0 91 59 08 	lds	r31, 0x0859	; 0x800859 <_ser_handle+0x5>
    3466:	30 97       	sbiw	r30, 0x00	; 0
    3468:	b9 f0       	breq	.+46     	; 0x3498 <__vector_52+0x56>
    346a:	02 80       	ldd	r0, Z+2	; 0x02
    346c:	f3 81       	ldd	r31, Z+3	; 0x03
    346e:	e0 2d       	mov	r30, r0
    3470:	93 81       	ldd	r25, Z+3	; 0x03
    3472:	82 81       	ldd	r24, Z+2	; 0x02
    3474:	98 17       	cp	r25, r24
    3476:	b1 f0       	breq	.+44     	; 0x34a4 <__vector_52+0x62>
    3478:	92 81       	ldd	r25, Z+2	; 0x02
    347a:	85 81       	ldd	r24, Z+5	; 0x05
    347c:	28 2f       	mov	r18, r24
    347e:	26 95       	lsr	r18
    3480:	29 23       	and	r18, r25
    3482:	a0 81       	ld	r26, Z
    3484:	b1 81       	ldd	r27, Z+1	; 0x01
    3486:	a2 0f       	add	r26, r18
    3488:	b1 1d       	adc	r27, r1
    348a:	2c 91       	ld	r18, X
    348c:	9f 5f       	subi	r25, 0xFF	; 255
    348e:	89 23       	and	r24, r25
    3490:	82 83       	std	Z+2, r24	; 0x02
    3492:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3496:	0b c0       	rjmp	.+22     	; 0x34ae <__vector_52+0x6c>
    3498:	e1 ed       	ldi	r30, 0xD1	; 209
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	80 81       	ld	r24, Z
    349e:	8f 7d       	andi	r24, 0xDF	; 223
    34a0:	80 83       	st	Z, r24
    34a2:	05 c0       	rjmp	.+10     	; 0x34ae <__vector_52+0x6c>
    34a4:	e1 ed       	ldi	r30, 0xD1	; 209
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	80 81       	ld	r24, Z
    34aa:	8f 7d       	andi	r24, 0xDF	; 223
    34ac:	80 83       	st	Z, r24
    34ae:	ff 91       	pop	r31
    34b0:	ef 91       	pop	r30
    34b2:	bf 91       	pop	r27
    34b4:	af 91       	pop	r26
    34b6:	9f 91       	pop	r25
    34b8:	8f 91       	pop	r24
    34ba:	2f 91       	pop	r18
    34bc:	0f 90       	pop	r0
    34be:	0b be       	out	0x3b, r0	; 59
    34c0:	0f 90       	pop	r0
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	0f 90       	pop	r0
    34c6:	1f 90       	pop	r1
    34c8:	18 95       	reti

000034ca <__vector_54>:
    34ca:	1f 92       	push	r1
    34cc:	0f 92       	push	r0
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	0f 92       	push	r0
    34d2:	11 24       	eor	r1, r1
    34d4:	0b b6       	in	r0, 0x3b	; 59
    34d6:	0f 92       	push	r0
    34d8:	2f 93       	push	r18
    34da:	3f 93       	push	r19
    34dc:	4f 93       	push	r20
    34de:	5f 93       	push	r21
    34e0:	6f 93       	push	r22
    34e2:	7f 93       	push	r23
    34e4:	8f 93       	push	r24
    34e6:	9f 93       	push	r25
    34e8:	af 93       	push	r26
    34ea:	bf 93       	push	r27
    34ec:	cf 93       	push	r28
    34ee:	df 93       	push	r29
    34f0:	ef 93       	push	r30
    34f2:	ff 93       	push	r31
    34f4:	a0 91 5a 08 	lds	r26, 0x085A	; 0x80085a <_ser_handle+0x6>
    34f8:	b0 91 5b 08 	lds	r27, 0x085B	; 0x80085b <_ser_handle+0x7>
    34fc:	10 97       	sbiw	r26, 0x00	; 0
    34fe:	11 f1       	breq	.+68     	; 0x3544 <__vector_54+0x7a>
    3500:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3504:	14 96       	adiw	r26, 0x04	; 4
    3506:	ed 91       	ld	r30, X+
    3508:	fc 91       	ld	r31, X
    350a:	15 97       	sbiw	r26, 0x05	; 5
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	25 81       	ldd	r18, Z+5	; 0x05
    3512:	98 1b       	sub	r25, r24
    3514:	92 23       	and	r25, r18
    3516:	84 81       	ldd	r24, Z+4	; 0x04
    3518:	98 17       	cp	r25, r24
    351a:	61 f0       	breq	.+24     	; 0x3534 <__vector_54+0x6a>
    351c:	83 81       	ldd	r24, Z+3	; 0x03
    351e:	26 95       	lsr	r18
    3520:	28 23       	and	r18, r24
    3522:	c0 81       	ld	r28, Z
    3524:	d1 81       	ldd	r29, Z+1	; 0x01
    3526:	c2 0f       	add	r28, r18
    3528:	d1 1d       	adc	r29, r1
    352a:	68 83       	st	Y, r22
    352c:	8f 5f       	subi	r24, 0xFF	; 255
    352e:	95 81       	ldd	r25, Z+5	; 0x05
    3530:	89 23       	and	r24, r25
    3532:	83 83       	std	Z+3, r24	; 0x03
    3534:	16 96       	adiw	r26, 0x06	; 6
    3536:	ed 91       	ld	r30, X+
    3538:	fc 91       	ld	r31, X
    353a:	17 97       	sbiw	r26, 0x07	; 7
    353c:	30 97       	sbiw	r30, 0x00	; 0
    353e:	11 f0       	breq	.+4      	; 0x3544 <__vector_54+0x7a>
    3540:	cd 01       	movw	r24, r26
    3542:	19 95       	eicall
    3544:	ff 91       	pop	r31
    3546:	ef 91       	pop	r30
    3548:	df 91       	pop	r29
    354a:	cf 91       	pop	r28
    354c:	bf 91       	pop	r27
    354e:	af 91       	pop	r26
    3550:	9f 91       	pop	r25
    3552:	8f 91       	pop	r24
    3554:	7f 91       	pop	r23
    3556:	6f 91       	pop	r22
    3558:	5f 91       	pop	r21
    355a:	4f 91       	pop	r20
    355c:	3f 91       	pop	r19
    355e:	2f 91       	pop	r18
    3560:	0f 90       	pop	r0
    3562:	0b be       	out	0x3b, r0	; 59
    3564:	0f 90       	pop	r0
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	0f 90       	pop	r0
    356a:	1f 90       	pop	r1
    356c:	18 95       	reti

0000356e <__vector_55>:
    356e:	1f 92       	push	r1
    3570:	0f 92       	push	r0
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	0f 92       	push	r0
    3576:	11 24       	eor	r1, r1
    3578:	0b b6       	in	r0, 0x3b	; 59
    357a:	0f 92       	push	r0
    357c:	2f 93       	push	r18
    357e:	8f 93       	push	r24
    3580:	9f 93       	push	r25
    3582:	af 93       	push	r26
    3584:	bf 93       	push	r27
    3586:	ef 93       	push	r30
    3588:	ff 93       	push	r31
    358a:	e0 91 5a 08 	lds	r30, 0x085A	; 0x80085a <_ser_handle+0x6>
    358e:	f0 91 5b 08 	lds	r31, 0x085B	; 0x80085b <_ser_handle+0x7>
    3592:	30 97       	sbiw	r30, 0x00	; 0
    3594:	b9 f0       	breq	.+46     	; 0x35c4 <__vector_55+0x56>
    3596:	02 80       	ldd	r0, Z+2	; 0x02
    3598:	f3 81       	ldd	r31, Z+3	; 0x03
    359a:	e0 2d       	mov	r30, r0
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	98 17       	cp	r25, r24
    35a2:	b1 f0       	breq	.+44     	; 0x35d0 <__vector_55+0x62>
    35a4:	92 81       	ldd	r25, Z+2	; 0x02
    35a6:	85 81       	ldd	r24, Z+5	; 0x05
    35a8:	28 2f       	mov	r18, r24
    35aa:	26 95       	lsr	r18
    35ac:	29 23       	and	r18, r25
    35ae:	a0 81       	ld	r26, Z
    35b0:	b1 81       	ldd	r27, Z+1	; 0x01
    35b2:	a2 0f       	add	r26, r18
    35b4:	b1 1d       	adc	r27, r1
    35b6:	2c 91       	ld	r18, X
    35b8:	9f 5f       	subi	r25, 0xFF	; 255
    35ba:	89 23       	and	r24, r25
    35bc:	82 83       	std	Z+2, r24	; 0x02
    35be:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    35c2:	0b c0       	rjmp	.+22     	; 0x35da <__vector_55+0x6c>
    35c4:	e1 e3       	ldi	r30, 0x31	; 49
    35c6:	f1 e0       	ldi	r31, 0x01	; 1
    35c8:	80 81       	ld	r24, Z
    35ca:	8f 7d       	andi	r24, 0xDF	; 223
    35cc:	80 83       	st	Z, r24
    35ce:	05 c0       	rjmp	.+10     	; 0x35da <__vector_55+0x6c>
    35d0:	e1 e3       	ldi	r30, 0x31	; 49
    35d2:	f1 e0       	ldi	r31, 0x01	; 1
    35d4:	80 81       	ld	r24, Z
    35d6:	8f 7d       	andi	r24, 0xDF	; 223
    35d8:	80 83       	st	Z, r24
    35da:	ff 91       	pop	r31
    35dc:	ef 91       	pop	r30
    35de:	bf 91       	pop	r27
    35e0:	af 91       	pop	r26
    35e2:	9f 91       	pop	r25
    35e4:	8f 91       	pop	r24
    35e6:	2f 91       	pop	r18
    35e8:	0f 90       	pop	r0
    35ea:	0b be       	out	0x3b, r0	; 59
    35ec:	0f 90       	pop	r0
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	0f 90       	pop	r0
    35f2:	1f 90       	pop	r1
    35f4:	18 95       	reti

000035f6 <fifo_init>:
    35f6:	fc 01       	movw	r30, r24
    35f8:	41 11       	cpse	r20, r1
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <fifo_init+0xa>
    35fc:	0e 94 82 28 	call	0x5104	; 0x5104 <abort>
    3600:	84 2f       	mov	r24, r20
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	9c 01       	movw	r18, r24
    3606:	21 50       	subi	r18, 0x01	; 1
    3608:	31 09       	sbc	r19, r1
    360a:	82 23       	and	r24, r18
    360c:	93 23       	and	r25, r19
    360e:	89 2b       	or	r24, r25
    3610:	11 f0       	breq	.+4      	; 0x3616 <fifo_init+0x20>
    3612:	0e 94 82 28 	call	0x5104	; 0x5104 <abort>
    3616:	41 38       	cpi	r20, 0x81	; 129
    3618:	10 f0       	brcs	.+4      	; 0x361e <fifo_init+0x28>
    361a:	0e 94 82 28 	call	0x5104	; 0x5104 <abort>
    361e:	12 82       	std	Z+2, r1	; 0x02
    3620:	13 82       	std	Z+3, r1	; 0x03
    3622:	44 83       	std	Z+4, r20	; 0x04
    3624:	44 0f       	add	r20, r20
    3626:	41 50       	subi	r20, 0x01	; 1
    3628:	45 83       	std	Z+5, r20	; 0x05
    362a:	71 83       	std	Z+1, r23	; 0x01
    362c:	60 83       	st	Z, r22
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	08 95       	ret

00003634 <hal_create>:
    3634:	ee e2       	ldi	r30, 0x2E	; 46
    3636:	fa e0       	ldi	r31, 0x0A	; 10
    3638:	2c ee       	ldi	r18, 0xEC	; 236
    363a:	30 e2       	ldi	r19, 0x20	; 32
    363c:	31 83       	std	Z+1, r19	; 0x01
    363e:	20 83       	st	Z, r18
    3640:	2f ee       	ldi	r18, 0xEF	; 239
    3642:	30 e2       	ldi	r19, 0x20	; 32
    3644:	33 83       	std	Z+3, r19	; 0x03
    3646:	22 83       	std	Z+2, r18	; 0x02
    3648:	2a ef       	ldi	r18, 0xFA	; 250
    364a:	30 e2       	ldi	r19, 0x20	; 32
    364c:	35 83       	std	Z+5, r19	; 0x05
    364e:	24 83       	std	Z+4, r18	; 0x04
    3650:	2e ef       	ldi	r18, 0xFE	; 254
    3652:	30 e2       	ldi	r19, 0x20	; 32
    3654:	37 83       	std	Z+7, r19	; 0x07
    3656:	26 83       	std	Z+6, r18	; 0x06
    3658:	24 e0       	ldi	r18, 0x04	; 4
    365a:	31 e2       	ldi	r19, 0x21	; 33
    365c:	31 87       	std	Z+9, r19	; 0x09
    365e:	20 87       	std	Z+8, r18	; 0x08
    3660:	20 e1       	ldi	r18, 0x10	; 16
    3662:	31 e2       	ldi	r19, 0x21	; 33
    3664:	33 87       	std	Z+11, r19	; 0x0b
    3666:	22 87       	std	Z+10, r18	; 0x0a
    3668:	25 e1       	ldi	r18, 0x15	; 21
    366a:	31 e2       	ldi	r19, 0x21	; 33
    366c:	35 87       	std	Z+13, r19	; 0x0d
    366e:	24 87       	std	Z+12, r18	; 0x0c
    3670:	21 e2       	ldi	r18, 0x21	; 33
    3672:	31 e2       	ldi	r19, 0x21	; 33
    3674:	37 87       	std	Z+15, r19	; 0x0f
    3676:	26 87       	std	Z+14, r18	; 0x0e
    3678:	21 e0       	ldi	r18, 0x01	; 1
    367a:	31 e2       	ldi	r19, 0x21	; 33
    367c:	31 8b       	std	Z+17, r19	; 0x11
    367e:	20 8b       	std	Z+16, r18	; 0x10
    3680:	26 e2       	ldi	r18, 0x26	; 38
    3682:	31 e2       	ldi	r19, 0x21	; 33
    3684:	33 8b       	std	Z+19, r19	; 0x13
    3686:	22 8b       	std	Z+18, r18	; 0x12
    3688:	23 e3       	ldi	r18, 0x33	; 51
    368a:	31 e2       	ldi	r19, 0x21	; 33
    368c:	35 8b       	std	Z+21, r19	; 0x15
    368e:	24 8b       	std	Z+20, r18	; 0x14
    3690:	68 2f       	mov	r22, r24
    3692:	cf 01       	movw	r24, r30
    3694:	3c c1       	rjmp	.+632    	; 0x390e <led_create>
    3696:	08 95       	ret

00003698 <_hihTwiCallback>:
    3698:	65 30       	cpi	r22, 0x05	; 5
    369a:	f1 f4       	brne	.+60     	; 0x36d8 <_hihTwiCallback+0x40>
    369c:	fa 01       	movw	r30, r20
    369e:	80 81       	ld	r24, Z
    36a0:	8f 73       	andi	r24, 0x3F	; 63
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	98 2f       	mov	r25, r24
    36a6:	88 27       	eor	r24, r24
    36a8:	21 81       	ldd	r18, Z+1	; 0x01
    36aa:	82 2b       	or	r24, r18
    36ac:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    36b0:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	f0 e4       	ldi	r31, 0x40	; 64
    36b8:	8f 9f       	mul	r24, r31
    36ba:	c0 01       	movw	r24, r0
    36bc:	11 24       	eor	r1, r1
    36be:	fa 01       	movw	r30, r20
    36c0:	23 81       	ldd	r18, Z+3	; 0x03
    36c2:	26 95       	lsr	r18
    36c4:	26 95       	lsr	r18
    36c6:	82 2b       	or	r24, r18
    36c8:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    36cc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <_measuringIsReady>
    36d6:	08 95       	ret
    36d8:	64 30       	cpi	r22, 0x04	; 4
    36da:	51 f0       	breq	.+20     	; 0x36f0 <_hihTwiCallback+0x58>
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	90 e4       	ldi	r25, 0x40	; 64
    36e0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    36e4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    36e8:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    36ec:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    36f0:	08 95       	ret

000036f2 <hih8120Create>:
    36f2:	0f 93       	push	r16
    36f4:	1f 93       	push	r17
    36f6:	0c e4       	ldi	r16, 0x4C	; 76
    36f8:	1b e1       	ldi	r17, 0x1B	; 27
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	34 e2       	ldi	r19, 0x24	; 36
    36fe:	44 ef       	ldi	r20, 0xF4	; 244
    3700:	50 e0       	ldi	r21, 0x00	; 0
    3702:	60 e0       	ldi	r22, 0x00	; 0
    3704:	87 e2       	ldi	r24, 0x27	; 39
    3706:	0e 94 b2 23 	call	0x4764	; 0x4764 <twiCreate>
    370a:	90 93 5e 08 	sts	0x085E, r25	; 0x80085e <_hih8120Handler+0x1>
    370e:	80 93 5d 08 	sts	0x085D, r24	; 0x80085d <_hih8120Handler>
    3712:	21 e0       	ldi	r18, 0x01	; 1
    3714:	89 2b       	or	r24, r25
    3716:	09 f0       	breq	.+2      	; 0x371a <hih8120Create+0x28>
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	82 2f       	mov	r24, r18
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	08 95       	ret

00003722 <hih8120Wakeup>:
    3722:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <_hih8120Handler>
    3726:	90 91 5e 08 	lds	r25, 0x085E	; 0x80085e <_hih8120Handler+0x1>
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	59 f0       	breq	.+22     	; 0x3744 <hih8120Wakeup+0x22>
    372e:	40 e0       	ldi	r20, 0x00	; 0
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	0e 94 03 24 	call	0x4806	; 0x4806 <twiTransmit>
    3738:	84 30       	cpi	r24, 0x04	; 4
    373a:	31 f4       	brne	.+12     	; 0x3748 <hih8120Wakeup+0x26>
    373c:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <_measuringIsReady>
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	08 95       	ret
    3744:	82 e0       	ldi	r24, 0x02	; 2
    3746:	08 95       	ret
    3748:	83 e0       	ldi	r24, 0x03	; 3
    374a:	08 95       	ret

0000374c <hih8120Meassure>:
    374c:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <_hih8120Handler>
    3750:	90 91 5e 08 	lds	r25, 0x085E	; 0x80085e <_hih8120Handler+0x1>
    3754:	00 97       	sbiw	r24, 0x00	; 0
    3756:	39 f0       	breq	.+14     	; 0x3766 <hih8120Meassure+0x1a>
    3758:	64 e0       	ldi	r22, 0x04	; 4
    375a:	0e 94 4f 24 	call	0x489e	; 0x489e <twiReceive>
    375e:	85 30       	cpi	r24, 0x05	; 5
    3760:	21 f0       	breq	.+8      	; 0x376a <hih8120Meassure+0x1e>
    3762:	83 e0       	ldi	r24, 0x03	; 3
    3764:	08 95       	ret
    3766:	82 e0       	ldi	r24, 0x02	; 2
    3768:	08 95       	ret
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	08 95       	ret

0000376e <hih8120GetHumidity>:
    376e:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <_hum>
    3772:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <_hum+0x1>
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__floatunsisf>
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	48 ec       	ldi	r20, 0xC8	; 200
    3784:	52 e4       	ldi	r21, 0x42	; 66
    3786:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	38 ef       	ldi	r19, 0xF8	; 248
    378e:	4f e7       	ldi	r20, 0x7F	; 127
    3790:	56 e4       	ldi	r21, 0x46	; 70
    3792:	0c 94 a6 25 	jmp	0x4b4c	; 0x4b4c <__divsf3>
    3796:	08 95       	ret

00003798 <hih8120GetTemperature>:
    3798:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    379c:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__floatunsisf>
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	45 e2       	ldi	r20, 0x25	; 37
    37ae:	53 e4       	ldi	r21, 0x43	; 67
    37b0:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <__mulsf3>
    37b4:	20 e0       	ldi	r18, 0x00	; 0
    37b6:	38 ef       	ldi	r19, 0xF8	; 248
    37b8:	4f e7       	ldi	r20, 0x7F	; 127
    37ba:	56 e4       	ldi	r21, 0x46	; 70
    37bc:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__divsf3>
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	40 e2       	ldi	r20, 0x20	; 32
    37c6:	52 e4       	ldi	r21, 0x42	; 66
    37c8:	0c 94 3f 25 	jmp	0x4a7e	; 0x4a7e <__subsf3>
    37cc:	08 95       	ret

000037ce <_turn_off>:
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	fc 01       	movw	r30, r24
    37d6:	ee 0f       	add	r30, r30
    37d8:	ff 1f       	adc	r31, r31
    37da:	e8 0f       	add	r30, r24
    37dc:	f9 1f       	adc	r31, r25
    37de:	ee 0f       	add	r30, r30
    37e0:	ff 1f       	adc	r31, r31
    37e2:	e1 5a       	subi	r30, 0xA1	; 161
    37e4:	f7 4f       	sbci	r31, 0xF7	; 247
    37e6:	23 81       	ldd	r18, Z+3	; 0x03
    37e8:	21 11       	cpse	r18, r1
    37ea:	0a c0       	rjmp	.+20     	; 0x3800 <_turn_off+0x32>
    37ec:	ef 01       	movw	r28, r30
    37ee:	e0 91 36 0a 	lds	r30, 0x0A36	; 0x800a36 <register_access+0x8>
    37f2:	f0 91 37 0a 	lds	r31, 0x0A37	; 0x800a37 <register_access+0x9>
    37f6:	6a 81       	ldd	r22, Y+2	; 0x02
    37f8:	88 81       	ld	r24, Y
    37fa:	99 81       	ldd	r25, Y+1	; 0x01
    37fc:	19 95       	eicall
    37fe:	12 c0       	rjmp	.+36     	; 0x3824 <_turn_off+0x56>
    3800:	dc 01       	movw	r26, r24
    3802:	aa 0f       	add	r26, r26
    3804:	bb 1f       	adc	r27, r27
    3806:	ed 01       	movw	r28, r26
    3808:	c8 0f       	add	r28, r24
    380a:	d9 1f       	adc	r29, r25
    380c:	cc 0f       	add	r28, r28
    380e:	dd 1f       	adc	r29, r29
    3810:	c1 5a       	subi	r28, 0xA1	; 161
    3812:	d7 4f       	sbci	r29, 0xF7	; 247
    3814:	e0 91 40 0a 	lds	r30, 0x0A40	; 0x800a40 <register_access+0x12>
    3818:	f0 91 41 0a 	lds	r31, 0x0A41	; 0x800a41 <register_access+0x13>
    381c:	6a 81       	ldd	r22, Y+2	; 0x02
    381e:	88 81       	ld	r24, Y
    3820:	99 81       	ldd	r25, Y+1	; 0x01
    3822:	19 95       	eicall
    3824:	df 91       	pop	r29
    3826:	cf 91       	pop	r28
    3828:	08 95       	ret

0000382a <_turn_on>:
    382a:	cf 93       	push	r28
    382c:	df 93       	push	r29
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	fc 01       	movw	r30, r24
    3832:	ee 0f       	add	r30, r30
    3834:	ff 1f       	adc	r31, r31
    3836:	e8 0f       	add	r30, r24
    3838:	f9 1f       	adc	r31, r25
    383a:	ee 0f       	add	r30, r30
    383c:	ff 1f       	adc	r31, r31
    383e:	e1 5a       	subi	r30, 0xA1	; 161
    3840:	f7 4f       	sbci	r31, 0xF7	; 247
    3842:	23 81       	ldd	r18, Z+3	; 0x03
    3844:	21 11       	cpse	r18, r1
    3846:	0a c0       	rjmp	.+20     	; 0x385c <_turn_on+0x32>
    3848:	ef 01       	movw	r28, r30
    384a:	e0 91 40 0a 	lds	r30, 0x0A40	; 0x800a40 <register_access+0x12>
    384e:	f0 91 41 0a 	lds	r31, 0x0A41	; 0x800a41 <register_access+0x13>
    3852:	6a 81       	ldd	r22, Y+2	; 0x02
    3854:	88 81       	ld	r24, Y
    3856:	99 81       	ldd	r25, Y+1	; 0x01
    3858:	19 95       	eicall
    385a:	12 c0       	rjmp	.+36     	; 0x3880 <_turn_on+0x56>
    385c:	dc 01       	movw	r26, r24
    385e:	aa 0f       	add	r26, r26
    3860:	bb 1f       	adc	r27, r27
    3862:	ed 01       	movw	r28, r26
    3864:	c8 0f       	add	r28, r24
    3866:	d9 1f       	adc	r29, r25
    3868:	cc 0f       	add	r28, r28
    386a:	dd 1f       	adc	r29, r29
    386c:	c1 5a       	subi	r28, 0xA1	; 161
    386e:	d7 4f       	sbci	r29, 0xF7	; 247
    3870:	e0 91 36 0a 	lds	r30, 0x0A36	; 0x800a36 <register_access+0x8>
    3874:	f0 91 37 0a 	lds	r31, 0x0A37	; 0x800a37 <register_access+0x9>
    3878:	6a 81       	ldd	r22, Y+2	; 0x02
    387a:	88 81       	ld	r24, Y
    387c:	99 81       	ldd	r25, Y+1	; 0x01
    387e:	19 95       	eicall
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	08 95       	ret

00003886 <_hal_led_task>:
    3886:	85 ed       	ldi	r24, 0xD5	; 213
    3888:	94 e0       	ldi	r25, 0x04	; 4
    388a:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <puts>
    388e:	0f 2e       	mov	r0, r31
    3890:	fe e2       	ldi	r31, 0x2E	; 46
    3892:	cf 2e       	mov	r12, r31
    3894:	fa e0       	ldi	r31, 0x0A	; 10
    3896:	df 2e       	mov	r13, r31
    3898:	f0 2d       	mov	r31, r0
    389a:	04 e0       	ldi	r16, 0x04	; 4
    389c:	cf e5       	ldi	r28, 0x5F	; 95
    389e:	d8 e0       	ldi	r29, 0x08	; 8
    38a0:	10 e0       	ldi	r17, 0x00	; 0
    38a2:	8c 81       	ldd	r24, Y+4	; 0x04
    38a4:	81 30       	cpi	r24, 0x01	; 1
    38a6:	69 f0       	breq	.+26     	; 0x38c2 <_hal_led_task+0x3c>
    38a8:	e8 f0       	brcs	.+58     	; 0x38e4 <_hal_led_task+0x5e>
    38aa:	82 30       	cpi	r24, 0x02	; 2
    38ac:	39 f5       	brne	.+78     	; 0x38fc <_hal_led_task+0x76>
    38ae:	d6 01       	movw	r26, r12
    38b0:	1c 96       	adiw	r26, 0x0c	; 12
    38b2:	ed 91       	ld	r30, X+
    38b4:	fc 91       	ld	r31, X
    38b6:	1d 97       	sbiw	r26, 0x0d	; 13
    38b8:	6a 81       	ldd	r22, Y+2	; 0x02
    38ba:	88 81       	ld	r24, Y
    38bc:	99 81       	ldd	r25, Y+1	; 0x01
    38be:	19 95       	eicall
    38c0:	1d c0       	rjmp	.+58     	; 0x38fc <_hal_led_task+0x76>
    38c2:	8d 81       	ldd	r24, Y+5	; 0x05
    38c4:	8f 5f       	subi	r24, 0xFF	; 255
    38c6:	8a 30       	cpi	r24, 0x0A	; 10
    38c8:	10 f4       	brcc	.+4      	; 0x38ce <_hal_led_task+0x48>
    38ca:	8d 83       	std	Y+5, r24	; 0x05
    38cc:	17 c0       	rjmp	.+46     	; 0x38fc <_hal_led_task+0x76>
    38ce:	1d 82       	std	Y+5, r1	; 0x05
    38d0:	d6 01       	movw	r26, r12
    38d2:	1c 96       	adiw	r26, 0x0c	; 12
    38d4:	ed 91       	ld	r30, X+
    38d6:	fc 91       	ld	r31, X
    38d8:	1d 97       	sbiw	r26, 0x0d	; 13
    38da:	6a 81       	ldd	r22, Y+2	; 0x02
    38dc:	88 81       	ld	r24, Y
    38de:	99 81       	ldd	r25, Y+1	; 0x01
    38e0:	19 95       	eicall
    38e2:	0c c0       	rjmp	.+24     	; 0x38fc <_hal_led_task+0x76>
    38e4:	8d 81       	ldd	r24, Y+5	; 0x05
    38e6:	88 23       	and	r24, r24
    38e8:	31 f0       	breq	.+12     	; 0x38f6 <_hal_led_task+0x70>
    38ea:	81 2f       	mov	r24, r17
    38ec:	9e df       	rcall	.-196    	; 0x382a <_turn_on>
    38ee:	8d 81       	ldd	r24, Y+5	; 0x05
    38f0:	81 50       	subi	r24, 0x01	; 1
    38f2:	8d 83       	std	Y+5, r24	; 0x05
    38f4:	03 c0       	rjmp	.+6      	; 0x38fc <_hal_led_task+0x76>
    38f6:	0c 83       	std	Y+4, r16	; 0x04
    38f8:	81 2f       	mov	r24, r17
    38fa:	69 df       	rcall	.-302    	; 0x37ce <_turn_off>
    38fc:	1f 5f       	subi	r17, 0xFF	; 255
    38fe:	26 96       	adiw	r28, 0x06	; 6
    3900:	14 30       	cpi	r17, 0x04	; 4
    3902:	79 f6       	brne	.-98     	; 0x38a2 <_hal_led_task+0x1c>
    3904:	85 e0       	ldi	r24, 0x05	; 5
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <vTaskDelay>
    390c:	c7 cf       	rjmp	.-114    	; 0x389c <_hal_led_task+0x16>

0000390e <led_create>:
    390e:	cf 92       	push	r12
    3910:	df 92       	push	r13
    3912:	ef 92       	push	r14
    3914:	ff 92       	push	r15
    3916:	0f 93       	push	r16
    3918:	1f 93       	push	r17
    391a:	cf 93       	push	r28
    391c:	df 93       	push	r29
    391e:	06 2f       	mov	r16, r22
    3920:	0f 2e       	mov	r0, r31
    3922:	fe e2       	ldi	r31, 0x2E	; 46
    3924:	ef 2e       	mov	r14, r31
    3926:	fa e0       	ldi	r31, 0x0A	; 10
    3928:	ff 2e       	mov	r15, r31
    392a:	f0 2d       	mov	r31, r0
    392c:	d7 01       	movw	r26, r14
    392e:	18 96       	adiw	r26, 0x08	; 8
    3930:	ed 91       	ld	r30, X+
    3932:	fc 91       	ld	r31, X
    3934:	19 97       	sbiw	r26, 0x09	; 9
    3936:	66 e0       	ldi	r22, 0x06	; 6
    3938:	87 e2       	ldi	r24, 0x27	; 39
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	19 95       	eicall
    393e:	cf e5       	ldi	r28, 0x5F	; 95
    3940:	d8 e0       	ldi	r29, 0x08	; 8
    3942:	0f 2e       	mov	r0, r31
    3944:	f8 e2       	ldi	r31, 0x28	; 40
    3946:	cf 2e       	mov	r12, r31
    3948:	d1 2c       	mov	r13, r1
    394a:	f0 2d       	mov	r31, r0
    394c:	d9 82       	std	Y+1, r13	; 0x01
    394e:	c8 82       	st	Y, r12
    3950:	86 e0       	ldi	r24, 0x06	; 6
    3952:	8a 83       	std	Y+2, r24	; 0x02
    3954:	1b 82       	std	Y+3, r1	; 0x03
    3956:	14 e0       	ldi	r17, 0x04	; 4
    3958:	1c 83       	std	Y+4, r17	; 0x04
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	38 df       	rcall	.-400    	; 0x37ce <_turn_off>
    395e:	d7 01       	movw	r26, r14
    3960:	18 96       	adiw	r26, 0x08	; 8
    3962:	ed 91       	ld	r30, X+
    3964:	fc 91       	ld	r31, X
    3966:	19 97       	sbiw	r26, 0x09	; 9
    3968:	67 e0       	ldi	r22, 0x07	; 7
    396a:	87 e2       	ldi	r24, 0x27	; 39
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	19 95       	eicall
    3970:	df 82       	std	Y+7, r13	; 0x07
    3972:	ce 82       	std	Y+6, r12	; 0x06
    3974:	87 e0       	ldi	r24, 0x07	; 7
    3976:	88 87       	std	Y+8, r24	; 0x08
    3978:	19 86       	std	Y+9, r1	; 0x09
    397a:	1a 87       	std	Y+10, r17	; 0x0a
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	27 df       	rcall	.-434    	; 0x37ce <_turn_off>
    3980:	d7 01       	movw	r26, r14
    3982:	18 96       	adiw	r26, 0x08	; 8
    3984:	ed 91       	ld	r30, X+
    3986:	fc 91       	ld	r31, X
    3988:	19 97       	sbiw	r26, 0x09	; 9
    398a:	65 e0       	ldi	r22, 0x05	; 5
    398c:	83 e3       	ldi	r24, 0x33	; 51
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	19 95       	eicall
    3992:	d7 01       	movw	r26, r14
    3994:	18 96       	adiw	r26, 0x08	; 8
    3996:	ed 91       	ld	r30, X+
    3998:	fc 91       	ld	r31, X
    399a:	19 97       	sbiw	r26, 0x09	; 9
    399c:	61 e0       	ldi	r22, 0x01	; 1
    399e:	84 e3       	ldi	r24, 0x34	; 52
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	19 95       	eicall
    39a4:	84 e3       	ldi	r24, 0x34	; 52
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	9d 87       	std	Y+13, r25	; 0x0d
    39aa:	8c 87       	std	Y+12, r24	; 0x0c
    39ac:	85 e0       	ldi	r24, 0x05	; 5
    39ae:	8e 87       	std	Y+14, r24	; 0x0e
    39b0:	1f 86       	std	Y+15, r1	; 0x0f
    39b2:	18 8b       	std	Y+16, r17	; 0x10
    39b4:	82 e0       	ldi	r24, 0x02	; 2
    39b6:	0b df       	rcall	.-490    	; 0x37ce <_turn_off>
    39b8:	d7 01       	movw	r26, r14
    39ba:	18 96       	adiw	r26, 0x08	; 8
    39bc:	ed 91       	ld	r30, X+
    39be:	fc 91       	ld	r31, X
    39c0:	19 97       	sbiw	r26, 0x09	; 9
    39c2:	64 e0       	ldi	r22, 0x04	; 4
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	91 e0       	ldi	r25, 0x01	; 1
    39c8:	19 95       	eicall
    39ca:	d7 01       	movw	r26, r14
    39cc:	18 96       	adiw	r26, 0x08	; 8
    39ce:	ed 91       	ld	r30, X+
    39d0:	fc 91       	ld	r31, X
    39d2:	19 97       	sbiw	r26, 0x09	; 9
    39d4:	61 e0       	ldi	r22, 0x01	; 1
    39d6:	82 e0       	ldi	r24, 0x02	; 2
    39d8:	91 e0       	ldi	r25, 0x01	; 1
    39da:	19 95       	eicall
    39dc:	82 e0       	ldi	r24, 0x02	; 2
    39de:	91 e0       	ldi	r25, 0x01	; 1
    39e0:	9b 8b       	std	Y+19, r25	; 0x13
    39e2:	8a 8b       	std	Y+18, r24	; 0x12
    39e4:	1c 8b       	std	Y+20, r17	; 0x14
    39e6:	1d 8a       	std	Y+21, r1	; 0x15
    39e8:	1e 8b       	std	Y+22, r17	; 0x16
    39ea:	83 e0       	ldi	r24, 0x03	; 3
    39ec:	f0 de       	rcall	.-544    	; 0x37ce <_turn_off>
    39ee:	e1 2c       	mov	r14, r1
    39f0:	f1 2c       	mov	r15, r1
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 ec       	ldi	r20, 0xC0	; 192
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	6c ee       	ldi	r22, 0xEC	; 236
    39fc:	74 e0       	ldi	r23, 0x04	; 4
    39fe:	83 e4       	ldi	r24, 0x43	; 67
    3a00:	9c e1       	ldi	r25, 0x1C	; 28
    3a02:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <xTaskCreate>
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	1f 91       	pop	r17
    3a0c:	0f 91       	pop	r16
    3a0e:	ff 90       	pop	r15
    3a10:	ef 90       	pop	r14
    3a12:	df 90       	pop	r13
    3a14:	cf 90       	pop	r12
    3a16:	08 95       	ret

00003a18 <_serial_call_back>:
    3a18:	0f 93       	push	r16
    3a1a:	1f 93       	push	r17
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	1f 92       	push	r1
    3a22:	1f 92       	push	r1
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
    3a28:	8c 01       	movw	r16, r24
    3a2a:	19 82       	std	Y+1, r1	; 0x01
    3a2c:	2d c0       	rjmp	.+90     	; 0x3a88 <_serial_call_back+0x70>
    3a2e:	e0 91 db 08 	lds	r30, 0x08DB	; 0x8008db <rec_buf_inp.2926>
    3a32:	ec 32       	cpi	r30, 0x2C	; 44
    3a34:	50 f4       	brcc	.+20     	; 0x3a4a <_serial_call_back+0x32>
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	8e 0f       	add	r24, r30
    3a3a:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <rec_buf_inp.2926>
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	e5 5f       	subi	r30, 0xF5	; 245
    3a42:	f6 4f       	sbci	r31, 0xF6	; 246
    3a44:	8a 81       	ldd	r24, Y+2	; 0x02
    3a46:	80 83       	st	Z, r24
    3a48:	02 c0       	rjmp	.+4      	; 0x3a4e <_serial_call_back+0x36>
    3a4a:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <rec_buf_inp.2926>
    3a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a50:	8a 30       	cpi	r24, 0x0A	; 10
    3a52:	d1 f4       	brne	.+52     	; 0x3a88 <_serial_call_back+0x70>
    3a54:	40 91 db 08 	lds	r20, 0x08DB	; 0x8008db <rec_buf_inp.2926>
    3a58:	50 e0       	ldi	r21, 0x00	; 0
    3a5a:	fa 01       	movw	r30, r20
    3a5c:	e7 5f       	subi	r30, 0xF7	; 247
    3a5e:	f6 4f       	sbci	r31, 0xF6	; 246
    3a60:	10 82       	st	Z, r1
    3a62:	41 50       	subi	r20, 0x01	; 1
    3a64:	51 09       	sbc	r21, r1
    3a66:	9e 01       	movw	r18, r28
    3a68:	2f 5f       	subi	r18, 0xFF	; 255
    3a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a6c:	6b e0       	ldi	r22, 0x0B	; 11
    3a6e:	79 e0       	ldi	r23, 0x09	; 9
    3a70:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <_reply_buffer_handle>
    3a74:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <_reply_buffer_handle+0x1>
    3a78:	0e 94 b5 0c 	call	0x196a	; 0x196a <xStreamBufferSendFromISR>
    3a7c:	89 81       	ldd	r24, Y+1	; 0x01
    3a7e:	81 11       	cpse	r24, r1
    3a80:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <vPortYield>
    3a84:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <rec_buf_inp.2926>
    3a88:	be 01       	movw	r22, r28
    3a8a:	6e 5f       	subi	r22, 0xFE	; 254
    3a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a8e:	c8 01       	movw	r24, r16
    3a90:	3e db       	rcall	.-2436   	; 0x310e <serial_get_byte>
    3a92:	88 23       	and	r24, r24
    3a94:	61 f2       	breq	.-104    	; 0x3a2e <_serial_call_back+0x16>
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	1f 91       	pop	r17
    3aa0:	0f 91       	pop	r16
    3aa2:	08 95       	ret

00003aa4 <_upload_message>:
    3aa4:	0f 93       	push	r16
    3aa6:	1f 93       	push	r17
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
    3aac:	8c 01       	movw	r16, r24
    3aae:	eb 01       	movw	r28, r22
    3ab0:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <_reply_buffer_handle>
    3ab4:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <_reply_buffer_handle+0x1>
    3ab8:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xStreamBufferReset>
    3abc:	b8 01       	movw	r22, r16
    3abe:	87 e7       	ldi	r24, 0x77	; 119
    3ac0:	98 e0       	ldi	r25, 0x08	; 8
    3ac2:	0e 94 a1 28 	call	0x5142	; 0x5142 <strcpy>
    3ac6:	20 97       	sbiw	r28, 0x00	; 0
    3ac8:	79 f0       	breq	.+30     	; 0x3ae8 <_upload_message+0x44>
    3aca:	e7 e7       	ldi	r30, 0x77	; 119
    3acc:	f8 e0       	ldi	r31, 0x08	; 8
    3ace:	01 90       	ld	r0, Z+
    3ad0:	00 20       	and	r0, r0
    3ad2:	e9 f7       	brne	.-6      	; 0x3ace <_upload_message+0x2a>
    3ad4:	31 97       	sbiw	r30, 0x01	; 1
    3ad6:	80 e2       	ldi	r24, 0x20	; 32
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	80 83       	st	Z, r24
    3ade:	be 01       	movw	r22, r28
    3ae0:	87 e7       	ldi	r24, 0x77	; 119
    3ae2:	98 e0       	ldi	r25, 0x08	; 8
    3ae4:	0e 94 96 28 	call	0x512c	; 0x512c <strcat>
    3ae8:	e7 e7       	ldi	r30, 0x77	; 119
    3aea:	f8 e0       	ldi	r31, 0x08	; 8
    3aec:	df 01       	movw	r26, r30
    3aee:	0d 90       	ld	r0, X+
    3af0:	00 20       	and	r0, r0
    3af2:	e9 f7       	brne	.-6      	; 0x3aee <_upload_message+0x4a>
    3af4:	11 97       	sbiw	r26, 0x01	; 1
    3af6:	8d e0       	ldi	r24, 0x0D	; 13
    3af8:	9a e0       	ldi	r25, 0x0A	; 10
    3afa:	11 96       	adiw	r26, 0x01	; 1
    3afc:	9c 93       	st	X, r25
    3afe:	8e 93       	st	-X, r24
    3b00:	12 96       	adiw	r26, 0x02	; 2
    3b02:	1c 92       	st	X, r1
    3b04:	01 90       	ld	r0, Z+
    3b06:	00 20       	and	r0, r0
    3b08:	e9 f7       	brne	.-6      	; 0x3b04 <_upload_message+0x60>
    3b0a:	31 97       	sbiw	r30, 0x01	; 1
    3b0c:	e7 57       	subi	r30, 0x77	; 119
    3b0e:	f8 40       	sbci	r31, 0x08	; 8
    3b10:	ae 2f       	mov	r26, r30
    3b12:	87 e7       	ldi	r24, 0x77	; 119
    3b14:	98 e0       	ldi	r25, 0x08	; 8
    3b16:	ac 01       	movw	r20, r24
    3b18:	6a 2f       	mov	r22, r26
    3b1a:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <_rn2483_serial>
    3b1e:	90 91 df 08 	lds	r25, 0x08DF	; 0x8008df <_rn2483_serial+0x1>
    3b22:	a5 da       	rcall	.-2742   	; 0x306e <serial_send_bytes>
    3b24:	81 11       	cpse	r24, r1
    3b26:	0f c0       	rjmp	.+30     	; 0x3b46 <_upload_message+0xa2>
    3b28:	28 e2       	ldi	r18, 0x28	; 40
    3b2a:	35 e0       	ldi	r19, 0x05	; 5
    3b2c:	4d e2       	ldi	r20, 0x2D	; 45
    3b2e:	50 e0       	ldi	r21, 0x00	; 0
    3b30:	65 e6       	ldi	r22, 0x65	; 101
    3b32:	79 e0       	ldi	r23, 0x09	; 9
    3b34:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <_reply_buffer_handle>
    3b38:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <_reply_buffer_handle+0x1>
    3b3c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <xStreamBufferReceive>
    3b40:	85 e6       	ldi	r24, 0x65	; 101
    3b42:	99 e0       	ldi	r25, 0x09	; 9
    3b44:	02 c0       	rjmp	.+4      	; 0x3b4a <_upload_message+0xa6>
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	df 91       	pop	r29
    3b4c:	cf 91       	pop	r28
    3b4e:	1f 91       	pop	r17
    3b50:	0f 91       	pop	r16
    3b52:	08 95       	ret

00003b54 <_reply2return_code>:
    3b54:	af 92       	push	r10
    3b56:	bf 92       	push	r11
    3b58:	cf 92       	push	r12
    3b5a:	df 92       	push	r13
    3b5c:	ef 92       	push	r14
    3b5e:	ff 92       	push	r15
    3b60:	0f 93       	push	r16
    3b62:	1f 93       	push	r17
    3b64:	cf 93       	push	r28
    3b66:	df 93       	push	r29
    3b68:	6c 01       	movw	r12, r24
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	01 90       	ld	r0, Z+
    3b6e:	00 20       	and	r0, r0
    3b70:	e9 f7       	brne	.-6      	; 0x3b6c <_reply2return_code+0x18>
    3b72:	31 97       	sbiw	r30, 0x01	; 1
    3b74:	7f 01       	movw	r14, r30
    3b76:	e8 1a       	sub	r14, r24
    3b78:	f9 0a       	sbc	r15, r25
    3b7a:	08 e7       	ldi	r16, 0x78	; 120
    3b7c:	17 e0       	ldi	r17, 0x07	; 7
    3b7e:	c0 e0       	ldi	r28, 0x00	; 0
    3b80:	d0 e0       	ldi	r29, 0x00	; 0
    3b82:	f8 01       	movw	r30, r16
    3b84:	60 81       	ld	r22, Z
    3b86:	71 81       	ldd	r23, Z+1	; 0x01
    3b88:	a7 01       	movw	r20, r14
    3b8a:	c6 01       	movw	r24, r12
    3b8c:	0e 94 a8 28 	call	0x5150	; 0x5150 <strncasecmp>
    3b90:	89 2b       	or	r24, r25
    3b92:	49 f4       	brne	.+18     	; 0x3ba6 <_reply2return_code+0x52>
    3b94:	fe 01       	movw	r30, r28
    3b96:	ee 0f       	add	r30, r30
    3b98:	ff 1f       	adc	r31, r31
    3b9a:	ec 0f       	add	r30, r28
    3b9c:	fd 1f       	adc	r31, r29
    3b9e:	e9 58       	subi	r30, 0x89	; 137
    3ba0:	f8 4f       	sbci	r31, 0xF8	; 248
    3ba2:	80 81       	ld	r24, Z
    3ba4:	07 c0       	rjmp	.+14     	; 0x3bb4 <_reply2return_code+0x60>
    3ba6:	21 96       	adiw	r28, 0x01	; 1
    3ba8:	0d 5f       	subi	r16, 0xFD	; 253
    3baa:	1f 4f       	sbci	r17, 0xFF	; 255
    3bac:	c1 31       	cpi	r28, 0x11	; 17
    3bae:	d1 05       	cpc	r29, r1
    3bb0:	41 f7       	brne	.-48     	; 0x3b82 <_reply2return_code+0x2e>
    3bb2:	80 e1       	ldi	r24, 0x10	; 16
    3bb4:	df 91       	pop	r29
    3bb6:	cf 91       	pop	r28
    3bb8:	1f 91       	pop	r17
    3bba:	0f 91       	pop	r16
    3bbc:	ff 90       	pop	r15
    3bbe:	ef 90       	pop	r14
    3bc0:	df 90       	pop	r13
    3bc2:	cf 90       	pop	r12
    3bc4:	bf 90       	pop	r11
    3bc6:	af 90       	pop	r10
    3bc8:	08 95       	ret

00003bca <_upload_message_rc>:
    3bca:	6c df       	rcall	.-296    	; 0x3aa4 <_upload_message>
    3bcc:	c3 cf       	rjmp	.-122    	; 0x3b54 <_reply2return_code>
    3bce:	08 95       	ret

00003bd0 <lora_driver_flush_buffers>:
    3bd0:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <_reply_buffer_handle>
    3bd4:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <_reply_buffer_handle+0x1>
    3bd8:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <xStreamBufferReset>
    3bdc:	08 95       	ret

00003bde <lora_driver_create>:
    3bde:	8f 92       	push	r8
    3be0:	9f 92       	push	r9
    3be2:	af 92       	push	r10
    3be4:	cf 92       	push	r12
    3be6:	ef 92       	push	r14
    3be8:	0f 93       	push	r16
    3bea:	cf 93       	push	r28
    3bec:	c8 2f       	mov	r28, r24
    3bee:	41 e0       	ldi	r20, 0x01	; 1
    3bf0:	60 e0       	ldi	r22, 0x00	; 0
    3bf2:	70 e0       	ldi	r23, 0x00	; 0
    3bf4:	88 ec       	ldi	r24, 0xC8	; 200
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	0e 94 4a 0c 	call	0x1894	; 0x1894 <xStreamBufferGenericCreate>
    3bfc:	90 93 dd 08 	sts	0x08DD, r25	; 0x8008dd <_reply_buffer_handle+0x1>
    3c00:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <_reply_buffer_handle>
    3c04:	0f 2e       	mov	r0, r31
    3c06:	fc e0       	ldi	r31, 0x0C	; 12
    3c08:	8f 2e       	mov	r8, r31
    3c0a:	fd e1       	ldi	r31, 0x1D	; 29
    3c0c:	9f 2e       	mov	r9, r31
    3c0e:	f0 2d       	mov	r31, r0
    3c10:	68 94       	set
    3c12:	aa 24       	eor	r10, r10
    3c14:	a6 f8       	bld	r10, 6
    3c16:	68 94       	set
    3c18:	cc 24       	eor	r12, r12
    3c1a:	c6 f8       	bld	r12, 6
    3c1c:	e1 2c       	mov	r14, r1
    3c1e:	00 e0       	ldi	r16, 0x00	; 0
    3c20:	23 e0       	ldi	r18, 0x03	; 3
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	51 ee       	ldi	r21, 0xE1	; 225
    3c26:	60 e0       	ldi	r22, 0x00	; 0
    3c28:	70 e0       	ldi	r23, 0x00	; 0
    3c2a:	8c 2f       	mov	r24, r28
    3c2c:	5c d9       	rcall	.-3400   	; 0x2ee6 <serial_new_instance>
    3c2e:	90 93 df 08 	sts	0x08DF, r25	; 0x8008df <_rn2483_serial+0x1>
    3c32:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <_rn2483_serial>
    3c36:	e0 91 36 0a 	lds	r30, 0x0A36	; 0x800a36 <register_access+0x8>
    3c3a:	f0 91 37 0a 	lds	r31, 0x0A37	; 0x800a37 <register_access+0x9>
    3c3e:	64 e0       	ldi	r22, 0x04	; 4
    3c40:	87 e0       	ldi	r24, 0x07	; 7
    3c42:	91 e0       	ldi	r25, 0x01	; 1
    3c44:	19 95       	eicall
    3c46:	cf 91       	pop	r28
    3c48:	0f 91       	pop	r16
    3c4a:	ef 90       	pop	r14
    3c4c:	cf 90       	pop	r12
    3c4e:	af 90       	pop	r10
    3c50:	9f 90       	pop	r9
    3c52:	8f 90       	pop	r8
    3c54:	08 95       	ret

00003c56 <lora_driver_reset_rn2483>:
    3c56:	88 23       	and	r24, r24
    3c58:	49 f0       	breq	.+18     	; 0x3c6c <lora_driver_reset_rn2483+0x16>
    3c5a:	e0 91 40 0a 	lds	r30, 0x0A40	; 0x800a40 <register_access+0x12>
    3c5e:	f0 91 41 0a 	lds	r31, 0x0A41	; 0x800a41 <register_access+0x13>
    3c62:	64 e0       	ldi	r22, 0x04	; 4
    3c64:	88 e0       	ldi	r24, 0x08	; 8
    3c66:	91 e0       	ldi	r25, 0x01	; 1
    3c68:	19 95       	eicall
    3c6a:	08 95       	ret
    3c6c:	e0 91 36 0a 	lds	r30, 0x0A36	; 0x800a36 <register_access+0x8>
    3c70:	f0 91 37 0a 	lds	r31, 0x0A37	; 0x800a37 <register_access+0x9>
    3c74:	64 e0       	ldi	r22, 0x04	; 4
    3c76:	88 e0       	ldi	r24, 0x08	; 8
    3c78:	91 e0       	ldi	r25, 0x01	; 1
    3c7a:	19 95       	eicall
    3c7c:	08 95       	ret

00003c7e <lora_driver_rn2483_factory_reset>:
    3c7e:	60 e0       	ldi	r22, 0x00	; 0
    3c80:	70 e0       	ldi	r23, 0x00	; 0
    3c82:	83 e1       	ldi	r24, 0x13	; 19
    3c84:	95 e0       	ldi	r25, 0x05	; 5
    3c86:	0e df       	rcall	.-484    	; 0x3aa4 <_upload_message>
    3c88:	e5 e6       	ldi	r30, 0x65	; 101
    3c8a:	f9 e0       	ldi	r31, 0x09	; 9
    3c8c:	01 90       	ld	r0, Z+
    3c8e:	00 20       	and	r0, r0
    3c90:	e9 f7       	brne	.-6      	; 0x3c8c <lora_driver_rn2483_factory_reset+0xe>
    3c92:	31 97       	sbiw	r30, 0x01	; 1
    3c94:	e5 56       	subi	r30, 0x65	; 101
    3c96:	f9 40       	sbci	r31, 0x09	; 9
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	75 97       	sbiw	r30, 0x15	; 21
    3c9c:	08 f0       	brcs	.+2      	; 0x3ca0 <lora_driver_rn2483_factory_reset+0x22>
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	08 95       	ret

00003ca2 <lora_driver_get_rn2483_hweui>:
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	ec 01       	movw	r28, r24
    3ca8:	60 e0       	ldi	r22, 0x00	; 0
    3caa:	70 e0       	ldi	r23, 0x00	; 0
    3cac:	84 e2       	ldi	r24, 0x24	; 36
    3cae:	95 e0       	ldi	r25, 0x05	; 5
    3cb0:	f9 de       	rcall	.-526    	; 0x3aa4 <_upload_message>
    3cb2:	e5 e6       	ldi	r30, 0x65	; 101
    3cb4:	f9 e0       	ldi	r31, 0x09	; 9
    3cb6:	01 90       	ld	r0, Z+
    3cb8:	00 20       	and	r0, r0
    3cba:	e9 f7       	brne	.-6      	; 0x3cb6 <lora_driver_get_rn2483_hweui+0x14>
    3cbc:	e6 57       	subi	r30, 0x76	; 118
    3cbe:	f9 40       	sbci	r31, 0x09	; 9
    3cc0:	39 f4       	brne	.+14     	; 0x3cd0 <lora_driver_get_rn2483_hweui+0x2e>
    3cc2:	65 e6       	ldi	r22, 0x65	; 101
    3cc4:	79 e0       	ldi	r23, 0x09	; 9
    3cc6:	ce 01       	movw	r24, r28
    3cc8:	0e 94 a1 28 	call	0x5142	; 0x5142 <strcpy>
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	02 c0       	rjmp	.+4      	; 0x3cd4 <lora_driver_get_rn2483_hweui+0x32>
    3cd0:	18 82       	st	Y, r1
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	df 91       	pop	r29
    3cd6:	cf 91       	pop	r28
    3cd8:	08 95       	ret

00003cda <lora_driver_set_device_identifier>:
    3cda:	fc 01       	movw	r30, r24
    3cdc:	01 90       	ld	r0, Z+
    3cde:	00 20       	and	r0, r0
    3ce0:	e9 f7       	brne	.-6      	; 0x3cdc <lora_driver_set_device_identifier+0x2>
    3ce2:	9f 01       	movw	r18, r30
    3ce4:	21 51       	subi	r18, 0x11	; 17
    3ce6:	31 09       	sbc	r19, r1
    3ce8:	28 17       	cp	r18, r24
    3cea:	39 07       	cpc	r19, r25
    3cec:	29 f4       	brne	.+10     	; 0x3cf8 <lora_driver_set_device_identifier+0x1e>
    3cee:	bc 01       	movw	r22, r24
    3cf0:	82 e5       	ldi	r24, 0x52	; 82
    3cf2:	95 e0       	ldi	r25, 0x05	; 5
    3cf4:	6a cf       	rjmp	.-300    	; 0x3bca <_upload_message_rc>
    3cf6:	08 95       	ret
    3cf8:	89 e0       	ldi	r24, 0x09	; 9
    3cfa:	08 95       	ret

00003cfc <lora_driver_set_application_identifier>:
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	01 90       	ld	r0, Z+
    3d00:	00 20       	and	r0, r0
    3d02:	e9 f7       	brne	.-6      	; 0x3cfe <lora_driver_set_application_identifier+0x2>
    3d04:	9f 01       	movw	r18, r30
    3d06:	21 51       	subi	r18, 0x11	; 17
    3d08:	31 09       	sbc	r19, r1
    3d0a:	28 17       	cp	r18, r24
    3d0c:	39 07       	cpc	r19, r25
    3d0e:	29 f4       	brne	.+10     	; 0x3d1a <lora_driver_set_application_identifier+0x1e>
    3d10:	bc 01       	movw	r22, r24
    3d12:	81 e6       	ldi	r24, 0x61	; 97
    3d14:	95 e0       	ldi	r25, 0x05	; 5
    3d16:	59 cf       	rjmp	.-334    	; 0x3bca <_upload_message_rc>
    3d18:	08 95       	ret
    3d1a:	89 e0       	ldi	r24, 0x09	; 9
    3d1c:	08 95       	ret

00003d1e <lora_driver_set_application_key>:
    3d1e:	fc 01       	movw	r30, r24
    3d20:	01 90       	ld	r0, Z+
    3d22:	00 20       	and	r0, r0
    3d24:	e9 f7       	brne	.-6      	; 0x3d20 <lora_driver_set_application_key+0x2>
    3d26:	9f 01       	movw	r18, r30
    3d28:	21 52       	subi	r18, 0x21	; 33
    3d2a:	31 09       	sbc	r19, r1
    3d2c:	28 17       	cp	r18, r24
    3d2e:	39 07       	cpc	r19, r25
    3d30:	29 f4       	brne	.+10     	; 0x3d3c <lora_driver_set_application_key+0x1e>
    3d32:	bc 01       	movw	r22, r24
    3d34:	80 e7       	ldi	r24, 0x70	; 112
    3d36:	95 e0       	ldi	r25, 0x05	; 5
    3d38:	48 cf       	rjmp	.-368    	; 0x3bca <_upload_message_rc>
    3d3a:	08 95       	ret
    3d3c:	89 e0       	ldi	r24, 0x09	; 9
    3d3e:	08 95       	ret

00003d40 <lora_driver_save_mac>:
    3d40:	60 e0       	ldi	r22, 0x00	; 0
    3d42:	70 e0       	ldi	r23, 0x00	; 0
    3d44:	8f ea       	ldi	r24, 0xAF	; 175
    3d46:	95 e0       	ldi	r25, 0x05	; 5
    3d48:	40 cf       	rjmp	.-384    	; 0x3bca <_upload_message_rc>
    3d4a:	08 95       	ret

00003d4c <lora_driver_join>:
    3d4c:	e8 2f       	mov	r30, r24
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	ee 0f       	add	r30, r30
    3d52:	ff 1f       	adc	r31, r31
    3d54:	ed 58       	subi	r30, 0x8D	; 141
    3d56:	f8 4f       	sbci	r31, 0xF8	; 248
    3d58:	60 81       	ld	r22, Z
    3d5a:	71 81       	ldd	r23, Z+1	; 0x01
    3d5c:	88 eb       	ldi	r24, 0xB8	; 184
    3d5e:	95 e0       	ldi	r25, 0x05	; 5
    3d60:	34 df       	rcall	.-408    	; 0x3bca <_upload_message_rc>
    3d62:	81 11       	cpse	r24, r1
    3d64:	12 c0       	rjmp	.+36     	; 0x3d8a <lora_driver_join+0x3e>
    3d66:	28 e2       	ldi	r18, 0x28	; 40
    3d68:	35 e0       	ldi	r19, 0x05	; 5
    3d6a:	4d e2       	ldi	r20, 0x2D	; 45
    3d6c:	50 e0       	ldi	r21, 0x00	; 0
    3d6e:	65 e6       	ldi	r22, 0x65	; 101
    3d70:	79 e0       	ldi	r23, 0x09	; 9
    3d72:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <_reply_buffer_handle>
    3d76:	90 91 dd 08 	lds	r25, 0x08DD	; 0x8008dd <_reply_buffer_handle+0x1>
    3d7a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <xStreamBufferReceive>
    3d7e:	88 23       	and	r24, r24
    3d80:	21 f0       	breq	.+8      	; 0x3d8a <lora_driver_join+0x3e>
    3d82:	85 e6       	ldi	r24, 0x65	; 101
    3d84:	99 e0       	ldi	r25, 0x09	; 9
    3d86:	e6 ce       	rjmp	.-564    	; 0x3b54 <_reply2return_code>
    3d88:	08 95       	ret
    3d8a:	85 e6       	ldi	r24, 0x65	; 101
    3d8c:	99 e0       	ldi	r25, 0x09	; 9
    3d8e:	e2 ce       	rjmp	.-572    	; 0x3b54 <_reply2return_code>
    3d90:	08 95       	ret

00003d92 <lora_driver_sent_upload_message>:
    3d92:	cf 93       	push	r28
    3d94:	df 93       	push	r29
    3d96:	1f 92       	push	r1
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	db 01       	movw	r26, r22
    3d9e:	11 96       	adiw	r26, 0x01	; 1
    3da0:	9c 91       	ld	r25, X
    3da2:	11 97       	sbiw	r26, 0x01	; 1
    3da4:	95 31       	cpi	r25, 0x15	; 21
    3da6:	08 f0       	brcs	.+2      	; 0x3daa <lora_driver_sent_upload_message+0x18>
    3da8:	87 c0       	rjmp	.+270    	; 0x3eb8 <lora_driver_sent_upload_message+0x126>
    3daa:	99 23       	and	r25, r25
    3dac:	81 f1       	breq	.+96     	; 0x3e0e <lora_driver_sent_upload_message+0x7c>
    3dae:	60 e0       	ldi	r22, 0x00	; 0
    3db0:	70 e0       	ldi	r23, 0x00	; 0
    3db2:	27 2f       	mov	r18, r23
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	46 2f       	mov	r20, r22
    3db8:	50 e0       	ldi	r21, 0x00	; 0
    3dba:	fd 01       	movw	r30, r26
    3dbc:	e4 0f       	add	r30, r20
    3dbe:	f5 1f       	adc	r31, r21
    3dc0:	92 81       	ldd	r25, Z+2	; 0x02
    3dc2:	92 95       	swap	r25
    3dc4:	9f 70       	andi	r25, 0x0F	; 15
    3dc6:	9a 30       	cpi	r25, 0x0A	; 10
    3dc8:	10 f0       	brcs	.+4      	; 0x3dce <lora_driver_sent_upload_message+0x3c>
    3dca:	99 5c       	subi	r25, 0xC9	; 201
    3dcc:	01 c0       	rjmp	.+2      	; 0x3dd0 <lora_driver_sent_upload_message+0x3e>
    3dce:	90 5d       	subi	r25, 0xD0	; 208
    3dd0:	f9 01       	movw	r30, r18
    3dd2:	ea 50       	subi	r30, 0x0A	; 10
    3dd4:	f7 4f       	sbci	r31, 0xF7	; 247
    3dd6:	90 83       	st	Z, r25
    3dd8:	2f 5f       	subi	r18, 0xFF	; 255
    3dda:	3f 4f       	sbci	r19, 0xFF	; 255
    3ddc:	fd 01       	movw	r30, r26
    3dde:	e4 0f       	add	r30, r20
    3de0:	f5 1f       	adc	r31, r21
    3de2:	92 81       	ldd	r25, Z+2	; 0x02
    3de4:	9f 70       	andi	r25, 0x0F	; 15
    3de6:	49 2f       	mov	r20, r25
    3de8:	50 e0       	ldi	r21, 0x00	; 0
    3dea:	4a 30       	cpi	r20, 0x0A	; 10
    3dec:	51 05       	cpc	r21, r1
    3dee:	14 f0       	brlt	.+4      	; 0x3df4 <lora_driver_sent_upload_message+0x62>
    3df0:	99 5c       	subi	r25, 0xC9	; 201
    3df2:	01 c0       	rjmp	.+2      	; 0x3df6 <lora_driver_sent_upload_message+0x64>
    3df4:	90 5d       	subi	r25, 0xD0	; 208
    3df6:	f9 01       	movw	r30, r18
    3df8:	ea 50       	subi	r30, 0x0A	; 10
    3dfa:	f7 4f       	sbci	r31, 0xF7	; 247
    3dfc:	90 83       	st	Z, r25
    3dfe:	7e 5f       	subi	r23, 0xFE	; 254
    3e00:	6f 5f       	subi	r22, 0xFF	; 255
    3e02:	11 96       	adiw	r26, 0x01	; 1
    3e04:	9c 91       	ld	r25, X
    3e06:	11 97       	sbiw	r26, 0x01	; 1
    3e08:	69 17       	cp	r22, r25
    3e0a:	98 f2       	brcs	.-90     	; 0x3db2 <lora_driver_sent_upload_message+0x20>
    3e0c:	01 c0       	rjmp	.+2      	; 0x3e10 <lora_driver_sent_upload_message+0x7e>
    3e0e:	70 e0       	ldi	r23, 0x00	; 0
    3e10:	e7 2f       	mov	r30, r23
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
    3e14:	ea 50       	subi	r30, 0x0A	; 10
    3e16:	f7 4f       	sbci	r31, 0xF7	; 247
    3e18:	10 82       	st	Z, r1
    3e1a:	4c 91       	ld	r20, X
    3e1c:	81 11       	cpse	r24, r1
    3e1e:	03 c0       	rjmp	.+6      	; 0x3e26 <lora_driver_sent_upload_message+0x94>
    3e20:	81 ec       	ldi	r24, 0xC1	; 193
    3e22:	95 e0       	ldi	r25, 0x05	; 5
    3e24:	02 c0       	rjmp	.+4      	; 0x3e2a <lora_driver_sent_upload_message+0x98>
    3e26:	83 ec       	ldi	r24, 0xC3	; 195
    3e28:	95 e0       	ldi	r25, 0x05	; 5
    3e2a:	26 ef       	ldi	r18, 0xF6	; 246
    3e2c:	38 e0       	ldi	r19, 0x08	; 8
    3e2e:	3f 93       	push	r19
    3e30:	2f 93       	push	r18
    3e32:	1f 92       	push	r1
    3e34:	4f 93       	push	r20
    3e36:	9f 93       	push	r25
    3e38:	8f 93       	push	r24
    3e3a:	87 ec       	ldi	r24, 0xC7	; 199
    3e3c:	95 e0       	ldi	r25, 0x05	; 5
    3e3e:	9f 93       	push	r25
    3e40:	8f 93       	push	r24
    3e42:	88 e3       	ldi	r24, 0x38	; 56
    3e44:	99 e0       	ldi	r25, 0x09	; 9
    3e46:	9f 93       	push	r25
    3e48:	8f 93       	push	r24
    3e4a:	0e 94 03 29 	call	0x5206	; 0x5206 <sprintf>
    3e4e:	60 e0       	ldi	r22, 0x00	; 0
    3e50:	70 e0       	ldi	r23, 0x00	; 0
    3e52:	88 e3       	ldi	r24, 0x38	; 56
    3e54:	99 e0       	ldi	r25, 0x09	; 9
    3e56:	b9 de       	rcall	.-654    	; 0x3bca <_upload_message_rc>
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	f8 94       	cli
    3e5c:	de bf       	out	0x3e, r29	; 62
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	cd bf       	out	0x3d, r28	; 61
    3e62:	8e 30       	cpi	r24, 0x0E	; 14
    3e64:	51 f5       	brne	.+84     	; 0x3eba <lora_driver_sent_upload_message+0x128>
    3e66:	87 e0       	ldi	r24, 0x07	; 7
    3e68:	89 83       	std	Y+1, r24	; 0x01
    3e6a:	be 01       	movw	r22, r28
    3e6c:	6f 5f       	subi	r22, 0xFF	; 255
    3e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e70:	85 e6       	ldi	r24, 0x65	; 101
    3e72:	99 e0       	ldi	r25, 0x09	; 9
    3e74:	3c d1       	rcall	.+632    	; 0x40ee <decode_port_no>
    3e76:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <_downlink_payload>
    3e7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	eb 59       	subi	r30, 0x9B	; 155
    3e80:	f6 4f       	sbci	r31, 0xF6	; 246
    3e82:	df 01       	movw	r26, r30
    3e84:	0d 90       	ld	r0, X+
    3e86:	00 20       	and	r0, r0
    3e88:	e9 f7       	brne	.-6      	; 0x3e84 <lora_driver_sent_upload_message+0xf2>
    3e8a:	11 97       	sbiw	r26, 0x01	; 1
    3e8c:	ae 1b       	sub	r26, r30
    3e8e:	bf 0b       	sbc	r27, r31
    3e90:	aa 23       	and	r26, r26
    3e92:	81 f0       	breq	.+32     	; 0x3eb4 <lora_driver_sent_upload_message+0x122>
    3e94:	bb 27       	eor	r27, r27
    3e96:	11 97       	sbiw	r26, 0x01	; 1
    3e98:	cd 01       	movw	r24, r26
    3e9a:	0a f4       	brpl	.+2      	; 0x3e9e <lora_driver_sent_upload_message+0x10c>
    3e9c:	01 96       	adiw	r24, 0x01	; 1
    3e9e:	95 95       	asr	r25
    3ea0:	87 95       	ror	r24
    3ea2:	80 93 e1 08 	sts	0x08E1, r24	; 0x8008e1 <_downlink_payload+0x1>
    3ea6:	af 01       	movw	r20, r30
    3ea8:	4f 5f       	subi	r20, 0xFF	; 255
    3eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    3eac:	64 e1       	ldi	r22, 0x14	; 20
    3eae:	82 ee       	ldi	r24, 0xE2	; 226
    3eb0:	98 e0       	ldi	r25, 0x08	; 8
    3eb2:	49 d1       	rcall	.+658    	; 0x4146 <decode_hexadecimal_string_bytes>
    3eb4:	8e e0       	ldi	r24, 0x0E	; 14
    3eb6:	01 c0       	rjmp	.+2      	; 0x3eba <lora_driver_sent_upload_message+0x128>
    3eb8:	84 e1       	ldi	r24, 0x14	; 20
    3eba:	0f 90       	pop	r0
    3ebc:	df 91       	pop	r29
    3ebe:	cf 91       	pop	r28
    3ec0:	08 95       	ret

00003ec2 <lora_driver_set_adaptive_data_rate>:
    3ec2:	81 30       	cpi	r24, 0x01	; 1
    3ec4:	19 f0       	breq	.+6      	; 0x3ecc <lora_driver_set_adaptive_data_rate+0xa>
    3ec6:	67 ed       	ldi	r22, 0xD7	; 215
    3ec8:	75 e0       	ldi	r23, 0x05	; 5
    3eca:	02 c0       	rjmp	.+4      	; 0x3ed0 <lora_driver_set_adaptive_data_rate+0xe>
    3ecc:	67 e9       	ldi	r22, 0x97	; 151
    3ece:	76 e0       	ldi	r23, 0x06	; 6
    3ed0:	8b ed       	ldi	r24, 0xDB	; 219
    3ed2:	95 e0       	ldi	r25, 0x05	; 5
    3ed4:	7a ce       	rjmp	.-780    	; 0x3bca <_upload_message_rc>
    3ed6:	08 95       	ret

00003ed8 <lora_driver_configure_to_eu868>:
    3ed8:	2f 92       	push	r2
    3eda:	3f 92       	push	r3
    3edc:	4f 92       	push	r4
    3ede:	5f 92       	push	r5
    3ee0:	6f 92       	push	r6
    3ee2:	7f 92       	push	r7
    3ee4:	8f 92       	push	r8
    3ee6:	9f 92       	push	r9
    3ee8:	af 92       	push	r10
    3eea:	bf 92       	push	r11
    3eec:	cf 92       	push	r12
    3eee:	df 92       	push	r13
    3ef0:	ef 92       	push	r14
    3ef2:	ff 92       	push	r15
    3ef4:	0f 93       	push	r16
    3ef6:	1f 93       	push	r17
    3ef8:	cf 93       	push	r28
    3efa:	df 93       	push	r29
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	a0 97       	sbiw	r28, 0x20	; 32
    3f02:	0f b6       	in	r0, 0x3f	; 63
    3f04:	f8 94       	cli
    3f06:	de bf       	out	0x3e, r29	; 62
    3f08:	0f be       	out	0x3f, r0	; 63
    3f0a:	cd bf       	out	0x3d, r28	; 61
    3f0c:	60 e2       	ldi	r22, 0x20	; 32
    3f0e:	76 e0       	ldi	r23, 0x06	; 6
    3f10:	8c e2       	ldi	r24, 0x2C	; 44
    3f12:	96 e0       	ldi	r25, 0x06	; 6
    3f14:	c7 dd       	rcall	.-1138   	; 0x3aa4 <_upload_message>
    3f16:	1e de       	rcall	.-964    	; 0x3b54 <_reply2return_code>
    3f18:	81 11       	cpse	r24, r1
    3f1a:	a3 c0       	rjmp	.+326    	; 0x4062 <lora_driver_configure_to_eu868+0x18a>
    3f1c:	80 e2       	ldi	r24, 0x20	; 32
    3f1e:	e1 e2       	ldi	r30, 0x21	; 33
    3f20:	f2 e0       	ldi	r31, 0x02	; 2
    3f22:	de 01       	movw	r26, r28
    3f24:	11 96       	adiw	r26, 0x01	; 1
    3f26:	01 90       	ld	r0, Z+
    3f28:	0d 92       	st	X+, r0
    3f2a:	8a 95       	dec	r24
    3f2c:	e1 f7       	brne	.-8      	; 0x3f26 <lora_driver_configure_to_eu868+0x4e>
    3f2e:	9e 01       	movw	r18, r28
    3f30:	2f 5f       	subi	r18, 0xFF	; 255
    3f32:	3f 4f       	sbci	r19, 0xFF	; 255
    3f34:	69 01       	movw	r12, r18
    3f36:	e1 2c       	mov	r14, r1
    3f38:	f1 2c       	mov	r15, r1
    3f3a:	0f 2e       	mov	r0, r31
    3f3c:	f8 e3       	ldi	r31, 0x38	; 56
    3f3e:	af 2e       	mov	r10, r31
    3f40:	f6 e0       	ldi	r31, 0x06	; 6
    3f42:	bf 2e       	mov	r11, r31
    3f44:	f0 2d       	mov	r31, r0
    3f46:	08 e3       	ldi	r16, 0x38	; 56
    3f48:	19 e0       	ldi	r17, 0x09	; 9
    3f4a:	0f 2e       	mov	r0, r31
    3f4c:	f1 e5       	ldi	r31, 0x51	; 81
    3f4e:	4f 2e       	mov	r4, r31
    3f50:	f6 e0       	ldi	r31, 0x06	; 6
    3f52:	5f 2e       	mov	r5, r31
    3f54:	f0 2d       	mov	r31, r0
    3f56:	0f 2e       	mov	r0, r31
    3f58:	f8 e6       	ldi	r31, 0x68	; 104
    3f5a:	8f 2e       	mov	r8, r31
    3f5c:	f6 e0       	ldi	r31, 0x06	; 6
    3f5e:	9f 2e       	mov	r9, r31
    3f60:	f0 2d       	mov	r31, r0
    3f62:	0f 2e       	mov	r0, r31
    3f64:	f2 e8       	ldi	r31, 0x82	; 130
    3f66:	6f 2e       	mov	r6, r31
    3f68:	f6 e0       	ldi	r31, 0x06	; 6
    3f6a:	7f 2e       	mov	r7, r31
    3f6c:	f0 2d       	mov	r31, r0
    3f6e:	3e 2c       	mov	r3, r14
    3f70:	2f 2c       	mov	r2, r15
    3f72:	ff 92       	push	r15
    3f74:	ef 92       	push	r14
    3f76:	bf 92       	push	r11
    3f78:	af 92       	push	r10
    3f7a:	1f 93       	push	r17
    3f7c:	0f 93       	push	r16
    3f7e:	0e 94 03 29 	call	0x5206	; 0x5206 <sprintf>
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	70 e0       	ldi	r23, 0x00	; 0
    3f86:	c8 01       	movw	r24, r16
    3f88:	8d dd       	rcall	.-1254   	; 0x3aa4 <_upload_message>
    3f8a:	e4 dd       	rcall	.-1080   	; 0x3b54 <_reply2return_code>
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	0f 90       	pop	r0
    3f98:	81 11       	cpse	r24, r1
    3f9a:	63 c0       	rjmp	.+198    	; 0x4062 <lora_driver_configure_to_eu868+0x18a>
    3f9c:	32 e0       	ldi	r19, 0x02	; 2
    3f9e:	3e 15       	cp	r19, r14
    3fa0:	e8 f4       	brcc	.+58     	; 0x3fdc <lora_driver_configure_to_eu868+0x104>
    3fa2:	f6 01       	movw	r30, r12
    3fa4:	83 81       	ldd	r24, Z+3	; 0x03
    3fa6:	8f 93       	push	r24
    3fa8:	82 81       	ldd	r24, Z+2	; 0x02
    3faa:	8f 93       	push	r24
    3fac:	81 81       	ldd	r24, Z+1	; 0x01
    3fae:	8f 93       	push	r24
    3fb0:	80 81       	ld	r24, Z
    3fb2:	8f 93       	push	r24
    3fb4:	ff 92       	push	r15
    3fb6:	ef 92       	push	r14
    3fb8:	5f 92       	push	r5
    3fba:	4f 92       	push	r4
    3fbc:	1f 93       	push	r17
    3fbe:	0f 93       	push	r16
    3fc0:	0e 94 03 29 	call	0x5206	; 0x5206 <sprintf>
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	70 e0       	ldi	r23, 0x00	; 0
    3fc8:	c8 01       	movw	r24, r16
    3fca:	6c dd       	rcall	.-1320   	; 0x3aa4 <_upload_message>
    3fcc:	c3 dd       	rcall	.-1146   	; 0x3b54 <_reply2return_code>
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	f8 94       	cli
    3fd2:	de bf       	out	0x3e, r29	; 62
    3fd4:	0f be       	out	0x3f, r0	; 63
    3fd6:	cd bf       	out	0x3d, r28	; 61
    3fd8:	81 11       	cpse	r24, r1
    3fda:	43 c0       	rjmp	.+134    	; 0x4062 <lora_driver_configure_to_eu868+0x18a>
    3fdc:	2f 92       	push	r2
    3fde:	3f 92       	push	r3
    3fe0:	9f 92       	push	r9
    3fe2:	8f 92       	push	r8
    3fe4:	1f 93       	push	r17
    3fe6:	0f 93       	push	r16
    3fe8:	0e 94 03 29 	call	0x5206	; 0x5206 <sprintf>
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	70 e0       	ldi	r23, 0x00	; 0
    3ff0:	c8 01       	movw	r24, r16
    3ff2:	58 dd       	rcall	.-1360   	; 0x3aa4 <_upload_message>
    3ff4:	af dd       	rcall	.-1186   	; 0x3b54 <_reply2return_code>
    3ff6:	0f 90       	pop	r0
    3ff8:	0f 90       	pop	r0
    3ffa:	0f 90       	pop	r0
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	0f 90       	pop	r0
    4002:	81 11       	cpse	r24, r1
    4004:	2e c0       	rjmp	.+92     	; 0x4062 <lora_driver_configure_to_eu868+0x18a>
    4006:	2f 92       	push	r2
    4008:	3f 92       	push	r3
    400a:	7f 92       	push	r7
    400c:	6f 92       	push	r6
    400e:	1f 93       	push	r17
    4010:	0f 93       	push	r16
    4012:	0e 94 03 29 	call	0x5206	; 0x5206 <sprintf>
    4016:	60 e0       	ldi	r22, 0x00	; 0
    4018:	70 e0       	ldi	r23, 0x00	; 0
    401a:	c8 01       	movw	r24, r16
    401c:	43 dd       	rcall	.-1402   	; 0x3aa4 <_upload_message>
    401e:	9a dd       	rcall	.-1228   	; 0x3b54 <_reply2return_code>
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	0f 90       	pop	r0
    402a:	0f 90       	pop	r0
    402c:	81 11       	cpse	r24, r1
    402e:	19 c0       	rjmp	.+50     	; 0x4062 <lora_driver_configure_to_eu868+0x18a>
    4030:	3f ef       	ldi	r19, 0xFF	; 255
    4032:	e3 1a       	sub	r14, r19
    4034:	f3 0a       	sbc	r15, r19
    4036:	84 e0       	ldi	r24, 0x04	; 4
    4038:	c8 0e       	add	r12, r24
    403a:	d1 1c       	adc	r13, r1
    403c:	98 e0       	ldi	r25, 0x08	; 8
    403e:	e9 16       	cp	r14, r25
    4040:	f1 04       	cpc	r15, r1
    4042:	09 f0       	breq	.+2      	; 0x4046 <lora_driver_configure_to_eu868+0x16e>
    4044:	94 cf       	rjmp	.-216    	; 0x3f6e <lora_driver_configure_to_eu868+0x96>
    4046:	60 e0       	ldi	r22, 0x00	; 0
    4048:	70 e0       	ldi	r23, 0x00	; 0
    404a:	8a e9       	ldi	r24, 0x9A	; 154
    404c:	96 e0       	ldi	r25, 0x06	; 6
    404e:	2a dd       	rcall	.-1452   	; 0x3aa4 <_upload_message>
    4050:	81 dd       	rcall	.-1278   	; 0x3b54 <_reply2return_code>
    4052:	81 11       	cpse	r24, r1
    4054:	06 c0       	rjmp	.+12     	; 0x4062 <lora_driver_configure_to_eu868+0x18a>
    4056:	60 e0       	ldi	r22, 0x00	; 0
    4058:	70 e0       	ldi	r23, 0x00	; 0
    405a:	8b ea       	ldi	r24, 0xAB	; 171
    405c:	96 e0       	ldi	r25, 0x06	; 6
    405e:	22 dd       	rcall	.-1468   	; 0x3aa4 <_upload_message>
    4060:	79 dd       	rcall	.-1294   	; 0x3b54 <_reply2return_code>
    4062:	a0 96       	adiw	r28, 0x20	; 32
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	df 91       	pop	r29
    4070:	cf 91       	pop	r28
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	ff 90       	pop	r15
    4078:	ef 90       	pop	r14
    407a:	df 90       	pop	r13
    407c:	cf 90       	pop	r12
    407e:	bf 90       	pop	r11
    4080:	af 90       	pop	r10
    4082:	9f 90       	pop	r9
    4084:	8f 90       	pop	r8
    4086:	7f 90       	pop	r7
    4088:	6f 90       	pop	r6
    408a:	5f 90       	pop	r5
    408c:	4f 90       	pop	r4
    408e:	3f 90       	pop	r3
    4090:	2f 90       	pop	r2
    4092:	08 95       	ret

00004094 <lora_driver_set_otaa_identity>:
    4094:	ef 92       	push	r14
    4096:	ff 92       	push	r15
    4098:	0f 93       	push	r16
    409a:	1f 93       	push	r17
    409c:	cf 93       	push	r28
    409e:	df 93       	push	r29
    40a0:	ec 01       	movw	r28, r24
    40a2:	8b 01       	movw	r16, r22
    40a4:	7a 01       	movw	r14, r20
    40a6:	81 e0       	ldi	r24, 0x01	; 1
    40a8:	0c df       	rcall	.-488    	; 0x3ec2 <lora_driver_set_adaptive_data_rate>
    40aa:	81 11       	cpse	r24, r1
    40ac:	0d c0       	rjmp	.+26     	; 0x40c8 <lora_driver_set_otaa_identity+0x34>
    40ae:	ce 01       	movw	r24, r28
    40b0:	25 de       	rcall	.-950    	; 0x3cfc <lora_driver_set_application_identifier>
    40b2:	81 11       	cpse	r24, r1
    40b4:	09 c0       	rjmp	.+18     	; 0x40c8 <lora_driver_set_otaa_identity+0x34>
    40b6:	c8 01       	movw	r24, r16
    40b8:	32 de       	rcall	.-924    	; 0x3d1e <lora_driver_set_application_key>
    40ba:	81 11       	cpse	r24, r1
    40bc:	05 c0       	rjmp	.+10     	; 0x40c8 <lora_driver_set_otaa_identity+0x34>
    40be:	c7 01       	movw	r24, r14
    40c0:	0c de       	rcall	.-1000   	; 0x3cda <lora_driver_set_device_identifier>
    40c2:	81 11       	cpse	r24, r1
    40c4:	01 c0       	rjmp	.+2      	; 0x40c8 <lora_driver_set_otaa_identity+0x34>
    40c6:	3c de       	rcall	.-904    	; 0x3d40 <lora_driver_save_mac>
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	1f 91       	pop	r17
    40ce:	0f 91       	pop	r16
    40d0:	ff 90       	pop	r15
    40d2:	ef 90       	pop	r14
    40d4:	08 95       	ret

000040d6 <lora_driver_map_return_code_to_text>:
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	fc 01       	movw	r30, r24
    40da:	ee 0f       	add	r30, r30
    40dc:	ff 1f       	adc	r31, r31
    40de:	8e 0f       	add	r24, r30
    40e0:	9f 1f       	adc	r25, r31
    40e2:	fc 01       	movw	r30, r24
    40e4:	e9 58       	subi	r30, 0x89	; 137
    40e6:	f8 4f       	sbci	r31, 0xF8	; 248
    40e8:	81 81       	ldd	r24, Z+1	; 0x01
    40ea:	92 81       	ldd	r25, Z+2	; 0x02
    40ec:	08 95       	ret

000040ee <decode_port_no>:
    40ee:	dc 01       	movw	r26, r24
    40f0:	00 97       	sbiw	r24, 0x00	; 0
    40f2:	29 f1       	breq	.+74     	; 0x413e <decode_port_no+0x50>
    40f4:	fb 01       	movw	r30, r22
    40f6:	20 81       	ld	r18, Z
    40f8:	fc 01       	movw	r30, r24
    40fa:	01 90       	ld	r0, Z+
    40fc:	00 20       	and	r0, r0
    40fe:	e9 f7       	brne	.-6      	; 0x40fa <decode_port_no+0xc>
    4100:	31 97       	sbiw	r30, 0x01	; 1
    4102:	e8 1b       	sub	r30, r24
    4104:	f9 0b       	sbc	r31, r25
    4106:	82 2f       	mov	r24, r18
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	e8 17       	cp	r30, r24
    410c:	f9 07       	cpc	r31, r25
    410e:	c8 f0       	brcs	.+50     	; 0x4142 <decode_port_no+0x54>
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	08 c0       	rjmp	.+16     	; 0x4124 <decode_port_no+0x36>
    4114:	88 0f       	add	r24, r24
    4116:	38 2f       	mov	r19, r24
    4118:	33 0f       	add	r19, r19
    411a:	33 0f       	add	r19, r19
    411c:	83 0f       	add	r24, r19
    411e:	80 53       	subi	r24, 0x30	; 48
    4120:	89 0f       	add	r24, r25
    4122:	2f 5f       	subi	r18, 0xFF	; 255
    4124:	fd 01       	movw	r30, r26
    4126:	e2 0f       	add	r30, r18
    4128:	f1 1d       	adc	r31, r1
    412a:	90 81       	ld	r25, Z
    412c:	30 ed       	ldi	r19, 0xD0	; 208
    412e:	39 0f       	add	r19, r25
    4130:	3a 30       	cpi	r19, 0x0A	; 10
    4132:	10 f4       	brcc	.+4      	; 0x4138 <decode_port_no+0x4a>
    4134:	91 11       	cpse	r25, r1
    4136:	ee cf       	rjmp	.-36     	; 0x4114 <decode_port_no+0x26>
    4138:	fb 01       	movw	r30, r22
    413a:	20 83       	st	Z, r18
    413c:	08 95       	ret
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	08 95       	ret
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	08 95       	ret

00004146 <decode_hexadecimal_string_bytes>:
    4146:	0f 93       	push	r16
    4148:	1f 93       	push	r17
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	dc 01       	movw	r26, r24
    4150:	ea 01       	movw	r28, r20
    4152:	20 97       	sbiw	r28, 0x00	; 0
    4154:	e1 f1       	breq	.+120    	; 0x41ce <decode_hexadecimal_string_bytes+0x88>
    4156:	fa 01       	movw	r30, r20
    4158:	01 90       	ld	r0, Z+
    415a:	00 20       	and	r0, r0
    415c:	e9 f7       	brne	.-6      	; 0x4158 <decode_hexadecimal_string_bytes+0x12>
    415e:	31 97       	sbiw	r30, 0x01	; 1
    4160:	e4 1b       	sub	r30, r20
    4162:	f5 0b       	sbc	r31, r21
    4164:	32 97       	sbiw	r30, 0x02	; 2
    4166:	10 f5       	brcc	.+68     	; 0x41ac <decode_hexadecimal_string_bytes+0x66>
    4168:	32 c0       	rjmp	.+100    	; 0x41ce <decode_hexadecimal_string_bytes+0x88>
    416a:	8d 01       	movw	r16, r26
    416c:	04 0f       	add	r16, r20
    416e:	15 1f       	adc	r17, r21
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	ae 01       	movw	r20, r28
    4174:	42 0f       	add	r20, r18
    4176:	53 1f       	adc	r21, r19
    4178:	fa 01       	movw	r30, r20
    417a:	90 81       	ld	r25, Z
    417c:	91 34       	cpi	r25, 0x41	; 65
    417e:	28 f0       	brcs	.+10     	; 0x418a <decode_hexadecimal_string_bytes+0x44>
    4180:	97 53       	subi	r25, 0x37	; 55
    4182:	59 2f       	mov	r21, r25
    4184:	52 95       	swap	r21
    4186:	50 7f       	andi	r21, 0xF0	; 240
    4188:	03 c0       	rjmp	.+6      	; 0x4190 <decode_hexadecimal_string_bytes+0x4a>
    418a:	59 2f       	mov	r21, r25
    418c:	52 95       	swap	r21
    418e:	50 7f       	andi	r21, 0xF0	; 240
    4190:	2c 0f       	add	r18, r28
    4192:	3d 1f       	adc	r19, r29
    4194:	f9 01       	movw	r30, r18
    4196:	91 81       	ldd	r25, Z+1	; 0x01
    4198:	91 34       	cpi	r25, 0x41	; 65
    419a:	10 f0       	brcs	.+4      	; 0x41a0 <decode_hexadecimal_string_bytes+0x5a>
    419c:	97 53       	subi	r25, 0x37	; 55
    419e:	01 c0       	rjmp	.+2      	; 0x41a2 <decode_hexadecimal_string_bytes+0x5c>
    41a0:	90 53       	subi	r25, 0x30	; 48
    41a2:	95 0f       	add	r25, r21
    41a4:	f8 01       	movw	r30, r16
    41a6:	90 83       	st	Z, r25
    41a8:	8f 5f       	subi	r24, 0xFF	; 255
    41aa:	01 c0       	rjmp	.+2      	; 0x41ae <decode_hexadecimal_string_bytes+0x68>
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	28 2f       	mov	r18, r24
    41b0:	22 0f       	add	r18, r18
    41b2:	48 2f       	mov	r20, r24
    41b4:	50 e0       	ldi	r21, 0x00	; 0
    41b6:	fe 01       	movw	r30, r28
    41b8:	01 90       	ld	r0, Z+
    41ba:	00 20       	and	r0, r0
    41bc:	e9 f7       	brne	.-6      	; 0x41b8 <decode_hexadecimal_string_bytes+0x72>
    41be:	31 97       	sbiw	r30, 0x01	; 1
    41c0:	ec 1b       	sub	r30, r28
    41c2:	fd 0b       	sbc	r31, r29
    41c4:	4e 17       	cp	r20, r30
    41c6:	5f 07       	cpc	r21, r31
    41c8:	10 f4       	brcc	.+4      	; 0x41ce <decode_hexadecimal_string_bytes+0x88>
    41ca:	86 13       	cpse	r24, r22
    41cc:	ce cf       	rjmp	.-100    	; 0x416a <decode_hexadecimal_string_bytes+0x24>
    41ce:	df 91       	pop	r29
    41d0:	cf 91       	pop	r28
    41d2:	1f 91       	pop	r17
    41d4:	0f 91       	pop	r16
    41d6:	08 95       	ret

000041d8 <reg_read_register>:
    41d8:	fc 01       	movw	r30, r24
    41da:	80 81       	ld	r24, Z
    41dc:	08 95       	ret

000041de <reg_read_bit>:
    41de:	fc 01       	movw	r30, r24
    41e0:	20 81       	ld	r18, Z
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	02 c0       	rjmp	.+4      	; 0x41ec <reg_read_bit+0xe>
    41e8:	88 0f       	add	r24, r24
    41ea:	99 1f       	adc	r25, r25
    41ec:	6a 95       	dec	r22
    41ee:	e2 f7       	brpl	.-8      	; 0x41e8 <reg_read_bit+0xa>
    41f0:	82 23       	and	r24, r18
    41f2:	08 95       	ret

000041f4 <reg_read_bits>:
    41f4:	fc 01       	movw	r30, r24
    41f6:	80 81       	ld	r24, Z
    41f8:	86 23       	and	r24, r22
    41fa:	08 95       	ret

000041fc <reg_set_register>:
    41fc:	fc 01       	movw	r30, r24
    41fe:	60 83       	st	Z, r22
    4200:	08 95       	ret

00004202 <reg_clear_register>:
    4202:	fc 01       	movw	r30, r24
    4204:	10 82       	st	Z, r1
    4206:	08 95       	ret

00004208 <reg_set_bit>:
    4208:	fc 01       	movw	r30, r24
    420a:	40 81       	ld	r20, Z
    420c:	21 e0       	ldi	r18, 0x01	; 1
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	02 c0       	rjmp	.+4      	; 0x4216 <reg_set_bit+0xe>
    4212:	22 0f       	add	r18, r18
    4214:	33 1f       	adc	r19, r19
    4216:	6a 95       	dec	r22
    4218:	e2 f7       	brpl	.-8      	; 0x4212 <reg_set_bit+0xa>
    421a:	24 2b       	or	r18, r20
    421c:	20 83       	st	Z, r18
    421e:	08 95       	ret

00004220 <reg_set_bits>:
    4220:	fc 01       	movw	r30, r24
    4222:	20 81       	ld	r18, Z
    4224:	62 2b       	or	r22, r18
    4226:	60 83       	st	Z, r22
    4228:	08 95       	ret

0000422a <reg_toggle_bit>:
    422a:	fc 01       	movw	r30, r24
    422c:	40 81       	ld	r20, Z
    422e:	21 e0       	ldi	r18, 0x01	; 1
    4230:	30 e0       	ldi	r19, 0x00	; 0
    4232:	02 c0       	rjmp	.+4      	; 0x4238 <reg_toggle_bit+0xe>
    4234:	22 0f       	add	r18, r18
    4236:	33 1f       	adc	r19, r19
    4238:	6a 95       	dec	r22
    423a:	e2 f7       	brpl	.-8      	; 0x4234 <reg_toggle_bit+0xa>
    423c:	24 27       	eor	r18, r20
    423e:	20 83       	st	Z, r18
    4240:	08 95       	ret

00004242 <reg_toggle_bits>:
    4242:	fc 01       	movw	r30, r24
    4244:	20 81       	ld	r18, Z
    4246:	62 27       	eor	r22, r18
    4248:	60 83       	st	Z, r22
    424a:	08 95       	ret

0000424c <reg_clear_bit>:
    424c:	fc 01       	movw	r30, r24
    424e:	90 81       	ld	r25, Z
    4250:	21 e0       	ldi	r18, 0x01	; 1
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	02 c0       	rjmp	.+4      	; 0x425a <reg_clear_bit+0xe>
    4256:	22 0f       	add	r18, r18
    4258:	33 1f       	adc	r19, r19
    425a:	6a 95       	dec	r22
    425c:	e2 f7       	brpl	.-8      	; 0x4256 <reg_clear_bit+0xa>
    425e:	20 95       	com	r18
    4260:	29 23       	and	r18, r25
    4262:	20 83       	st	Z, r18
    4264:	08 95       	ret

00004266 <reg_clear_bits>:
    4266:	fc 01       	movw	r30, r24
    4268:	90 81       	ld	r25, Z
    426a:	60 95       	com	r22
    426c:	69 23       	and	r22, r25
    426e:	60 83       	st	Z, r22
    4270:	08 95       	ret

00004272 <_serial_call_back>:
    4272:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <crc_sum.1941>
    4276:	86 0f       	add	r24, r22
    4278:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <crc_sum.1941>
    427c:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <_mh_state>
    4280:	91 30       	cpi	r25, 0x01	; 1
    4282:	79 f0       	breq	.+30     	; 0x42a2 <_serial_call_back+0x30>
    4284:	28 f0       	brcs	.+10     	; 0x4290 <_serial_call_back+0x1e>
    4286:	92 30       	cpi	r25, 0x02	; 2
    4288:	a9 f0       	breq	.+42     	; 0x42b4 <_serial_call_back+0x42>
    428a:	93 30       	cpi	r25, 0x03	; 3
    428c:	19 f1       	breq	.+70     	; 0x42d4 <_serial_call_back+0x62>
    428e:	08 95       	ret
    4290:	6f 3f       	cpi	r22, 0xFF	; 255
    4292:	09 f0       	breq	.+2      	; 0x4296 <_serial_call_back+0x24>
    4294:	48 c0       	rjmp	.+144    	; 0x4326 <_serial_call_back+0xb4>
    4296:	10 92 95 09 	sts	0x0995, r1	; 0x800995 <crc_sum.1941>
    429a:	81 e0       	ldi	r24, 0x01	; 1
    429c:	80 93 98 09 	sts	0x0998, r24	; 0x800998 <_mh_state>
    42a0:	08 95       	ret
    42a2:	66 38       	cpi	r22, 0x86	; 134
    42a4:	09 f0       	breq	.+2      	; 0x42a8 <_serial_call_back+0x36>
    42a6:	3f c0       	rjmp	.+126    	; 0x4326 <_serial_call_back+0xb4>
    42a8:	10 92 94 09 	sts	0x0994, r1	; 0x800994 <inDex.1939>
    42ac:	82 e0       	ldi	r24, 0x02	; 2
    42ae:	80 93 98 09 	sts	0x0998, r24	; 0x800998 <_mh_state>
    42b2:	08 95       	ret
    42b4:	e0 91 94 09 	lds	r30, 0x0994	; 0x800994 <inDex.1939>
    42b8:	81 e0       	ldi	r24, 0x01	; 1
    42ba:	8e 0f       	add	r24, r30
    42bc:	80 93 94 09 	sts	0x0994, r24	; 0x800994 <inDex.1939>
    42c0:	f0 e0       	ldi	r31, 0x00	; 0
    42c2:	ee 56       	subi	r30, 0x6E	; 110
    42c4:	f6 4f       	sbci	r31, 0xF6	; 246
    42c6:	60 83       	st	Z, r22
    42c8:	82 30       	cpi	r24, 0x02	; 2
    42ca:	69 f5       	brne	.+90     	; 0x4326 <_serial_call_back+0xb4>
    42cc:	83 e0       	ldi	r24, 0x03	; 3
    42ce:	80 93 98 09 	sts	0x0998, r24	; 0x800998 <_mh_state>
    42d2:	08 95       	ret
    42d4:	90 91 94 09 	lds	r25, 0x0994	; 0x800994 <inDex.1939>
    42d8:	21 e0       	ldi	r18, 0x01	; 1
    42da:	29 0f       	add	r18, r25
    42dc:	20 93 94 09 	sts	0x0994, r18	; 0x800994 <inDex.1939>
    42e0:	96 30       	cpi	r25, 0x06	; 6
    42e2:	09 f5       	brne	.+66     	; 0x4326 <_serial_call_back+0xb4>
    42e4:	81 11       	cpse	r24, r1
    42e6:	0e c0       	rjmp	.+28     	; 0x4304 <_serial_call_back+0x92>
    42e8:	e2 e9       	ldi	r30, 0x92	; 146
    42ea:	f9 e0       	ldi	r31, 0x09	; 9
    42ec:	80 81       	ld	r24, Z
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	98 2f       	mov	r25, r24
    42f2:	88 27       	eor	r24, r24
    42f4:	21 81       	ldd	r18, Z+1	; 0x01
    42f6:	82 0f       	add	r24, r18
    42f8:	91 1d       	adc	r25, r1
    42fa:	90 93 9a 09 	sts	0x099A, r25	; 0x80099a <_ppm+0x1>
    42fe:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <_ppm>
    4302:	04 c0       	rjmp	.+8      	; 0x430c <_serial_call_back+0x9a>
    4304:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <_ppm+0x1>
    4308:	10 92 99 09 	sts	0x0999, r1	; 0x800999 <_ppm>
    430c:	10 92 98 09 	sts	0x0998, r1	; 0x800998 <_mh_state>
    4310:	e0 91 96 09 	lds	r30, 0x0996	; 0x800996 <_app_call_back>
    4314:	f0 91 97 09 	lds	r31, 0x0997	; 0x800997 <_app_call_back+0x1>
    4318:	30 97       	sbiw	r30, 0x00	; 0
    431a:	29 f0       	breq	.+10     	; 0x4326 <_serial_call_back+0xb4>
    431c:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <_ppm>
    4320:	90 91 9a 09 	lds	r25, 0x099A	; 0x80099a <_ppm+0x1>
    4324:	19 95       	eicall
    4326:	08 95       	ret

00004328 <mh_z19_create>:
    4328:	8f 92       	push	r8
    432a:	9f 92       	push	r9
    432c:	af 92       	push	r10
    432e:	cf 92       	push	r12
    4330:	ef 92       	push	r14
    4332:	0f 93       	push	r16
    4334:	cf 93       	push	r28
    4336:	df 93       	push	r29
    4338:	eb 01       	movw	r28, r22
    433a:	0f 2e       	mov	r0, r31
    433c:	f9 e3       	ldi	r31, 0x39	; 57
    433e:	8f 2e       	mov	r8, r31
    4340:	f1 e2       	ldi	r31, 0x21	; 33
    4342:	9f 2e       	mov	r9, r31
    4344:	f0 2d       	mov	r31, r0
    4346:	68 94       	set
    4348:	aa 24       	eor	r10, r10
    434a:	a4 f8       	bld	r10, 4
    434c:	68 94       	set
    434e:	cc 24       	eor	r12, r12
    4350:	c4 f8       	bld	r12, 4
    4352:	e1 2c       	mov	r14, r1
    4354:	00 e0       	ldi	r16, 0x00	; 0
    4356:	23 e0       	ldi	r18, 0x03	; 3
    4358:	40 e8       	ldi	r20, 0x80	; 128
    435a:	55 e2       	ldi	r21, 0x25	; 37
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	70 e0       	ldi	r23, 0x00	; 0
    4360:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <serial_new_instance>
    4364:	90 93 9c 09 	sts	0x099C, r25	; 0x80099c <_serial+0x1>
    4368:	80 93 9b 09 	sts	0x099B, r24	; 0x80099b <_serial>
    436c:	d0 93 97 09 	sts	0x0997, r29	; 0x800997 <_app_call_back+0x1>
    4370:	c0 93 96 09 	sts	0x0996, r28	; 0x800996 <_app_call_back>
    4374:	df 91       	pop	r29
    4376:	cf 91       	pop	r28
    4378:	0f 91       	pop	r16
    437a:	ef 90       	pop	r14
    437c:	cf 90       	pop	r12
    437e:	af 90       	pop	r10
    4380:	9f 90       	pop	r9
    4382:	8f 90       	pop	r8
    4384:	08 95       	ret

00004386 <mh_z19_take_meassuring>:
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	cd b7       	in	r28, 0x3d	; 61
    438c:	de b7       	in	r29, 0x3e	; 62
    438e:	29 97       	sbiw	r28, 0x09	; 9
    4390:	0f b6       	in	r0, 0x3f	; 63
    4392:	f8 94       	cli
    4394:	de bf       	out	0x3e, r29	; 62
    4396:	0f be       	out	0x3f, r0	; 63
    4398:	cd bf       	out	0x3d, r28	; 61
    439a:	89 e0       	ldi	r24, 0x09	; 9
    439c:	e1 e4       	ldi	r30, 0x41	; 65
    439e:	f2 e0       	ldi	r31, 0x02	; 2
    43a0:	9e 01       	movw	r18, r28
    43a2:	2f 5f       	subi	r18, 0xFF	; 255
    43a4:	3f 4f       	sbci	r19, 0xFF	; 255
    43a6:	d9 01       	movw	r26, r18
    43a8:	01 90       	ld	r0, Z+
    43aa:	0d 92       	st	X+, r0
    43ac:	8a 95       	dec	r24
    43ae:	e1 f7       	brne	.-8      	; 0x43a8 <mh_z19_take_meassuring+0x22>
    43b0:	10 92 9a 09 	sts	0x099A, r1	; 0x80099a <_ppm+0x1>
    43b4:	10 92 99 09 	sts	0x0999, r1	; 0x800999 <_ppm>
    43b8:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <_serial>
    43bc:	90 91 9c 09 	lds	r25, 0x099C	; 0x80099c <_serial+0x1>
    43c0:	00 97       	sbiw	r24, 0x00	; 0
    43c2:	39 f0       	breq	.+14     	; 0x43d2 <mh_z19_take_meassuring+0x4c>
    43c4:	42 2f       	mov	r20, r18
    43c6:	53 2f       	mov	r21, r19
    43c8:	69 e0       	ldi	r22, 0x09	; 9
    43ca:	0e 94 37 18 	call	0x306e	; 0x306e <serial_send_bytes>
    43ce:	80 e0       	ldi	r24, 0x00	; 0
    43d0:	01 c0       	rjmp	.+2      	; 0x43d4 <mh_z19_take_meassuring+0x4e>
    43d2:	82 e0       	ldi	r24, 0x02	; 2
    43d4:	29 96       	adiw	r28, 0x09	; 9
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	f8 94       	cli
    43da:	de bf       	out	0x3e, r29	; 62
    43dc:	0f be       	out	0x3f, r0	; 63
    43de:	cd bf       	out	0x3d, r28	; 61
    43e0:	df 91       	pop	r29
    43e2:	cf 91       	pop	r28
    43e4:	08 95       	ret

000043e6 <rcServoSet>:
    43e6:	65 36       	cpi	r22, 0x65	; 101
    43e8:	0c f0       	brlt	.+2      	; 0x43ec <rcServoSet+0x6>
    43ea:	64 e6       	ldi	r22, 0x64	; 100
    43ec:	6c 39       	cpi	r22, 0x9C	; 156
    43ee:	0c f4       	brge	.+2      	; 0x43f2 <rcServoSet+0xc>
    43f0:	6c e9       	ldi	r22, 0x9C	; 156
    43f2:	96 ef       	ldi	r25, 0xF6	; 246
    43f4:	69 02       	muls	r22, r25
    43f6:	b0 01       	movw	r22, r0
    43f8:	11 24       	eor	r1, r1
    43fa:	68 54       	subi	r22, 0x48	; 72
    43fc:	74 4f       	sbci	r23, 0xF4	; 244
    43fe:	81 11       	cpse	r24, r1
    4400:	05 c0       	rjmp	.+10     	; 0x440c <rcServoSet+0x26>
    4402:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    4406:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    440a:	08 95       	ret
    440c:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    4410:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    4414:	08 95       	ret

00004416 <rcServoCreate>:
    4416:	ea e0       	ldi	r30, 0x0A	; 10
    4418:	f1 e0       	ldi	r31, 0x01	; 1
    441a:	80 81       	ld	r24, Z
    441c:	88 61       	ori	r24, 0x18	; 24
    441e:	80 83       	st	Z, r24
    4420:	8f e3       	ldi	r24, 0x3F	; 63
    4422:	9c e9       	ldi	r25, 0x9C	; 156
    4424:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    4428:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    442c:	60 e0       	ldi	r22, 0x00	; 0
    442e:	80 e0       	ldi	r24, 0x00	; 0
    4430:	da df       	rcall	.-76     	; 0x43e6 <rcServoSet>
    4432:	60 e0       	ldi	r22, 0x00	; 0
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	d7 df       	rcall	.-82     	; 0x43e6 <rcServoSet>
    4438:	e0 e2       	ldi	r30, 0x20	; 32
    443a:	f1 e0       	ldi	r31, 0x01	; 1
    443c:	80 81       	ld	r24, Z
    443e:	82 6a       	ori	r24, 0xA2	; 162
    4440:	80 83       	st	Z, r24
    4442:	e1 e2       	ldi	r30, 0x21	; 33
    4444:	f1 e0       	ldi	r31, 0x01	; 1
    4446:	80 81       	ld	r24, Z
    4448:	8a 61       	ori	r24, 0x1A	; 26
    444a:	80 83       	st	Z, r24
    444c:	08 95       	ret

0000444e <_callBack>:
    444e:	e0 91 a5 09 	lds	r30, 0x09A5	; 0x8009a5 <_callBackFunction>
    4452:	f0 91 a6 09 	lds	r31, 0x09A6	; 0x8009a6 <_callBackFunction+0x1>
    4456:	30 97       	sbiw	r30, 0x00	; 0
    4458:	09 f0       	breq	.+2      	; 0x445c <_callBack+0xe>
    445a:	19 95       	eicall
    445c:	08 95       	ret

0000445e <_tsl2591TwiCallback>:
    445e:	64 50       	subi	r22, 0x04	; 4
    4460:	62 30       	cpi	r22, 0x02	; 2
    4462:	08 f0       	brcs	.+2      	; 0x4466 <_tsl2591TwiCallback+0x8>
    4464:	3b c0       	rjmp	.+118    	; 0x44dc <_tsl2591TwiCallback+0x7e>
    4466:	20 91 a4 09 	lds	r18, 0x09A4	; 0x8009a4 <_nextState>
    446a:	22 30       	cpi	r18, 0x02	; 2
    446c:	79 f0       	breq	.+30     	; 0x448c <_tsl2591TwiCallback+0x2e>
    446e:	18 f4       	brcc	.+6      	; 0x4476 <_tsl2591TwiCallback+0x18>
    4470:	21 30       	cpi	r18, 0x01	; 1
    4472:	31 f0       	breq	.+12     	; 0x4480 <_tsl2591TwiCallback+0x22>
    4474:	30 c0       	rjmp	.+96     	; 0x44d6 <_tsl2591TwiCallback+0x78>
    4476:	23 30       	cpi	r18, 0x03	; 3
    4478:	81 f0       	breq	.+32     	; 0x449a <_tsl2591TwiCallback+0x3c>
    447a:	24 30       	cpi	r18, 0x04	; 4
    447c:	a1 f0       	breq	.+40     	; 0x44a6 <_tsl2591TwiCallback+0x48>
    447e:	2b c0       	rjmp	.+86     	; 0x44d6 <_tsl2591TwiCallback+0x78>
    4480:	22 e0       	ldi	r18, 0x02	; 2
    4482:	20 93 a4 09 	sts	0x09A4, r18	; 0x8009a4 <_nextState>
    4486:	61 e0       	ldi	r22, 0x01	; 1
    4488:	0a c2       	rjmp	.+1044   	; 0x489e <twiReceive>
    448a:	08 95       	ret
    448c:	fa 01       	movw	r30, r20
    448e:	80 81       	ld	r24, Z
    4490:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <_deviceId>
    4494:	82 e0       	ldi	r24, 0x02	; 2
    4496:	db cf       	rjmp	.-74     	; 0x444e <_callBack>
    4498:	08 95       	ret
    449a:	24 e0       	ldi	r18, 0x04	; 4
    449c:	20 93 a4 09 	sts	0x09A4, r18	; 0x8009a4 <_nextState>
    44a0:	64 e0       	ldi	r22, 0x04	; 4
    44a2:	fd c1       	rjmp	.+1018   	; 0x489e <twiReceive>
    44a4:	08 95       	ret
    44a6:	fa 01       	movw	r30, r20
    44a8:	81 81       	ldd	r24, Z+1	; 0x01
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	98 2f       	mov	r25, r24
    44ae:	88 27       	eor	r24, r24
    44b0:	20 81       	ld	r18, Z
    44b2:	82 2b       	or	r24, r18
    44b4:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <_fullSpectrumRaw+0x1>
    44b8:	80 93 9f 09 	sts	0x099F, r24	; 0x80099f <_fullSpectrumRaw>
    44bc:	83 81       	ldd	r24, Z+3	; 0x03
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	98 2f       	mov	r25, r24
    44c2:	88 27       	eor	r24, r24
    44c4:	22 81       	ldd	r18, Z+2	; 0x02
    44c6:	82 2b       	or	r24, r18
    44c8:	90 93 9e 09 	sts	0x099E, r25	; 0x80099e <_infraredRaw+0x1>
    44cc:	80 93 9d 09 	sts	0x099D, r24	; 0x80099d <_infraredRaw>
    44d0:	81 e0       	ldi	r24, 0x01	; 1
    44d2:	bd cf       	rjmp	.-134    	; 0x444e <_callBack>
    44d4:	08 95       	ret
    44d6:	80 e0       	ldi	r24, 0x00	; 0
    44d8:	ba cf       	rjmp	.-140    	; 0x444e <_callBack>
    44da:	08 95       	ret
    44dc:	10 92 a4 09 	sts	0x09A4, r1	; 0x8009a4 <_nextState>
    44e0:	86 e0       	ldi	r24, 0x06	; 6
    44e2:	b5 cf       	rjmp	.-150    	; 0x444e <_callBack>
    44e4:	08 95       	ret

000044e6 <_twiTransmit>:
    44e6:	20 91 a7 09 	lds	r18, 0x09A7	; 0x8009a7 <_twiHandler>
    44ea:	30 91 a8 09 	lds	r19, 0x09A8	; 0x8009a8 <_twiHandler+0x1>
    44ee:	21 15       	cp	r18, r1
    44f0:	31 05       	cpc	r19, r1
    44f2:	41 f0       	breq	.+16     	; 0x4504 <_twiTransmit+0x1e>
    44f4:	46 2f       	mov	r20, r22
    44f6:	bc 01       	movw	r22, r24
    44f8:	c9 01       	movw	r24, r18
    44fa:	85 d1       	rcall	.+778    	; 0x4806 <twiTransmit>
    44fc:	82 30       	cpi	r24, 0x02	; 2
    44fe:	21 f0       	breq	.+8      	; 0x4508 <_twiTransmit+0x22>
    4500:	80 e0       	ldi	r24, 0x00	; 0
    4502:	08 95       	ret
    4504:	87 e0       	ldi	r24, 0x07	; 7
    4506:	08 95       	ret
    4508:	85 e0       	ldi	r24, 0x05	; 5
    450a:	08 95       	ret

0000450c <tsl2591Create>:
    450c:	0f 93       	push	r16
    450e:	1f 93       	push	r17
    4510:	90 93 a6 09 	sts	0x09A6, r25	; 0x8009a6 <_callBackFunction+0x1>
    4514:	80 93 a5 09 	sts	0x09A5, r24	; 0x8009a5 <_callBackFunction>
    4518:	0f e2       	ldi	r16, 0x2F	; 47
    451a:	12 e2       	ldi	r17, 0x22	; 34
    451c:	20 e0       	ldi	r18, 0x00	; 0
    451e:	34 e2       	ldi	r19, 0x24	; 36
    4520:	44 ef       	ldi	r20, 0xF4	; 244
    4522:	50 e0       	ldi	r21, 0x00	; 0
    4524:	60 e0       	ldi	r22, 0x00	; 0
    4526:	89 e2       	ldi	r24, 0x29	; 41
    4528:	1d d1       	rcall	.+570    	; 0x4764 <twiCreate>
    452a:	90 93 a8 09 	sts	0x09A8, r25	; 0x8009a8 <_twiHandler+0x1>
    452e:	80 93 a7 09 	sts	0x09A7, r24	; 0x8009a7 <_twiHandler>
    4532:	89 2b       	or	r24, r25
    4534:	11 f0       	breq	.+4      	; 0x453a <tsl2591Create+0x2e>
    4536:	80 e0       	ldi	r24, 0x00	; 0
    4538:	01 c0       	rjmp	.+2      	; 0x453c <tsl2591Create+0x30>
    453a:	88 e0       	ldi	r24, 0x08	; 8
    453c:	1f 91       	pop	r17
    453e:	0f 91       	pop	r16
    4540:	08 95       	ret

00004542 <tsl2591Enable>:
    4542:	cf 93       	push	r28
    4544:	df 93       	push	r29
    4546:	1f 92       	push	r1
    4548:	1f 92       	push	r1
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    454e:	80 ea       	ldi	r24, 0xA0	; 160
    4550:	89 83       	std	Y+1, r24	; 0x01
    4552:	83 e0       	ldi	r24, 0x03	; 3
    4554:	8a 83       	std	Y+2, r24	; 0x02
    4556:	10 92 a4 09 	sts	0x09A4, r1	; 0x8009a4 <_nextState>
    455a:	62 e0       	ldi	r22, 0x02	; 2
    455c:	ce 01       	movw	r24, r28
    455e:	01 96       	adiw	r24, 0x01	; 1
    4560:	c2 df       	rcall	.-124    	; 0x44e6 <_twiTransmit>
    4562:	0f 90       	pop	r0
    4564:	0f 90       	pop	r0
    4566:	df 91       	pop	r29
    4568:	cf 91       	pop	r28
    456a:	08 95       	ret

0000456c <tsl2591FetchData>:
    456c:	cf 93       	push	r28
    456e:	df 93       	push	r29
    4570:	1f 92       	push	r1
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
    4576:	84 eb       	ldi	r24, 0xB4	; 180
    4578:	89 83       	std	Y+1, r24	; 0x01
    457a:	83 e0       	ldi	r24, 0x03	; 3
    457c:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <_nextState>
    4580:	61 e0       	ldi	r22, 0x01	; 1
    4582:	ce 01       	movw	r24, r28
    4584:	01 96       	adiw	r24, 0x01	; 1
    4586:	af df       	rcall	.-162    	; 0x44e6 <_twiTransmit>
    4588:	0f 90       	pop	r0
    458a:	df 91       	pop	r29
    458c:	cf 91       	pop	r28
    458e:	08 95       	ret

00004590 <tsl2591GetLux>:
    4590:	2f 92       	push	r2
    4592:	3f 92       	push	r3
    4594:	4f 92       	push	r4
    4596:	5f 92       	push	r5
    4598:	6f 92       	push	r6
    459a:	7f 92       	push	r7
    459c:	8f 92       	push	r8
    459e:	9f 92       	push	r9
    45a0:	af 92       	push	r10
    45a2:	bf 92       	push	r11
    45a4:	cf 92       	push	r12
    45a6:	df 92       	push	r13
    45a8:	ef 92       	push	r14
    45aa:	ff 92       	push	r15
    45ac:	0f 93       	push	r16
    45ae:	1f 93       	push	r17
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
    45b4:	c0 91 9d 09 	lds	r28, 0x099D	; 0x80099d <_infraredRaw>
    45b8:	d0 91 9e 09 	lds	r29, 0x099E	; 0x80099e <_infraredRaw+0x1>
    45bc:	cf 3f       	cpi	r28, 0xFF	; 255
    45be:	2f ef       	ldi	r18, 0xFF	; 255
    45c0:	d2 07       	cpc	r29, r18
    45c2:	41 f0       	breq	.+16     	; 0x45d4 <tsl2591GetLux+0x44>
    45c4:	60 91 9f 09 	lds	r22, 0x099F	; 0x80099f <_fullSpectrumRaw>
    45c8:	70 91 a0 09 	lds	r23, 0x09A0	; 0x8009a0 <_fullSpectrumRaw+0x1>
    45cc:	6f 3f       	cpi	r22, 0xFF	; 255
    45ce:	ef ef       	ldi	r30, 0xFF	; 255
    45d0:	7e 07       	cpc	r23, r30
    45d2:	59 f4       	brne	.+22     	; 0x45ea <tsl2591GetLux+0x5a>
    45d4:	4f ef       	ldi	r20, 0xFF	; 255
    45d6:	5f ef       	ldi	r21, 0xFF	; 255
    45d8:	6f e7       	ldi	r22, 0x7F	; 127
    45da:	7f e7       	ldi	r23, 0x7F	; 127
    45dc:	fc 01       	movw	r30, r24
    45de:	40 83       	st	Z, r20
    45e0:	51 83       	std	Z+1, r21	; 0x01
    45e2:	62 83       	std	Z+2, r22	; 0x02
    45e4:	73 83       	std	Z+3, r23	; 0x03
    45e6:	83 e0       	ldi	r24, 0x03	; 3
    45e8:	99 c0       	rjmp	.+306    	; 0x471c <tsl2591GetLux+0x18c>
    45ea:	1c 01       	movw	r2, r24
    45ec:	80 e0       	ldi	r24, 0x00	; 0
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	18 d3       	rcall	.+1584   	; 0x4c22 <__floatunsisf>
    45f2:	2b 01       	movw	r4, r22
    45f4:	3c 01       	movw	r6, r24
    45f6:	be 01       	movw	r22, r28
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	12 d3       	rcall	.+1572   	; 0x4c22 <__floatunsisf>
    45fe:	4b 01       	movw	r8, r22
    4600:	5c 01       	movw	r10, r24
    4602:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <_currentIntegrationTime>
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	01 96       	adiw	r24, 0x01	; 1
    460a:	24 e6       	ldi	r18, 0x64	; 100
    460c:	28 9f       	mul	r18, r24
    460e:	b0 01       	movw	r22, r0
    4610:	29 9f       	mul	r18, r25
    4612:	70 0d       	add	r23, r0
    4614:	11 24       	eor	r1, r1
    4616:	80 91 a3 09 	lds	r24, 0x09A3	; 0x8009a3 <_currentGain>
    461a:	80 32       	cpi	r24, 0x20	; 32
    461c:	69 f0       	breq	.+26     	; 0x4638 <tsl2591GetLux+0xa8>
    461e:	80 33       	cpi	r24, 0x30	; 48
    4620:	a1 f0       	breq	.+40     	; 0x464a <tsl2591GetLux+0xba>
    4622:	80 31       	cpi	r24, 0x10	; 16
    4624:	e1 f4       	brne	.+56     	; 0x465e <tsl2591GetLux+0xce>
    4626:	0f 2e       	mov	r0, r31
    4628:	c1 2c       	mov	r12, r1
    462a:	d1 2c       	mov	r13, r1
    462c:	f8 ec       	ldi	r31, 0xC8	; 200
    462e:	ef 2e       	mov	r14, r31
    4630:	f1 e4       	ldi	r31, 0x41	; 65
    4632:	ff 2e       	mov	r15, r31
    4634:	f0 2d       	mov	r31, r0
    4636:	1b c0       	rjmp	.+54     	; 0x466e <tsl2591GetLux+0xde>
    4638:	0f 2e       	mov	r0, r31
    463a:	c1 2c       	mov	r12, r1
    463c:	d1 2c       	mov	r13, r1
    463e:	f6 ed       	ldi	r31, 0xD6	; 214
    4640:	ef 2e       	mov	r14, r31
    4642:	f3 e4       	ldi	r31, 0x43	; 67
    4644:	ff 2e       	mov	r15, r31
    4646:	f0 2d       	mov	r31, r0
    4648:	12 c0       	rjmp	.+36     	; 0x466e <tsl2591GetLux+0xde>
    464a:	0f 2e       	mov	r0, r31
    464c:	c1 2c       	mov	r12, r1
    464e:	f0 e5       	ldi	r31, 0x50	; 80
    4650:	df 2e       	mov	r13, r31
    4652:	fa e1       	ldi	r31, 0x1A	; 26
    4654:	ef 2e       	mov	r14, r31
    4656:	f6 e4       	ldi	r31, 0x46	; 70
    4658:	ff 2e       	mov	r15, r31
    465a:	f0 2d       	mov	r31, r0
    465c:	08 c0       	rjmp	.+16     	; 0x466e <tsl2591GetLux+0xde>
    465e:	0f 2e       	mov	r0, r31
    4660:	c1 2c       	mov	r12, r1
    4662:	d1 2c       	mov	r13, r1
    4664:	f0 e8       	ldi	r31, 0x80	; 128
    4666:	ef 2e       	mov	r14, r31
    4668:	ff e3       	ldi	r31, 0x3F	; 63
    466a:	ff 2e       	mov	r15, r31
    466c:	f0 2d       	mov	r31, r0
    466e:	07 2e       	mov	r0, r23
    4670:	00 0c       	add	r0, r0
    4672:	88 0b       	sbc	r24, r24
    4674:	99 0b       	sbc	r25, r25
    4676:	d7 d2       	rcall	.+1454   	; 0x4c26 <__floatsisf>
    4678:	a7 01       	movw	r20, r14
    467a:	96 01       	movw	r18, r12
    467c:	3b d3       	rcall	.+1654   	; 0x4cf4 <__mulsf3>
    467e:	20 e0       	ldi	r18, 0x00	; 0
    4680:	30 e0       	ldi	r19, 0x00	; 0
    4682:	4c ec       	ldi	r20, 0xCC	; 204
    4684:	53 e4       	ldi	r21, 0x43	; 67
    4686:	62 d2       	rcall	.+1220   	; 0x4b4c <__divsf3>
    4688:	6b 01       	movw	r12, r22
    468a:	7c 01       	movw	r14, r24
    468c:	25 e8       	ldi	r18, 0x85	; 133
    468e:	3b ee       	ldi	r19, 0xEB	; 235
    4690:	41 ed       	ldi	r20, 0xD1	; 209
    4692:	5f e3       	ldi	r21, 0x3F	; 63
    4694:	c5 01       	movw	r24, r10
    4696:	b4 01       	movw	r22, r8
    4698:	2d d3       	rcall	.+1626   	; 0x4cf4 <__mulsf3>
    469a:	9b 01       	movw	r18, r22
    469c:	ac 01       	movw	r20, r24
    469e:	c3 01       	movw	r24, r6
    46a0:	b2 01       	movw	r22, r4
    46a2:	ed d1       	rcall	.+986    	; 0x4a7e <__subsf3>
    46a4:	a7 01       	movw	r20, r14
    46a6:	96 01       	movw	r18, r12
    46a8:	51 d2       	rcall	.+1186   	; 0x4b4c <__divsf3>
    46aa:	16 2f       	mov	r17, r22
    46ac:	d7 2f       	mov	r29, r23
    46ae:	c8 2f       	mov	r28, r24
    46b0:	09 2f       	mov	r16, r25
    46b2:	2d e3       	ldi	r18, 0x3D	; 61
    46b4:	3a e0       	ldi	r19, 0x0A	; 10
    46b6:	47 e1       	ldi	r20, 0x17	; 23
    46b8:	5f e3       	ldi	r21, 0x3F	; 63
    46ba:	c3 01       	movw	r24, r6
    46bc:	b2 01       	movw	r22, r4
    46be:	1a d3       	rcall	.+1588   	; 0x4cf4 <__mulsf3>
    46c0:	2b 01       	movw	r4, r22
    46c2:	3c 01       	movw	r6, r24
    46c4:	26 ef       	ldi	r18, 0xF6	; 246
    46c6:	38 e2       	ldi	r19, 0x28	; 40
    46c8:	4c e5       	ldi	r20, 0x5C	; 92
    46ca:	5f e3       	ldi	r21, 0x3F	; 63
    46cc:	c5 01       	movw	r24, r10
    46ce:	b4 01       	movw	r22, r8
    46d0:	11 d3       	rcall	.+1570   	; 0x4cf4 <__mulsf3>
    46d2:	9b 01       	movw	r18, r22
    46d4:	ac 01       	movw	r20, r24
    46d6:	c3 01       	movw	r24, r6
    46d8:	b2 01       	movw	r22, r4
    46da:	d1 d1       	rcall	.+930    	; 0x4a7e <__subsf3>
    46dc:	a7 01       	movw	r20, r14
    46de:	96 01       	movw	r18, r12
    46e0:	35 d2       	rcall	.+1130   	; 0x4b4c <__divsf3>
    46e2:	c6 2e       	mov	r12, r22
    46e4:	d7 2e       	mov	r13, r23
    46e6:	e8 2e       	mov	r14, r24
    46e8:	f9 2e       	mov	r15, r25
    46ea:	26 2f       	mov	r18, r22
    46ec:	37 2f       	mov	r19, r23
    46ee:	48 2f       	mov	r20, r24
    46f0:	59 2f       	mov	r21, r25
    46f2:	61 2f       	mov	r22, r17
    46f4:	7d 2f       	mov	r23, r29
    46f6:	8c 2f       	mov	r24, r28
    46f8:	90 2f       	mov	r25, r16
    46fa:	f8 d2       	rcall	.+1520   	; 0x4cec <__gesf2>
    46fc:	18 16       	cp	r1, r24
    46fe:	24 f0       	brlt	.+8      	; 0x4708 <tsl2591GetLux+0x178>
    4700:	1c 2d       	mov	r17, r12
    4702:	dd 2d       	mov	r29, r13
    4704:	ce 2d       	mov	r28, r14
    4706:	0f 2d       	mov	r16, r15
    4708:	41 2f       	mov	r20, r17
    470a:	5d 2f       	mov	r21, r29
    470c:	6c 2f       	mov	r22, r28
    470e:	70 2f       	mov	r23, r16
    4710:	f1 01       	movw	r30, r2
    4712:	40 83       	st	Z, r20
    4714:	51 83       	std	Z+1, r21	; 0x01
    4716:	62 83       	std	Z+2, r22	; 0x02
    4718:	73 83       	std	Z+3, r23	; 0x03
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	df 91       	pop	r29
    471e:	cf 91       	pop	r28
    4720:	1f 91       	pop	r17
    4722:	0f 91       	pop	r16
    4724:	ff 90       	pop	r15
    4726:	ef 90       	pop	r14
    4728:	df 90       	pop	r13
    472a:	cf 90       	pop	r12
    472c:	bf 90       	pop	r11
    472e:	af 90       	pop	r10
    4730:	9f 90       	pop	r9
    4732:	8f 90       	pop	r8
    4734:	7f 90       	pop	r7
    4736:	6f 90       	pop	r6
    4738:	5f 90       	pop	r5
    473a:	4f 90       	pop	r4
    473c:	3f 90       	pop	r3
    473e:	2f 90       	pop	r2
    4740:	08 95       	ret

00004742 <_initTwiInterface>:
    4742:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <_twiIsInitiated>
    4746:	81 11       	cpse	r24, r1
    4748:	0c c0       	rjmp	.+24     	; 0x4762 <_initTwiInterface+0x20>
    474a:	8c e0       	ldi	r24, 0x0C	; 12
    474c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4750:	8f ef       	ldi	r24, 0xFF	; 255
    4752:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4756:	84 e0       	ldi	r24, 0x04	; 4
    4758:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <_twiIsInitiated>
    4762:	08 95       	ret

00004764 <twiCreate>:
    4764:	af 92       	push	r10
    4766:	bf 92       	push	r11
    4768:	cf 92       	push	r12
    476a:	df 92       	push	r13
    476c:	ef 92       	push	r14
    476e:	ff 92       	push	r15
    4770:	0f 93       	push	r16
    4772:	1f 93       	push	r17
    4774:	cf 93       	push	r28
    4776:	df 93       	push	r29
    4778:	a8 2e       	mov	r10, r24
    477a:	b6 2e       	mov	r11, r22
    477c:	69 01       	movw	r12, r18
    477e:	7a 01       	movw	r14, r20
    4780:	84 e0       	ldi	r24, 0x04	; 4
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	9e d3       	rcall	.+1852   	; 0x4ec2 <malloc>
    4786:	ec 01       	movw	r28, r24
    4788:	89 2b       	or	r24, r25
    478a:	61 f1       	breq	.+88     	; 0x47e4 <twiCreate+0x80>
    478c:	a8 82       	st	Y, r10
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	b8 12       	cpse	r11, r24
    4792:	12 c0       	rjmp	.+36     	; 0x47b8 <twiCreate+0x54>
    4794:	c7 01       	movw	r24, r14
    4796:	b6 01       	movw	r22, r12
    4798:	20 ea       	ldi	r18, 0xA0	; 160
    479a:	36 e8       	ldi	r19, 0x86	; 134
    479c:	41 e0       	ldi	r20, 0x01	; 1
    479e:	50 e0       	ldi	r21, 0x00	; 0
    47a0:	33 d3       	rcall	.+1638   	; 0x4e08 <__udivmodsi4>
    47a2:	da 01       	movw	r26, r20
    47a4:	c9 01       	movw	r24, r18
    47a6:	40 97       	sbiw	r24, 0x10	; 16
    47a8:	a1 09       	sbc	r26, r1
    47aa:	b1 09       	sbc	r27, r1
    47ac:	b6 95       	lsr	r27
    47ae:	a7 95       	ror	r26
    47b0:	97 95       	ror	r25
    47b2:	87 95       	ror	r24
    47b4:	89 83       	std	Y+1, r24	; 0x01
    47b6:	11 c0       	rjmp	.+34     	; 0x47da <twiCreate+0x76>
    47b8:	c7 01       	movw	r24, r14
    47ba:	b6 01       	movw	r22, r12
    47bc:	20 e8       	ldi	r18, 0x80	; 128
    47be:	3a e1       	ldi	r19, 0x1A	; 26
    47c0:	46 e0       	ldi	r20, 0x06	; 6
    47c2:	50 e0       	ldi	r21, 0x00	; 0
    47c4:	21 d3       	rcall	.+1602   	; 0x4e08 <__udivmodsi4>
    47c6:	da 01       	movw	r26, r20
    47c8:	c9 01       	movw	r24, r18
    47ca:	40 97       	sbiw	r24, 0x10	; 16
    47cc:	a1 09       	sbc	r26, r1
    47ce:	b1 09       	sbc	r27, r1
    47d0:	b6 95       	lsr	r27
    47d2:	a7 95       	ror	r26
    47d4:	97 95       	ror	r25
    47d6:	87 95       	ror	r24
    47d8:	89 83       	std	Y+1, r24	; 0x01
    47da:	1b 83       	std	Y+3, r17	; 0x03
    47dc:	0a 83       	std	Y+2, r16	; 0x02
    47de:	8c 2f       	mov	r24, r28
    47e0:	9d 2f       	mov	r25, r29
    47e2:	02 c0       	rjmp	.+4      	; 0x47e8 <twiCreate+0x84>
    47e4:	80 e0       	ldi	r24, 0x00	; 0
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	df 91       	pop	r29
    47ea:	cf 91       	pop	r28
    47ec:	1f 91       	pop	r17
    47ee:	0f 91       	pop	r16
    47f0:	ff 90       	pop	r15
    47f2:	ef 90       	pop	r14
    47f4:	df 90       	pop	r13
    47f6:	cf 90       	pop	r12
    47f8:	bf 90       	pop	r11
    47fa:	af 90       	pop	r10
    47fc:	08 95       	ret

000047fe <twiIsBusy>:
    47fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4802:	81 70       	andi	r24, 0x01	; 1
    4804:	08 95       	ret

00004806 <twiTransmit>:
    4806:	ff 92       	push	r15
    4808:	0f 93       	push	r16
    480a:	1f 93       	push	r17
    480c:	cf 93       	push	r28
    480e:	df 93       	push	r29
    4810:	00 97       	sbiw	r24, 0x00	; 0
    4812:	d1 f1       	breq	.+116    	; 0x4888 <twiTransmit+0x82>
    4814:	4a 30       	cpi	r20, 0x0A	; 10
    4816:	d0 f5       	brcc	.+116    	; 0x488c <twiTransmit+0x86>
    4818:	f4 2e       	mov	r15, r20
    481a:	8b 01       	movw	r16, r22
    481c:	ec 01       	movw	r28, r24
    481e:	ef df       	rcall	.-34     	; 0x47fe <twiIsBusy>
    4820:	81 11       	cpse	r24, r1
    4822:	36 c0       	rjmp	.+108    	; 0x4890 <twiTransmit+0x8a>
    4824:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <_twiCurrentHandler>
    4828:	90 91 ab 09 	lds	r25, 0x09AB	; 0x8009ab <_twiCurrentHandler+0x1>
    482c:	c8 17       	cp	r28, r24
    482e:	d9 07       	cpc	r29, r25
    4830:	41 f0       	breq	.+16     	; 0x4842 <twiTransmit+0x3c>
    4832:	87 df       	rcall	.-242    	; 0x4742 <_initTwiInterface>
    4834:	89 81       	ldd	r24, Y+1	; 0x01
    4836:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    483a:	d0 93 ab 09 	sts	0x09AB, r29	; 0x8009ab <_twiCurrentHandler+0x1>
    483e:	c0 93 aa 09 	sts	0x09AA, r28	; 0x8009aa <_twiCurrentHandler>
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	8f 0d       	add	r24, r15
    4846:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <_twiMessageLen>
    484a:	88 81       	ld	r24, Y
    484c:	88 0f       	add	r24, r24
    484e:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <_twiMessageBuffer>
    4852:	ff 20       	and	r15, r15
    4854:	89 f0       	breq	.+34     	; 0x4878 <twiTransmit+0x72>
    4856:	f8 01       	movw	r30, r16
    4858:	ae ea       	ldi	r26, 0xAE	; 174
    485a:	b9 e0       	ldi	r27, 0x09	; 9
    485c:	4f ef       	ldi	r20, 0xFF	; 255
    485e:	4f 0d       	add	r20, r15
    4860:	64 2f       	mov	r22, r20
    4862:	70 e0       	ldi	r23, 0x00	; 0
    4864:	cb 01       	movw	r24, r22
    4866:	01 96       	adiw	r24, 0x01	; 1
    4868:	b8 01       	movw	r22, r16
    486a:	68 0f       	add	r22, r24
    486c:	79 1f       	adc	r23, r25
    486e:	81 91       	ld	r24, Z+
    4870:	8d 93       	st	X+, r24
    4872:	e6 17       	cp	r30, r22
    4874:	f7 07       	cpc	r31, r23
    4876:	d9 f7       	brne	.-10     	; 0x486e <twiTransmit+0x68>
    4878:	88 ef       	ldi	r24, 0xF8	; 248
    487a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    487e:	85 ea       	ldi	r24, 0xA5	; 165
    4880:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4884:	84 e0       	ldi	r24, 0x04	; 4
    4886:	05 c0       	rjmp	.+10     	; 0x4892 <twiTransmit+0x8c>
    4888:	86 e0       	ldi	r24, 0x06	; 6
    488a:	03 c0       	rjmp	.+6      	; 0x4892 <twiTransmit+0x8c>
    488c:	87 e0       	ldi	r24, 0x07	; 7
    488e:	01 c0       	rjmp	.+2      	; 0x4892 <twiTransmit+0x8c>
    4890:	82 e0       	ldi	r24, 0x02	; 2
    4892:	df 91       	pop	r29
    4894:	cf 91       	pop	r28
    4896:	1f 91       	pop	r17
    4898:	0f 91       	pop	r16
    489a:	ff 90       	pop	r15
    489c:	08 95       	ret

0000489e <twiReceive>:
    489e:	1f 93       	push	r17
    48a0:	cf 93       	push	r28
    48a2:	df 93       	push	r29
    48a4:	00 97       	sbiw	r24, 0x00	; 0
    48a6:	29 f1       	breq	.+74     	; 0x48f2 <twiReceive+0x54>
    48a8:	6b 30       	cpi	r22, 0x0B	; 11
    48aa:	28 f5       	brcc	.+74     	; 0x48f6 <twiReceive+0x58>
    48ac:	16 2f       	mov	r17, r22
    48ae:	ec 01       	movw	r28, r24
    48b0:	a6 df       	rcall	.-180    	; 0x47fe <twiIsBusy>
    48b2:	81 11       	cpse	r24, r1
    48b4:	22 c0       	rjmp	.+68     	; 0x48fa <twiReceive+0x5c>
    48b6:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <_twiCurrentHandler>
    48ba:	90 91 ab 09 	lds	r25, 0x09AB	; 0x8009ab <_twiCurrentHandler+0x1>
    48be:	c8 17       	cp	r28, r24
    48c0:	d9 07       	cpc	r29, r25
    48c2:	41 f0       	breq	.+16     	; 0x48d4 <twiReceive+0x36>
    48c4:	3e df       	rcall	.-388    	; 0x4742 <_initTwiInterface>
    48c6:	89 81       	ldd	r24, Y+1	; 0x01
    48c8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    48cc:	d0 93 ab 09 	sts	0x09AB, r29	; 0x8009ab <_twiCurrentHandler+0x1>
    48d0:	c0 93 aa 09 	sts	0x09AA, r28	; 0x8009aa <_twiCurrentHandler>
    48d4:	10 93 ac 09 	sts	0x09AC, r17	; 0x8009ac <_twiMessageLen>
    48d8:	88 81       	ld	r24, Y
    48da:	88 0f       	add	r24, r24
    48dc:	81 60       	ori	r24, 0x01	; 1
    48de:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <_twiMessageBuffer>
    48e2:	88 ef       	ldi	r24, 0xF8	; 248
    48e4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    48e8:	85 ea       	ldi	r24, 0xA5	; 165
    48ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    48ee:	85 e0       	ldi	r24, 0x05	; 5
    48f0:	05 c0       	rjmp	.+10     	; 0x48fc <twiReceive+0x5e>
    48f2:	86 e0       	ldi	r24, 0x06	; 6
    48f4:	03 c0       	rjmp	.+6      	; 0x48fc <twiReceive+0x5e>
    48f6:	87 e0       	ldi	r24, 0x07	; 7
    48f8:	01 c0       	rjmp	.+2      	; 0x48fc <twiReceive+0x5e>
    48fa:	82 e0       	ldi	r24, 0x02	; 2
    48fc:	df 91       	pop	r29
    48fe:	cf 91       	pop	r28
    4900:	1f 91       	pop	r17
    4902:	08 95       	ret

00004904 <__vector_39>:
    4904:	1f 92       	push	r1
    4906:	0f 92       	push	r0
    4908:	0f b6       	in	r0, 0x3f	; 63
    490a:	0f 92       	push	r0
    490c:	11 24       	eor	r1, r1
    490e:	0b b6       	in	r0, 0x3b	; 59
    4910:	0f 92       	push	r0
    4912:	2f 93       	push	r18
    4914:	3f 93       	push	r19
    4916:	4f 93       	push	r20
    4918:	5f 93       	push	r21
    491a:	6f 93       	push	r22
    491c:	7f 93       	push	r23
    491e:	8f 93       	push	r24
    4920:	9f 93       	push	r25
    4922:	af 93       	push	r26
    4924:	bf 93       	push	r27
    4926:	ef 93       	push	r30
    4928:	ff 93       	push	r31
    492a:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    492e:	8e 2f       	mov	r24, r30
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	fc 01       	movw	r30, r24
    4934:	38 97       	sbiw	r30, 0x08	; 8
    4936:	e1 35       	cpi	r30, 0x51	; 81
    4938:	f1 05       	cpc	r31, r1
    493a:	08 f0       	brcs	.+2      	; 0x493e <__vector_39+0x3a>
    493c:	75 c0       	rjmp	.+234    	; 0x4a28 <__vector_39+0x124>
    493e:	88 27       	eor	r24, r24
    4940:	e4 58       	subi	r30, 0x84	; 132
    4942:	ff 4f       	sbci	r31, 0xFF	; 255
    4944:	8f 4f       	sbci	r24, 0xFF	; 255
    4946:	82 c2       	rjmp	.+1284   	; 0x4e4c <__tablejump2__>
    4948:	10 92 a9 09 	sts	0x09A9, r1	; 0x8009a9 <_index.1885>
    494c:	e0 91 a9 09 	lds	r30, 0x09A9	; 0x8009a9 <_index.1885>
    4950:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <_twiMessageLen>
    4954:	e8 17       	cp	r30, r24
    4956:	70 f4       	brcc	.+28     	; 0x4974 <__vector_39+0x70>
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	8e 0f       	add	r24, r30
    495c:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <_index.1885>
    4960:	f0 e0       	ldi	r31, 0x00	; 0
    4962:	e3 55       	subi	r30, 0x53	; 83
    4964:	f6 4f       	sbci	r31, 0xF6	; 246
    4966:	80 81       	ld	r24, Z
    4968:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    496c:	85 e8       	ldi	r24, 0x85	; 133
    496e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4972:	72 c0       	rjmp	.+228    	; 0x4a58 <__vector_39+0x154>
    4974:	84 e9       	ldi	r24, 0x94	; 148
    4976:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    497a:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <_twiCurrentHandler>
    497e:	90 91 ab 09 	lds	r25, 0x09AB	; 0x8009ab <_twiCurrentHandler+0x1>
    4982:	dc 01       	movw	r26, r24
    4984:	12 96       	adiw	r26, 0x02	; 2
    4986:	ed 91       	ld	r30, X+
    4988:	fc 91       	ld	r31, X
    498a:	13 97       	sbiw	r26, 0x03	; 3
    498c:	30 97       	sbiw	r30, 0x00	; 0
    498e:	09 f4       	brne	.+2      	; 0x4992 <__vector_39+0x8e>
    4990:	63 c0       	rjmp	.+198    	; 0x4a58 <__vector_39+0x154>
    4992:	20 e0       	ldi	r18, 0x00	; 0
    4994:	40 e0       	ldi	r20, 0x00	; 0
    4996:	50 e0       	ldi	r21, 0x00	; 0
    4998:	64 e0       	ldi	r22, 0x04	; 4
    499a:	19 95       	eicall
    499c:	5d c0       	rjmp	.+186    	; 0x4a58 <__vector_39+0x154>
    499e:	e0 91 a9 09 	lds	r30, 0x09A9	; 0x8009a9 <_index.1885>
    49a2:	81 e0       	ldi	r24, 0x01	; 1
    49a4:	8e 0f       	add	r24, r30
    49a6:	80 93 a9 09 	sts	0x09A9, r24	; 0x8009a9 <_index.1885>
    49aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    49ae:	f0 e0       	ldi	r31, 0x00	; 0
    49b0:	e3 55       	subi	r30, 0x53	; 83
    49b2:	f6 4f       	sbci	r31, 0xF6	; 246
    49b4:	80 83       	st	Z, r24
    49b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    49ba:	80 34       	cpi	r24, 0x40	; 64
    49bc:	11 f4       	brne	.+4      	; 0x49c2 <__vector_39+0xbe>
    49be:	10 92 a9 09 	sts	0x09A9, r1	; 0x8009a9 <_index.1885>
    49c2:	20 91 a9 09 	lds	r18, 0x09A9	; 0x8009a9 <_index.1885>
    49c6:	30 e0       	ldi	r19, 0x00	; 0
    49c8:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <_twiMessageLen>
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	01 97       	sbiw	r24, 0x01	; 1
    49d0:	28 17       	cp	r18, r24
    49d2:	39 07       	cpc	r19, r25
    49d4:	24 f4       	brge	.+8      	; 0x49de <__vector_39+0xda>
    49d6:	85 ec       	ldi	r24, 0xC5	; 197
    49d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49dc:	3d c0       	rjmp	.+122    	; 0x4a58 <__vector_39+0x154>
    49de:	85 e8       	ldi	r24, 0x85	; 133
    49e0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49e4:	39 c0       	rjmp	.+114    	; 0x4a58 <__vector_39+0x154>
    49e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    49ea:	e0 91 a9 09 	lds	r30, 0x09A9	; 0x8009a9 <_index.1885>
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	e3 55       	subi	r30, 0x53	; 83
    49f2:	f6 4f       	sbci	r31, 0xF6	; 246
    49f4:	80 83       	st	Z, r24
    49f6:	84 e9       	ldi	r24, 0x94	; 148
    49f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    49fc:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <_twiCurrentHandler>
    4a00:	90 91 ab 09 	lds	r25, 0x09AB	; 0x8009ab <_twiCurrentHandler+0x1>
    4a04:	dc 01       	movw	r26, r24
    4a06:	12 96       	adiw	r26, 0x02	; 2
    4a08:	ed 91       	ld	r30, X+
    4a0a:	fc 91       	ld	r31, X
    4a0c:	13 97       	sbiw	r26, 0x03	; 3
    4a0e:	30 97       	sbiw	r30, 0x00	; 0
    4a10:	19 f1       	breq	.+70     	; 0x4a58 <__vector_39+0x154>
    4a12:	20 91 ac 09 	lds	r18, 0x09AC	; 0x8009ac <_twiMessageLen>
    4a16:	4d ea       	ldi	r20, 0xAD	; 173
    4a18:	59 e0       	ldi	r21, 0x09	; 9
    4a1a:	65 e0       	ldi	r22, 0x05	; 5
    4a1c:	19 95       	eicall
    4a1e:	1c c0       	rjmp	.+56     	; 0x4a58 <__vector_39+0x154>
    4a20:	85 ea       	ldi	r24, 0xA5	; 165
    4a22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a26:	18 c0       	rjmp	.+48     	; 0x4a58 <__vector_39+0x154>
    4a28:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4a2c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4a30:	84 e0       	ldi	r24, 0x04	; 4
    4a32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a36:	80 91 aa 09 	lds	r24, 0x09AA	; 0x8009aa <_twiCurrentHandler>
    4a3a:	90 91 ab 09 	lds	r25, 0x09AB	; 0x8009ab <_twiCurrentHandler+0x1>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	12 96       	adiw	r26, 0x02	; 2
    4a42:	ed 91       	ld	r30, X+
    4a44:	fc 91       	ld	r31, X
    4a46:	13 97       	sbiw	r26, 0x03	; 3
    4a48:	30 97       	sbiw	r30, 0x00	; 0
    4a4a:	31 f0       	breq	.+12     	; 0x4a58 <__vector_39+0x154>
    4a4c:	20 e0       	ldi	r18, 0x00	; 0
    4a4e:	40 e0       	ldi	r20, 0x00	; 0
    4a50:	50 e0       	ldi	r21, 0x00	; 0
    4a52:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    4a56:	19 95       	eicall
    4a58:	ff 91       	pop	r31
    4a5a:	ef 91       	pop	r30
    4a5c:	bf 91       	pop	r27
    4a5e:	af 91       	pop	r26
    4a60:	9f 91       	pop	r25
    4a62:	8f 91       	pop	r24
    4a64:	7f 91       	pop	r23
    4a66:	6f 91       	pop	r22
    4a68:	5f 91       	pop	r21
    4a6a:	4f 91       	pop	r20
    4a6c:	3f 91       	pop	r19
    4a6e:	2f 91       	pop	r18
    4a70:	0f 90       	pop	r0
    4a72:	0b be       	out	0x3b, r0	; 59
    4a74:	0f 90       	pop	r0
    4a76:	0f be       	out	0x3f, r0	; 63
    4a78:	0f 90       	pop	r0
    4a7a:	1f 90       	pop	r1
    4a7c:	18 95       	reti

00004a7e <__subsf3>:
    4a7e:	50 58       	subi	r21, 0x80	; 128

00004a80 <__addsf3>:
    4a80:	bb 27       	eor	r27, r27
    4a82:	aa 27       	eor	r26, r26
    4a84:	0e d0       	rcall	.+28     	; 0x4aa2 <__addsf3x>
    4a86:	21 c1       	rjmp	.+578    	; 0x4cca <__fp_round>
    4a88:	12 d1       	rcall	.+548    	; 0x4cae <__fp_pscA>
    4a8a:	30 f0       	brcs	.+12     	; 0x4a98 <__addsf3+0x18>
    4a8c:	17 d1       	rcall	.+558    	; 0x4cbc <__fp_pscB>
    4a8e:	20 f0       	brcs	.+8      	; 0x4a98 <__addsf3+0x18>
    4a90:	31 f4       	brne	.+12     	; 0x4a9e <__addsf3+0x1e>
    4a92:	9f 3f       	cpi	r25, 0xFF	; 255
    4a94:	11 f4       	brne	.+4      	; 0x4a9a <__addsf3+0x1a>
    4a96:	1e f4       	brtc	.+6      	; 0x4a9e <__addsf3+0x1e>
    4a98:	07 c1       	rjmp	.+526    	; 0x4ca8 <__fp_nan>
    4a9a:	0e f4       	brtc	.+2      	; 0x4a9e <__addsf3+0x1e>
    4a9c:	e0 95       	com	r30
    4a9e:	e7 fb       	bst	r30, 7
    4aa0:	fd c0       	rjmp	.+506    	; 0x4c9c <__fp_inf>

00004aa2 <__addsf3x>:
    4aa2:	e9 2f       	mov	r30, r25
    4aa4:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__fp_split3>
    4aa8:	78 f3       	brcs	.-34     	; 0x4a88 <__addsf3+0x8>
    4aaa:	ba 17       	cp	r27, r26
    4aac:	62 07       	cpc	r22, r18
    4aae:	73 07       	cpc	r23, r19
    4ab0:	84 07       	cpc	r24, r20
    4ab2:	95 07       	cpc	r25, r21
    4ab4:	20 f0       	brcs	.+8      	; 0x4abe <__addsf3x+0x1c>
    4ab6:	79 f4       	brne	.+30     	; 0x4ad6 <__addsf3x+0x34>
    4ab8:	a6 f5       	brtc	.+104    	; 0x4b22 <__addsf3x+0x80>
    4aba:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__fp_zero>
    4abe:	0e f4       	brtc	.+2      	; 0x4ac2 <__addsf3x+0x20>
    4ac0:	e0 95       	com	r30
    4ac2:	0b 2e       	mov	r0, r27
    4ac4:	ba 2f       	mov	r27, r26
    4ac6:	a0 2d       	mov	r26, r0
    4ac8:	0b 01       	movw	r0, r22
    4aca:	b9 01       	movw	r22, r18
    4acc:	90 01       	movw	r18, r0
    4ace:	0c 01       	movw	r0, r24
    4ad0:	ca 01       	movw	r24, r20
    4ad2:	a0 01       	movw	r20, r0
    4ad4:	11 24       	eor	r1, r1
    4ad6:	ff 27       	eor	r31, r31
    4ad8:	59 1b       	sub	r21, r25
    4ada:	99 f0       	breq	.+38     	; 0x4b02 <__addsf3x+0x60>
    4adc:	59 3f       	cpi	r21, 0xF9	; 249
    4ade:	50 f4       	brcc	.+20     	; 0x4af4 <__addsf3x+0x52>
    4ae0:	50 3e       	cpi	r21, 0xE0	; 224
    4ae2:	68 f1       	brcs	.+90     	; 0x4b3e <__addsf3x+0x9c>
    4ae4:	1a 16       	cp	r1, r26
    4ae6:	f0 40       	sbci	r31, 0x00	; 0
    4ae8:	a2 2f       	mov	r26, r18
    4aea:	23 2f       	mov	r18, r19
    4aec:	34 2f       	mov	r19, r20
    4aee:	44 27       	eor	r20, r20
    4af0:	58 5f       	subi	r21, 0xF8	; 248
    4af2:	f3 cf       	rjmp	.-26     	; 0x4ada <__addsf3x+0x38>
    4af4:	46 95       	lsr	r20
    4af6:	37 95       	ror	r19
    4af8:	27 95       	ror	r18
    4afa:	a7 95       	ror	r26
    4afc:	f0 40       	sbci	r31, 0x00	; 0
    4afe:	53 95       	inc	r21
    4b00:	c9 f7       	brne	.-14     	; 0x4af4 <__addsf3x+0x52>
    4b02:	7e f4       	brtc	.+30     	; 0x4b22 <__addsf3x+0x80>
    4b04:	1f 16       	cp	r1, r31
    4b06:	ba 0b       	sbc	r27, r26
    4b08:	62 0b       	sbc	r22, r18
    4b0a:	73 0b       	sbc	r23, r19
    4b0c:	84 0b       	sbc	r24, r20
    4b0e:	ba f0       	brmi	.+46     	; 0x4b3e <__addsf3x+0x9c>
    4b10:	91 50       	subi	r25, 0x01	; 1
    4b12:	a1 f0       	breq	.+40     	; 0x4b3c <__addsf3x+0x9a>
    4b14:	ff 0f       	add	r31, r31
    4b16:	bb 1f       	adc	r27, r27
    4b18:	66 1f       	adc	r22, r22
    4b1a:	77 1f       	adc	r23, r23
    4b1c:	88 1f       	adc	r24, r24
    4b1e:	c2 f7       	brpl	.-16     	; 0x4b10 <__addsf3x+0x6e>
    4b20:	0e c0       	rjmp	.+28     	; 0x4b3e <__addsf3x+0x9c>
    4b22:	ba 0f       	add	r27, r26
    4b24:	62 1f       	adc	r22, r18
    4b26:	73 1f       	adc	r23, r19
    4b28:	84 1f       	adc	r24, r20
    4b2a:	48 f4       	brcc	.+18     	; 0x4b3e <__addsf3x+0x9c>
    4b2c:	87 95       	ror	r24
    4b2e:	77 95       	ror	r23
    4b30:	67 95       	ror	r22
    4b32:	b7 95       	ror	r27
    4b34:	f7 95       	ror	r31
    4b36:	9e 3f       	cpi	r25, 0xFE	; 254
    4b38:	08 f0       	brcs	.+2      	; 0x4b3c <__addsf3x+0x9a>
    4b3a:	b1 cf       	rjmp	.-158    	; 0x4a9e <__addsf3+0x1e>
    4b3c:	93 95       	inc	r25
    4b3e:	88 0f       	add	r24, r24
    4b40:	08 f0       	brcs	.+2      	; 0x4b44 <__addsf3x+0xa2>
    4b42:	99 27       	eor	r25, r25
    4b44:	ee 0f       	add	r30, r30
    4b46:	97 95       	ror	r25
    4b48:	87 95       	ror	r24
    4b4a:	08 95       	ret

00004b4c <__divsf3>:
    4b4c:	0d d0       	rcall	.+26     	; 0x4b68 <__divsf3x>
    4b4e:	bd c0       	rjmp	.+378    	; 0x4cca <__fp_round>
    4b50:	b5 d0       	rcall	.+362    	; 0x4cbc <__fp_pscB>
    4b52:	48 f0       	brcs	.+18     	; 0x4b66 <__divsf3+0x1a>
    4b54:	ac d0       	rcall	.+344    	; 0x4cae <__fp_pscA>
    4b56:	38 f0       	brcs	.+14     	; 0x4b66 <__divsf3+0x1a>
    4b58:	21 f4       	brne	.+8      	; 0x4b62 <__divsf3+0x16>
    4b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    4b5c:	21 f0       	breq	.+8      	; 0x4b66 <__divsf3+0x1a>
    4b5e:	9e c0       	rjmp	.+316    	; 0x4c9c <__fp_inf>
    4b60:	51 11       	cpse	r21, r1
    4b62:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <__fp_szero>
    4b66:	a0 c0       	rjmp	.+320    	; 0x4ca8 <__fp_nan>

00004b68 <__divsf3x>:
    4b68:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__fp_split3>
    4b6c:	88 f3       	brcs	.-30     	; 0x4b50 <__divsf3+0x4>

00004b6e <__divsf3_pse>:
    4b6e:	99 23       	and	r25, r25
    4b70:	b9 f3       	breq	.-18     	; 0x4b60 <__divsf3+0x14>
    4b72:	55 23       	and	r21, r21
    4b74:	a1 f3       	breq	.-24     	; 0x4b5e <__divsf3+0x12>
    4b76:	95 1b       	sub	r25, r21
    4b78:	55 0b       	sbc	r21, r21
    4b7a:	bb 27       	eor	r27, r27
    4b7c:	aa 27       	eor	r26, r26
    4b7e:	62 17       	cp	r22, r18
    4b80:	73 07       	cpc	r23, r19
    4b82:	84 07       	cpc	r24, r20
    4b84:	38 f0       	brcs	.+14     	; 0x4b94 <__divsf3_pse+0x26>
    4b86:	9f 5f       	subi	r25, 0xFF	; 255
    4b88:	5f 4f       	sbci	r21, 0xFF	; 255
    4b8a:	22 0f       	add	r18, r18
    4b8c:	33 1f       	adc	r19, r19
    4b8e:	44 1f       	adc	r20, r20
    4b90:	aa 1f       	adc	r26, r26
    4b92:	a9 f3       	breq	.-22     	; 0x4b7e <__divsf3_pse+0x10>
    4b94:	34 d0       	rcall	.+104    	; 0x4bfe <__divsf3_pse+0x90>
    4b96:	0e 2e       	mov	r0, r30
    4b98:	3a f0       	brmi	.+14     	; 0x4ba8 <__divsf3_pse+0x3a>
    4b9a:	e0 e8       	ldi	r30, 0x80	; 128
    4b9c:	31 d0       	rcall	.+98     	; 0x4c00 <__divsf3_pse+0x92>
    4b9e:	91 50       	subi	r25, 0x01	; 1
    4ba0:	50 40       	sbci	r21, 0x00	; 0
    4ba2:	e6 95       	lsr	r30
    4ba4:	00 1c       	adc	r0, r0
    4ba6:	ca f7       	brpl	.-14     	; 0x4b9a <__divsf3_pse+0x2c>
    4ba8:	2a d0       	rcall	.+84     	; 0x4bfe <__divsf3_pse+0x90>
    4baa:	fe 2f       	mov	r31, r30
    4bac:	28 d0       	rcall	.+80     	; 0x4bfe <__divsf3_pse+0x90>
    4bae:	66 0f       	add	r22, r22
    4bb0:	77 1f       	adc	r23, r23
    4bb2:	88 1f       	adc	r24, r24
    4bb4:	bb 1f       	adc	r27, r27
    4bb6:	26 17       	cp	r18, r22
    4bb8:	37 07       	cpc	r19, r23
    4bba:	48 07       	cpc	r20, r24
    4bbc:	ab 07       	cpc	r26, r27
    4bbe:	b0 e8       	ldi	r27, 0x80	; 128
    4bc0:	09 f0       	breq	.+2      	; 0x4bc4 <__divsf3_pse+0x56>
    4bc2:	bb 0b       	sbc	r27, r27
    4bc4:	80 2d       	mov	r24, r0
    4bc6:	bf 01       	movw	r22, r30
    4bc8:	ff 27       	eor	r31, r31
    4bca:	93 58       	subi	r25, 0x83	; 131
    4bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    4bce:	32 f0       	brmi	.+12     	; 0x4bdc <__divsf3_pse+0x6e>
    4bd0:	9e 3f       	cpi	r25, 0xFE	; 254
    4bd2:	51 05       	cpc	r21, r1
    4bd4:	70 f0       	brcs	.+28     	; 0x4bf2 <__divsf3_pse+0x84>
    4bd6:	62 c0       	rjmp	.+196    	; 0x4c9c <__fp_inf>
    4bd8:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <__fp_szero>
    4bdc:	5f 3f       	cpi	r21, 0xFF	; 255
    4bde:	e4 f3       	brlt	.-8      	; 0x4bd8 <__divsf3_pse+0x6a>
    4be0:	98 3e       	cpi	r25, 0xE8	; 232
    4be2:	d4 f3       	brlt	.-12     	; 0x4bd8 <__divsf3_pse+0x6a>
    4be4:	86 95       	lsr	r24
    4be6:	77 95       	ror	r23
    4be8:	67 95       	ror	r22
    4bea:	b7 95       	ror	r27
    4bec:	f7 95       	ror	r31
    4bee:	9f 5f       	subi	r25, 0xFF	; 255
    4bf0:	c9 f7       	brne	.-14     	; 0x4be4 <__divsf3_pse+0x76>
    4bf2:	88 0f       	add	r24, r24
    4bf4:	91 1d       	adc	r25, r1
    4bf6:	96 95       	lsr	r25
    4bf8:	87 95       	ror	r24
    4bfa:	97 f9       	bld	r25, 7
    4bfc:	08 95       	ret
    4bfe:	e1 e0       	ldi	r30, 0x01	; 1
    4c00:	66 0f       	add	r22, r22
    4c02:	77 1f       	adc	r23, r23
    4c04:	88 1f       	adc	r24, r24
    4c06:	bb 1f       	adc	r27, r27
    4c08:	62 17       	cp	r22, r18
    4c0a:	73 07       	cpc	r23, r19
    4c0c:	84 07       	cpc	r24, r20
    4c0e:	ba 07       	cpc	r27, r26
    4c10:	20 f0       	brcs	.+8      	; 0x4c1a <__divsf3_pse+0xac>
    4c12:	62 1b       	sub	r22, r18
    4c14:	73 0b       	sbc	r23, r19
    4c16:	84 0b       	sbc	r24, r20
    4c18:	ba 0b       	sbc	r27, r26
    4c1a:	ee 1f       	adc	r30, r30
    4c1c:	88 f7       	brcc	.-30     	; 0x4c00 <__divsf3_pse+0x92>
    4c1e:	e0 95       	com	r30
    4c20:	08 95       	ret

00004c22 <__floatunsisf>:
    4c22:	e8 94       	clt
    4c24:	09 c0       	rjmp	.+18     	; 0x4c38 <__floatsisf+0x12>

00004c26 <__floatsisf>:
    4c26:	97 fb       	bst	r25, 7
    4c28:	3e f4       	brtc	.+14     	; 0x4c38 <__floatsisf+0x12>
    4c2a:	90 95       	com	r25
    4c2c:	80 95       	com	r24
    4c2e:	70 95       	com	r23
    4c30:	61 95       	neg	r22
    4c32:	7f 4f       	sbci	r23, 0xFF	; 255
    4c34:	8f 4f       	sbci	r24, 0xFF	; 255
    4c36:	9f 4f       	sbci	r25, 0xFF	; 255
    4c38:	99 23       	and	r25, r25
    4c3a:	a9 f0       	breq	.+42     	; 0x4c66 <__floatsisf+0x40>
    4c3c:	f9 2f       	mov	r31, r25
    4c3e:	96 e9       	ldi	r25, 0x96	; 150
    4c40:	bb 27       	eor	r27, r27
    4c42:	93 95       	inc	r25
    4c44:	f6 95       	lsr	r31
    4c46:	87 95       	ror	r24
    4c48:	77 95       	ror	r23
    4c4a:	67 95       	ror	r22
    4c4c:	b7 95       	ror	r27
    4c4e:	f1 11       	cpse	r31, r1
    4c50:	f8 cf       	rjmp	.-16     	; 0x4c42 <__floatsisf+0x1c>
    4c52:	fa f4       	brpl	.+62     	; 0x4c92 <__floatsisf+0x6c>
    4c54:	bb 0f       	add	r27, r27
    4c56:	11 f4       	brne	.+4      	; 0x4c5c <__floatsisf+0x36>
    4c58:	60 ff       	sbrs	r22, 0
    4c5a:	1b c0       	rjmp	.+54     	; 0x4c92 <__floatsisf+0x6c>
    4c5c:	6f 5f       	subi	r22, 0xFF	; 255
    4c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c60:	8f 4f       	sbci	r24, 0xFF	; 255
    4c62:	9f 4f       	sbci	r25, 0xFF	; 255
    4c64:	16 c0       	rjmp	.+44     	; 0x4c92 <__floatsisf+0x6c>
    4c66:	88 23       	and	r24, r24
    4c68:	11 f0       	breq	.+4      	; 0x4c6e <__floatsisf+0x48>
    4c6a:	96 e9       	ldi	r25, 0x96	; 150
    4c6c:	11 c0       	rjmp	.+34     	; 0x4c90 <__floatsisf+0x6a>
    4c6e:	77 23       	and	r23, r23
    4c70:	21 f0       	breq	.+8      	; 0x4c7a <__floatsisf+0x54>
    4c72:	9e e8       	ldi	r25, 0x8E	; 142
    4c74:	87 2f       	mov	r24, r23
    4c76:	76 2f       	mov	r23, r22
    4c78:	05 c0       	rjmp	.+10     	; 0x4c84 <__floatsisf+0x5e>
    4c7a:	66 23       	and	r22, r22
    4c7c:	71 f0       	breq	.+28     	; 0x4c9a <__floatsisf+0x74>
    4c7e:	96 e8       	ldi	r25, 0x86	; 134
    4c80:	86 2f       	mov	r24, r22
    4c82:	70 e0       	ldi	r23, 0x00	; 0
    4c84:	60 e0       	ldi	r22, 0x00	; 0
    4c86:	2a f0       	brmi	.+10     	; 0x4c92 <__floatsisf+0x6c>
    4c88:	9a 95       	dec	r25
    4c8a:	66 0f       	add	r22, r22
    4c8c:	77 1f       	adc	r23, r23
    4c8e:	88 1f       	adc	r24, r24
    4c90:	da f7       	brpl	.-10     	; 0x4c88 <__floatsisf+0x62>
    4c92:	88 0f       	add	r24, r24
    4c94:	96 95       	lsr	r25
    4c96:	87 95       	ror	r24
    4c98:	97 f9       	bld	r25, 7
    4c9a:	08 95       	ret

00004c9c <__fp_inf>:
    4c9c:	97 f9       	bld	r25, 7
    4c9e:	9f 67       	ori	r25, 0x7F	; 127
    4ca0:	80 e8       	ldi	r24, 0x80	; 128
    4ca2:	70 e0       	ldi	r23, 0x00	; 0
    4ca4:	60 e0       	ldi	r22, 0x00	; 0
    4ca6:	08 95       	ret

00004ca8 <__fp_nan>:
    4ca8:	9f ef       	ldi	r25, 0xFF	; 255
    4caa:	80 ec       	ldi	r24, 0xC0	; 192
    4cac:	08 95       	ret

00004cae <__fp_pscA>:
    4cae:	00 24       	eor	r0, r0
    4cb0:	0a 94       	dec	r0
    4cb2:	16 16       	cp	r1, r22
    4cb4:	17 06       	cpc	r1, r23
    4cb6:	18 06       	cpc	r1, r24
    4cb8:	09 06       	cpc	r0, r25
    4cba:	08 95       	ret

00004cbc <__fp_pscB>:
    4cbc:	00 24       	eor	r0, r0
    4cbe:	0a 94       	dec	r0
    4cc0:	12 16       	cp	r1, r18
    4cc2:	13 06       	cpc	r1, r19
    4cc4:	14 06       	cpc	r1, r20
    4cc6:	05 06       	cpc	r0, r21
    4cc8:	08 95       	ret

00004cca <__fp_round>:
    4cca:	09 2e       	mov	r0, r25
    4ccc:	03 94       	inc	r0
    4cce:	00 0c       	add	r0, r0
    4cd0:	11 f4       	brne	.+4      	; 0x4cd6 <__fp_round+0xc>
    4cd2:	88 23       	and	r24, r24
    4cd4:	52 f0       	brmi	.+20     	; 0x4cea <__fp_round+0x20>
    4cd6:	bb 0f       	add	r27, r27
    4cd8:	40 f4       	brcc	.+16     	; 0x4cea <__fp_round+0x20>
    4cda:	bf 2b       	or	r27, r31
    4cdc:	11 f4       	brne	.+4      	; 0x4ce2 <__fp_round+0x18>
    4cde:	60 ff       	sbrs	r22, 0
    4ce0:	04 c0       	rjmp	.+8      	; 0x4cea <__fp_round+0x20>
    4ce2:	6f 5f       	subi	r22, 0xFF	; 255
    4ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cea:	08 95       	ret

00004cec <__gesf2>:
    4cec:	69 d0       	rcall	.+210    	; 0x4dc0 <__fp_cmp>
    4cee:	08 f4       	brcc	.+2      	; 0x4cf2 <__gesf2+0x6>
    4cf0:	8f ef       	ldi	r24, 0xFF	; 255
    4cf2:	08 95       	ret

00004cf4 <__mulsf3>:
    4cf4:	0c d0       	rcall	.+24     	; 0x4d0e <__mulsf3x>
    4cf6:	e9 cf       	rjmp	.-46     	; 0x4cca <__fp_round>
    4cf8:	da df       	rcall	.-76     	; 0x4cae <__fp_pscA>
    4cfa:	28 f0       	brcs	.+10     	; 0x4d06 <__mulsf3+0x12>
    4cfc:	df df       	rcall	.-66     	; 0x4cbc <__fp_pscB>
    4cfe:	18 f0       	brcs	.+6      	; 0x4d06 <__mulsf3+0x12>
    4d00:	95 23       	and	r25, r21
    4d02:	09 f0       	breq	.+2      	; 0x4d06 <__mulsf3+0x12>
    4d04:	cb cf       	rjmp	.-106    	; 0x4c9c <__fp_inf>
    4d06:	d0 cf       	rjmp	.-96     	; 0x4ca8 <__fp_nan>
    4d08:	11 24       	eor	r1, r1
    4d0a:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <__fp_szero>

00004d0e <__mulsf3x>:
    4d0e:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__fp_split3>
    4d12:	90 f3       	brcs	.-28     	; 0x4cf8 <__mulsf3+0x4>

00004d14 <__mulsf3_pse>:
    4d14:	95 9f       	mul	r25, r21
    4d16:	c1 f3       	breq	.-16     	; 0x4d08 <__mulsf3+0x14>
    4d18:	95 0f       	add	r25, r21
    4d1a:	50 e0       	ldi	r21, 0x00	; 0
    4d1c:	55 1f       	adc	r21, r21
    4d1e:	62 9f       	mul	r22, r18
    4d20:	f0 01       	movw	r30, r0
    4d22:	72 9f       	mul	r23, r18
    4d24:	bb 27       	eor	r27, r27
    4d26:	f0 0d       	add	r31, r0
    4d28:	b1 1d       	adc	r27, r1
    4d2a:	63 9f       	mul	r22, r19
    4d2c:	aa 27       	eor	r26, r26
    4d2e:	f0 0d       	add	r31, r0
    4d30:	b1 1d       	adc	r27, r1
    4d32:	aa 1f       	adc	r26, r26
    4d34:	64 9f       	mul	r22, r20
    4d36:	66 27       	eor	r22, r22
    4d38:	b0 0d       	add	r27, r0
    4d3a:	a1 1d       	adc	r26, r1
    4d3c:	66 1f       	adc	r22, r22
    4d3e:	82 9f       	mul	r24, r18
    4d40:	22 27       	eor	r18, r18
    4d42:	b0 0d       	add	r27, r0
    4d44:	a1 1d       	adc	r26, r1
    4d46:	62 1f       	adc	r22, r18
    4d48:	73 9f       	mul	r23, r19
    4d4a:	b0 0d       	add	r27, r0
    4d4c:	a1 1d       	adc	r26, r1
    4d4e:	62 1f       	adc	r22, r18
    4d50:	83 9f       	mul	r24, r19
    4d52:	a0 0d       	add	r26, r0
    4d54:	61 1d       	adc	r22, r1
    4d56:	22 1f       	adc	r18, r18
    4d58:	74 9f       	mul	r23, r20
    4d5a:	33 27       	eor	r19, r19
    4d5c:	a0 0d       	add	r26, r0
    4d5e:	61 1d       	adc	r22, r1
    4d60:	23 1f       	adc	r18, r19
    4d62:	84 9f       	mul	r24, r20
    4d64:	60 0d       	add	r22, r0
    4d66:	21 1d       	adc	r18, r1
    4d68:	82 2f       	mov	r24, r18
    4d6a:	76 2f       	mov	r23, r22
    4d6c:	6a 2f       	mov	r22, r26
    4d6e:	11 24       	eor	r1, r1
    4d70:	9f 57       	subi	r25, 0x7F	; 127
    4d72:	50 40       	sbci	r21, 0x00	; 0
    4d74:	92 f0       	brmi	.+36     	; 0x4d9a <__mulsf3_pse+0x86>
    4d76:	e9 f0       	breq	.+58     	; 0x4db2 <__mulsf3_pse+0x9e>
    4d78:	88 23       	and	r24, r24
    4d7a:	4a f0       	brmi	.+18     	; 0x4d8e <__mulsf3_pse+0x7a>
    4d7c:	ee 0f       	add	r30, r30
    4d7e:	ff 1f       	adc	r31, r31
    4d80:	bb 1f       	adc	r27, r27
    4d82:	66 1f       	adc	r22, r22
    4d84:	77 1f       	adc	r23, r23
    4d86:	88 1f       	adc	r24, r24
    4d88:	91 50       	subi	r25, 0x01	; 1
    4d8a:	50 40       	sbci	r21, 0x00	; 0
    4d8c:	a9 f7       	brne	.-22     	; 0x4d78 <__mulsf3_pse+0x64>
    4d8e:	9e 3f       	cpi	r25, 0xFE	; 254
    4d90:	51 05       	cpc	r21, r1
    4d92:	78 f0       	brcs	.+30     	; 0x4db2 <__mulsf3_pse+0x9e>
    4d94:	83 cf       	rjmp	.-250    	; 0x4c9c <__fp_inf>
    4d96:	0c 94 26 17 	jmp	0x2e4c	; 0x2e4c <__fp_szero>
    4d9a:	5f 3f       	cpi	r21, 0xFF	; 255
    4d9c:	e4 f3       	brlt	.-8      	; 0x4d96 <__mulsf3_pse+0x82>
    4d9e:	98 3e       	cpi	r25, 0xE8	; 232
    4da0:	d4 f3       	brlt	.-12     	; 0x4d96 <__mulsf3_pse+0x82>
    4da2:	86 95       	lsr	r24
    4da4:	77 95       	ror	r23
    4da6:	67 95       	ror	r22
    4da8:	b7 95       	ror	r27
    4daa:	f7 95       	ror	r31
    4dac:	e7 95       	ror	r30
    4dae:	9f 5f       	subi	r25, 0xFF	; 255
    4db0:	c1 f7       	brne	.-16     	; 0x4da2 <__mulsf3_pse+0x8e>
    4db2:	fe 2b       	or	r31, r30
    4db4:	88 0f       	add	r24, r24
    4db6:	91 1d       	adc	r25, r1
    4db8:	96 95       	lsr	r25
    4dba:	87 95       	ror	r24
    4dbc:	97 f9       	bld	r25, 7
    4dbe:	08 95       	ret

00004dc0 <__fp_cmp>:
    4dc0:	99 0f       	add	r25, r25
    4dc2:	00 08       	sbc	r0, r0
    4dc4:	55 0f       	add	r21, r21
    4dc6:	aa 0b       	sbc	r26, r26
    4dc8:	e0 e8       	ldi	r30, 0x80	; 128
    4dca:	fe ef       	ldi	r31, 0xFE	; 254
    4dcc:	16 16       	cp	r1, r22
    4dce:	17 06       	cpc	r1, r23
    4dd0:	e8 07       	cpc	r30, r24
    4dd2:	f9 07       	cpc	r31, r25
    4dd4:	c0 f0       	brcs	.+48     	; 0x4e06 <__fp_cmp+0x46>
    4dd6:	12 16       	cp	r1, r18
    4dd8:	13 06       	cpc	r1, r19
    4dda:	e4 07       	cpc	r30, r20
    4ddc:	f5 07       	cpc	r31, r21
    4dde:	98 f0       	brcs	.+38     	; 0x4e06 <__fp_cmp+0x46>
    4de0:	62 1b       	sub	r22, r18
    4de2:	73 0b       	sbc	r23, r19
    4de4:	84 0b       	sbc	r24, r20
    4de6:	95 0b       	sbc	r25, r21
    4de8:	39 f4       	brne	.+14     	; 0x4df8 <__fp_cmp+0x38>
    4dea:	0a 26       	eor	r0, r26
    4dec:	61 f0       	breq	.+24     	; 0x4e06 <__fp_cmp+0x46>
    4dee:	23 2b       	or	r18, r19
    4df0:	24 2b       	or	r18, r20
    4df2:	25 2b       	or	r18, r21
    4df4:	21 f4       	brne	.+8      	; 0x4dfe <__fp_cmp+0x3e>
    4df6:	08 95       	ret
    4df8:	0a 26       	eor	r0, r26
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <__fp_cmp+0x3e>
    4dfc:	a1 40       	sbci	r26, 0x01	; 1
    4dfe:	a6 95       	lsr	r26
    4e00:	8f ef       	ldi	r24, 0xFF	; 255
    4e02:	81 1d       	adc	r24, r1
    4e04:	81 1d       	adc	r24, r1
    4e06:	08 95       	ret

00004e08 <__udivmodsi4>:
    4e08:	a1 e2       	ldi	r26, 0x21	; 33
    4e0a:	1a 2e       	mov	r1, r26
    4e0c:	aa 1b       	sub	r26, r26
    4e0e:	bb 1b       	sub	r27, r27
    4e10:	fd 01       	movw	r30, r26
    4e12:	0d c0       	rjmp	.+26     	; 0x4e2e <__udivmodsi4_ep>

00004e14 <__udivmodsi4_loop>:
    4e14:	aa 1f       	adc	r26, r26
    4e16:	bb 1f       	adc	r27, r27
    4e18:	ee 1f       	adc	r30, r30
    4e1a:	ff 1f       	adc	r31, r31
    4e1c:	a2 17       	cp	r26, r18
    4e1e:	b3 07       	cpc	r27, r19
    4e20:	e4 07       	cpc	r30, r20
    4e22:	f5 07       	cpc	r31, r21
    4e24:	20 f0       	brcs	.+8      	; 0x4e2e <__udivmodsi4_ep>
    4e26:	a2 1b       	sub	r26, r18
    4e28:	b3 0b       	sbc	r27, r19
    4e2a:	e4 0b       	sbc	r30, r20
    4e2c:	f5 0b       	sbc	r31, r21

00004e2e <__udivmodsi4_ep>:
    4e2e:	66 1f       	adc	r22, r22
    4e30:	77 1f       	adc	r23, r23
    4e32:	88 1f       	adc	r24, r24
    4e34:	99 1f       	adc	r25, r25
    4e36:	1a 94       	dec	r1
    4e38:	69 f7       	brne	.-38     	; 0x4e14 <__udivmodsi4_loop>
    4e3a:	60 95       	com	r22
    4e3c:	70 95       	com	r23
    4e3e:	80 95       	com	r24
    4e40:	90 95       	com	r25
    4e42:	9b 01       	movw	r18, r22
    4e44:	ac 01       	movw	r20, r24
    4e46:	bd 01       	movw	r22, r26
    4e48:	cf 01       	movw	r24, r30
    4e4a:	08 95       	ret

00004e4c <__tablejump2__>:
    4e4c:	ee 0f       	add	r30, r30
    4e4e:	ff 1f       	adc	r31, r31
    4e50:	88 1f       	adc	r24, r24
    4e52:	8b bf       	out	0x3b, r24	; 59
    4e54:	07 90       	elpm	r0, Z+
    4e56:	f6 91       	elpm	r31, Z
    4e58:	e0 2d       	mov	r30, r0
    4e5a:	19 94       	eijmp

00004e5c <__muluhisi3>:
    4e5c:	09 d0       	rcall	.+18     	; 0x4e70 <__umulhisi3>
    4e5e:	a5 9f       	mul	r26, r21
    4e60:	90 0d       	add	r25, r0
    4e62:	b4 9f       	mul	r27, r20
    4e64:	90 0d       	add	r25, r0
    4e66:	a4 9f       	mul	r26, r20
    4e68:	80 0d       	add	r24, r0
    4e6a:	91 1d       	adc	r25, r1
    4e6c:	11 24       	eor	r1, r1
    4e6e:	08 95       	ret

00004e70 <__umulhisi3>:
    4e70:	a2 9f       	mul	r26, r18
    4e72:	b0 01       	movw	r22, r0
    4e74:	b3 9f       	mul	r27, r19
    4e76:	c0 01       	movw	r24, r0
    4e78:	a3 9f       	mul	r26, r19
    4e7a:	70 0d       	add	r23, r0
    4e7c:	81 1d       	adc	r24, r1
    4e7e:	11 24       	eor	r1, r1
    4e80:	91 1d       	adc	r25, r1
    4e82:	b2 9f       	mul	r27, r18
    4e84:	70 0d       	add	r23, r0
    4e86:	81 1d       	adc	r24, r1
    4e88:	11 24       	eor	r1, r1
    4e8a:	91 1d       	adc	r25, r1
    4e8c:	08 95       	ret

00004e8e <calloc>:
    4e8e:	0f 93       	push	r16
    4e90:	1f 93       	push	r17
    4e92:	cf 93       	push	r28
    4e94:	df 93       	push	r29
    4e96:	86 9f       	mul	r24, r22
    4e98:	80 01       	movw	r16, r0
    4e9a:	87 9f       	mul	r24, r23
    4e9c:	10 0d       	add	r17, r0
    4e9e:	96 9f       	mul	r25, r22
    4ea0:	10 0d       	add	r17, r0
    4ea2:	11 24       	eor	r1, r1
    4ea4:	c8 01       	movw	r24, r16
    4ea6:	0d d0       	rcall	.+26     	; 0x4ec2 <malloc>
    4ea8:	ec 01       	movw	r28, r24
    4eaa:	00 97       	sbiw	r24, 0x00	; 0
    4eac:	21 f0       	breq	.+8      	; 0x4eb6 <calloc+0x28>
    4eae:	a8 01       	movw	r20, r16
    4eb0:	60 e0       	ldi	r22, 0x00	; 0
    4eb2:	70 e0       	ldi	r23, 0x00	; 0
    4eb4:	34 d1       	rcall	.+616    	; 0x511e <memset>
    4eb6:	ce 01       	movw	r24, r28
    4eb8:	df 91       	pop	r29
    4eba:	cf 91       	pop	r28
    4ebc:	1f 91       	pop	r17
    4ebe:	0f 91       	pop	r16
    4ec0:	08 95       	ret

00004ec2 <malloc>:
    4ec2:	0f 93       	push	r16
    4ec4:	1f 93       	push	r17
    4ec6:	cf 93       	push	r28
    4ec8:	df 93       	push	r29
    4eca:	82 30       	cpi	r24, 0x02	; 2
    4ecc:	91 05       	cpc	r25, r1
    4ece:	10 f4       	brcc	.+4      	; 0x4ed4 <malloc+0x12>
    4ed0:	82 e0       	ldi	r24, 0x02	; 2
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	e0 91 46 0a 	lds	r30, 0x0A46	; 0x800a46 <__flp>
    4ed8:	f0 91 47 0a 	lds	r31, 0x0A47	; 0x800a47 <__flp+0x1>
    4edc:	20 e0       	ldi	r18, 0x00	; 0
    4ede:	30 e0       	ldi	r19, 0x00	; 0
    4ee0:	a0 e0       	ldi	r26, 0x00	; 0
    4ee2:	b0 e0       	ldi	r27, 0x00	; 0
    4ee4:	30 97       	sbiw	r30, 0x00	; 0
    4ee6:	19 f1       	breq	.+70     	; 0x4f2e <malloc+0x6c>
    4ee8:	40 81       	ld	r20, Z
    4eea:	51 81       	ldd	r21, Z+1	; 0x01
    4eec:	02 81       	ldd	r16, Z+2	; 0x02
    4eee:	13 81       	ldd	r17, Z+3	; 0x03
    4ef0:	48 17       	cp	r20, r24
    4ef2:	59 07       	cpc	r21, r25
    4ef4:	c8 f0       	brcs	.+50     	; 0x4f28 <malloc+0x66>
    4ef6:	84 17       	cp	r24, r20
    4ef8:	95 07       	cpc	r25, r21
    4efa:	69 f4       	brne	.+26     	; 0x4f16 <malloc+0x54>
    4efc:	10 97       	sbiw	r26, 0x00	; 0
    4efe:	31 f0       	breq	.+12     	; 0x4f0c <malloc+0x4a>
    4f00:	12 96       	adiw	r26, 0x02	; 2
    4f02:	0c 93       	st	X, r16
    4f04:	12 97       	sbiw	r26, 0x02	; 2
    4f06:	13 96       	adiw	r26, 0x03	; 3
    4f08:	1c 93       	st	X, r17
    4f0a:	27 c0       	rjmp	.+78     	; 0x4f5a <malloc+0x98>
    4f0c:	00 93 46 0a 	sts	0x0A46, r16	; 0x800a46 <__flp>
    4f10:	10 93 47 0a 	sts	0x0A47, r17	; 0x800a47 <__flp+0x1>
    4f14:	22 c0       	rjmp	.+68     	; 0x4f5a <malloc+0x98>
    4f16:	21 15       	cp	r18, r1
    4f18:	31 05       	cpc	r19, r1
    4f1a:	19 f0       	breq	.+6      	; 0x4f22 <malloc+0x60>
    4f1c:	42 17       	cp	r20, r18
    4f1e:	53 07       	cpc	r21, r19
    4f20:	18 f4       	brcc	.+6      	; 0x4f28 <malloc+0x66>
    4f22:	9a 01       	movw	r18, r20
    4f24:	bd 01       	movw	r22, r26
    4f26:	ef 01       	movw	r28, r30
    4f28:	df 01       	movw	r26, r30
    4f2a:	f8 01       	movw	r30, r16
    4f2c:	db cf       	rjmp	.-74     	; 0x4ee4 <malloc+0x22>
    4f2e:	21 15       	cp	r18, r1
    4f30:	31 05       	cpc	r19, r1
    4f32:	f9 f0       	breq	.+62     	; 0x4f72 <malloc+0xb0>
    4f34:	28 1b       	sub	r18, r24
    4f36:	39 0b       	sbc	r19, r25
    4f38:	24 30       	cpi	r18, 0x04	; 4
    4f3a:	31 05       	cpc	r19, r1
    4f3c:	80 f4       	brcc	.+32     	; 0x4f5e <malloc+0x9c>
    4f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f40:	9b 81       	ldd	r25, Y+3	; 0x03
    4f42:	61 15       	cp	r22, r1
    4f44:	71 05       	cpc	r23, r1
    4f46:	21 f0       	breq	.+8      	; 0x4f50 <malloc+0x8e>
    4f48:	fb 01       	movw	r30, r22
    4f4a:	93 83       	std	Z+3, r25	; 0x03
    4f4c:	82 83       	std	Z+2, r24	; 0x02
    4f4e:	04 c0       	rjmp	.+8      	; 0x4f58 <malloc+0x96>
    4f50:	90 93 47 0a 	sts	0x0A47, r25	; 0x800a47 <__flp+0x1>
    4f54:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__flp>
    4f58:	fe 01       	movw	r30, r28
    4f5a:	32 96       	adiw	r30, 0x02	; 2
    4f5c:	44 c0       	rjmp	.+136    	; 0x4fe6 <malloc+0x124>
    4f5e:	fe 01       	movw	r30, r28
    4f60:	e2 0f       	add	r30, r18
    4f62:	f3 1f       	adc	r31, r19
    4f64:	81 93       	st	Z+, r24
    4f66:	91 93       	st	Z+, r25
    4f68:	22 50       	subi	r18, 0x02	; 2
    4f6a:	31 09       	sbc	r19, r1
    4f6c:	39 83       	std	Y+1, r19	; 0x01
    4f6e:	28 83       	st	Y, r18
    4f70:	3a c0       	rjmp	.+116    	; 0x4fe6 <malloc+0x124>
    4f72:	20 91 44 0a 	lds	r18, 0x0A44	; 0x800a44 <__brkval>
    4f76:	30 91 45 0a 	lds	r19, 0x0A45	; 0x800a45 <__brkval+0x1>
    4f7a:	23 2b       	or	r18, r19
    4f7c:	41 f4       	brne	.+16     	; 0x4f8e <malloc+0xcc>
    4f7e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4f82:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4f86:	30 93 45 0a 	sts	0x0A45, r19	; 0x800a45 <__brkval+0x1>
    4f8a:	20 93 44 0a 	sts	0x0A44, r18	; 0x800a44 <__brkval>
    4f8e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4f92:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4f96:	21 15       	cp	r18, r1
    4f98:	31 05       	cpc	r19, r1
    4f9a:	41 f4       	brne	.+16     	; 0x4fac <malloc+0xea>
    4f9c:	2d b7       	in	r18, 0x3d	; 61
    4f9e:	3e b7       	in	r19, 0x3e	; 62
    4fa0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4fa4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4fa8:	24 1b       	sub	r18, r20
    4faa:	35 0b       	sbc	r19, r21
    4fac:	e0 91 44 0a 	lds	r30, 0x0A44	; 0x800a44 <__brkval>
    4fb0:	f0 91 45 0a 	lds	r31, 0x0A45	; 0x800a45 <__brkval+0x1>
    4fb4:	e2 17       	cp	r30, r18
    4fb6:	f3 07       	cpc	r31, r19
    4fb8:	a0 f4       	brcc	.+40     	; 0x4fe2 <malloc+0x120>
    4fba:	2e 1b       	sub	r18, r30
    4fbc:	3f 0b       	sbc	r19, r31
    4fbe:	28 17       	cp	r18, r24
    4fc0:	39 07       	cpc	r19, r25
    4fc2:	78 f0       	brcs	.+30     	; 0x4fe2 <malloc+0x120>
    4fc4:	ac 01       	movw	r20, r24
    4fc6:	4e 5f       	subi	r20, 0xFE	; 254
    4fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    4fca:	24 17       	cp	r18, r20
    4fcc:	35 07       	cpc	r19, r21
    4fce:	48 f0       	brcs	.+18     	; 0x4fe2 <malloc+0x120>
    4fd0:	4e 0f       	add	r20, r30
    4fd2:	5f 1f       	adc	r21, r31
    4fd4:	50 93 45 0a 	sts	0x0A45, r21	; 0x800a45 <__brkval+0x1>
    4fd8:	40 93 44 0a 	sts	0x0A44, r20	; 0x800a44 <__brkval>
    4fdc:	81 93       	st	Z+, r24
    4fde:	91 93       	st	Z+, r25
    4fe0:	02 c0       	rjmp	.+4      	; 0x4fe6 <malloc+0x124>
    4fe2:	e0 e0       	ldi	r30, 0x00	; 0
    4fe4:	f0 e0       	ldi	r31, 0x00	; 0
    4fe6:	cf 01       	movw	r24, r30
    4fe8:	df 91       	pop	r29
    4fea:	cf 91       	pop	r28
    4fec:	1f 91       	pop	r17
    4fee:	0f 91       	pop	r16
    4ff0:	08 95       	ret

00004ff2 <free>:
    4ff2:	cf 93       	push	r28
    4ff4:	df 93       	push	r29
    4ff6:	00 97       	sbiw	r24, 0x00	; 0
    4ff8:	09 f4       	brne	.+2      	; 0x4ffc <free+0xa>
    4ffa:	81 c0       	rjmp	.+258    	; 0x50fe <free+0x10c>
    4ffc:	fc 01       	movw	r30, r24
    4ffe:	32 97       	sbiw	r30, 0x02	; 2
    5000:	13 82       	std	Z+3, r1	; 0x03
    5002:	12 82       	std	Z+2, r1	; 0x02
    5004:	a0 91 46 0a 	lds	r26, 0x0A46	; 0x800a46 <__flp>
    5008:	b0 91 47 0a 	lds	r27, 0x0A47	; 0x800a47 <__flp+0x1>
    500c:	10 97       	sbiw	r26, 0x00	; 0
    500e:	81 f4       	brne	.+32     	; 0x5030 <free+0x3e>
    5010:	20 81       	ld	r18, Z
    5012:	31 81       	ldd	r19, Z+1	; 0x01
    5014:	82 0f       	add	r24, r18
    5016:	93 1f       	adc	r25, r19
    5018:	20 91 44 0a 	lds	r18, 0x0A44	; 0x800a44 <__brkval>
    501c:	30 91 45 0a 	lds	r19, 0x0A45	; 0x800a45 <__brkval+0x1>
    5020:	28 17       	cp	r18, r24
    5022:	39 07       	cpc	r19, r25
    5024:	51 f5       	brne	.+84     	; 0x507a <free+0x88>
    5026:	f0 93 45 0a 	sts	0x0A45, r31	; 0x800a45 <__brkval+0x1>
    502a:	e0 93 44 0a 	sts	0x0A44, r30	; 0x800a44 <__brkval>
    502e:	67 c0       	rjmp	.+206    	; 0x50fe <free+0x10c>
    5030:	ed 01       	movw	r28, r26
    5032:	20 e0       	ldi	r18, 0x00	; 0
    5034:	30 e0       	ldi	r19, 0x00	; 0
    5036:	ce 17       	cp	r28, r30
    5038:	df 07       	cpc	r29, r31
    503a:	40 f4       	brcc	.+16     	; 0x504c <free+0x5a>
    503c:	4a 81       	ldd	r20, Y+2	; 0x02
    503e:	5b 81       	ldd	r21, Y+3	; 0x03
    5040:	9e 01       	movw	r18, r28
    5042:	41 15       	cp	r20, r1
    5044:	51 05       	cpc	r21, r1
    5046:	f1 f0       	breq	.+60     	; 0x5084 <free+0x92>
    5048:	ea 01       	movw	r28, r20
    504a:	f5 cf       	rjmp	.-22     	; 0x5036 <free+0x44>
    504c:	d3 83       	std	Z+3, r29	; 0x03
    504e:	c2 83       	std	Z+2, r28	; 0x02
    5050:	40 81       	ld	r20, Z
    5052:	51 81       	ldd	r21, Z+1	; 0x01
    5054:	84 0f       	add	r24, r20
    5056:	95 1f       	adc	r25, r21
    5058:	c8 17       	cp	r28, r24
    505a:	d9 07       	cpc	r29, r25
    505c:	59 f4       	brne	.+22     	; 0x5074 <free+0x82>
    505e:	88 81       	ld	r24, Y
    5060:	99 81       	ldd	r25, Y+1	; 0x01
    5062:	84 0f       	add	r24, r20
    5064:	95 1f       	adc	r25, r21
    5066:	02 96       	adiw	r24, 0x02	; 2
    5068:	91 83       	std	Z+1, r25	; 0x01
    506a:	80 83       	st	Z, r24
    506c:	8a 81       	ldd	r24, Y+2	; 0x02
    506e:	9b 81       	ldd	r25, Y+3	; 0x03
    5070:	93 83       	std	Z+3, r25	; 0x03
    5072:	82 83       	std	Z+2, r24	; 0x02
    5074:	21 15       	cp	r18, r1
    5076:	31 05       	cpc	r19, r1
    5078:	29 f4       	brne	.+10     	; 0x5084 <free+0x92>
    507a:	f0 93 47 0a 	sts	0x0A47, r31	; 0x800a47 <__flp+0x1>
    507e:	e0 93 46 0a 	sts	0x0A46, r30	; 0x800a46 <__flp>
    5082:	3d c0       	rjmp	.+122    	; 0x50fe <free+0x10c>
    5084:	e9 01       	movw	r28, r18
    5086:	fb 83       	std	Y+3, r31	; 0x03
    5088:	ea 83       	std	Y+2, r30	; 0x02
    508a:	49 91       	ld	r20, Y+
    508c:	59 91       	ld	r21, Y+
    508e:	c4 0f       	add	r28, r20
    5090:	d5 1f       	adc	r29, r21
    5092:	ec 17       	cp	r30, r28
    5094:	fd 07       	cpc	r31, r29
    5096:	61 f4       	brne	.+24     	; 0x50b0 <free+0xbe>
    5098:	80 81       	ld	r24, Z
    509a:	91 81       	ldd	r25, Z+1	; 0x01
    509c:	84 0f       	add	r24, r20
    509e:	95 1f       	adc	r25, r21
    50a0:	02 96       	adiw	r24, 0x02	; 2
    50a2:	e9 01       	movw	r28, r18
    50a4:	99 83       	std	Y+1, r25	; 0x01
    50a6:	88 83       	st	Y, r24
    50a8:	82 81       	ldd	r24, Z+2	; 0x02
    50aa:	93 81       	ldd	r25, Z+3	; 0x03
    50ac:	9b 83       	std	Y+3, r25	; 0x03
    50ae:	8a 83       	std	Y+2, r24	; 0x02
    50b0:	e0 e0       	ldi	r30, 0x00	; 0
    50b2:	f0 e0       	ldi	r31, 0x00	; 0
    50b4:	12 96       	adiw	r26, 0x02	; 2
    50b6:	8d 91       	ld	r24, X+
    50b8:	9c 91       	ld	r25, X
    50ba:	13 97       	sbiw	r26, 0x03	; 3
    50bc:	00 97       	sbiw	r24, 0x00	; 0
    50be:	19 f0       	breq	.+6      	; 0x50c6 <free+0xd4>
    50c0:	fd 01       	movw	r30, r26
    50c2:	dc 01       	movw	r26, r24
    50c4:	f7 cf       	rjmp	.-18     	; 0x50b4 <free+0xc2>
    50c6:	8d 91       	ld	r24, X+
    50c8:	9c 91       	ld	r25, X
    50ca:	11 97       	sbiw	r26, 0x01	; 1
    50cc:	9d 01       	movw	r18, r26
    50ce:	2e 5f       	subi	r18, 0xFE	; 254
    50d0:	3f 4f       	sbci	r19, 0xFF	; 255
    50d2:	82 0f       	add	r24, r18
    50d4:	93 1f       	adc	r25, r19
    50d6:	20 91 44 0a 	lds	r18, 0x0A44	; 0x800a44 <__brkval>
    50da:	30 91 45 0a 	lds	r19, 0x0A45	; 0x800a45 <__brkval+0x1>
    50de:	28 17       	cp	r18, r24
    50e0:	39 07       	cpc	r19, r25
    50e2:	69 f4       	brne	.+26     	; 0x50fe <free+0x10c>
    50e4:	30 97       	sbiw	r30, 0x00	; 0
    50e6:	29 f4       	brne	.+10     	; 0x50f2 <free+0x100>
    50e8:	10 92 47 0a 	sts	0x0A47, r1	; 0x800a47 <__flp+0x1>
    50ec:	10 92 46 0a 	sts	0x0A46, r1	; 0x800a46 <__flp>
    50f0:	02 c0       	rjmp	.+4      	; 0x50f6 <free+0x104>
    50f2:	13 82       	std	Z+3, r1	; 0x03
    50f4:	12 82       	std	Z+2, r1	; 0x02
    50f6:	b0 93 45 0a 	sts	0x0A45, r27	; 0x800a45 <__brkval+0x1>
    50fa:	a0 93 44 0a 	sts	0x0A44, r26	; 0x800a44 <__brkval>
    50fe:	df 91       	pop	r29
    5100:	cf 91       	pop	r28
    5102:	08 95       	ret

00005104 <abort>:
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	f8 94       	cli
    510a:	58 c3       	rjmp	.+1712   	; 0x57bc <_exit>

0000510c <memcpy>:
    510c:	fb 01       	movw	r30, r22
    510e:	dc 01       	movw	r26, r24
    5110:	02 c0       	rjmp	.+4      	; 0x5116 <memcpy+0xa>
    5112:	01 90       	ld	r0, Z+
    5114:	0d 92       	st	X+, r0
    5116:	41 50       	subi	r20, 0x01	; 1
    5118:	50 40       	sbci	r21, 0x00	; 0
    511a:	d8 f7       	brcc	.-10     	; 0x5112 <memcpy+0x6>
    511c:	08 95       	ret

0000511e <memset>:
    511e:	dc 01       	movw	r26, r24
    5120:	01 c0       	rjmp	.+2      	; 0x5124 <memset+0x6>
    5122:	6d 93       	st	X+, r22
    5124:	41 50       	subi	r20, 0x01	; 1
    5126:	50 40       	sbci	r21, 0x00	; 0
    5128:	e0 f7       	brcc	.-8      	; 0x5122 <memset+0x4>
    512a:	08 95       	ret

0000512c <strcat>:
    512c:	fb 01       	movw	r30, r22
    512e:	dc 01       	movw	r26, r24
    5130:	0d 90       	ld	r0, X+
    5132:	00 20       	and	r0, r0
    5134:	e9 f7       	brne	.-6      	; 0x5130 <strcat+0x4>
    5136:	11 97       	sbiw	r26, 0x01	; 1
    5138:	01 90       	ld	r0, Z+
    513a:	0d 92       	st	X+, r0
    513c:	00 20       	and	r0, r0
    513e:	e1 f7       	brne	.-8      	; 0x5138 <strcat+0xc>
    5140:	08 95       	ret

00005142 <strcpy>:
    5142:	fb 01       	movw	r30, r22
    5144:	dc 01       	movw	r26, r24
    5146:	01 90       	ld	r0, Z+
    5148:	0d 92       	st	X+, r0
    514a:	00 20       	and	r0, r0
    514c:	e1 f7       	brne	.-8      	; 0x5146 <strcpy+0x4>
    514e:	08 95       	ret

00005150 <strncasecmp>:
    5150:	fb 01       	movw	r30, r22
    5152:	dc 01       	movw	r26, r24
    5154:	41 50       	subi	r20, 0x01	; 1
    5156:	50 40       	sbci	r21, 0x00	; 0
    5158:	88 f0       	brcs	.+34     	; 0x517c <strncasecmp+0x2c>
    515a:	8d 91       	ld	r24, X+
    515c:	81 34       	cpi	r24, 0x41	; 65
    515e:	1c f0       	brlt	.+6      	; 0x5166 <strncasecmp+0x16>
    5160:	8b 35       	cpi	r24, 0x5B	; 91
    5162:	0c f4       	brge	.+2      	; 0x5166 <strncasecmp+0x16>
    5164:	80 5e       	subi	r24, 0xE0	; 224
    5166:	61 91       	ld	r22, Z+
    5168:	61 34       	cpi	r22, 0x41	; 65
    516a:	1c f0       	brlt	.+6      	; 0x5172 <strncasecmp+0x22>
    516c:	6b 35       	cpi	r22, 0x5B	; 91
    516e:	0c f4       	brge	.+2      	; 0x5172 <strncasecmp+0x22>
    5170:	60 5e       	subi	r22, 0xE0	; 224
    5172:	86 1b       	sub	r24, r22
    5174:	61 11       	cpse	r22, r1
    5176:	71 f3       	breq	.-36     	; 0x5154 <strncasecmp+0x4>
    5178:	99 0b       	sbc	r25, r25
    517a:	08 95       	ret
    517c:	88 1b       	sub	r24, r24
    517e:	fc cf       	rjmp	.-8      	; 0x5178 <strncasecmp+0x28>

00005180 <printf>:
    5180:	cf 93       	push	r28
    5182:	df 93       	push	r29
    5184:	cd b7       	in	r28, 0x3d	; 61
    5186:	de b7       	in	r29, 0x3e	; 62
    5188:	ae 01       	movw	r20, r28
    518a:	4a 5f       	subi	r20, 0xFA	; 250
    518c:	5f 4f       	sbci	r21, 0xFF	; 255
    518e:	fa 01       	movw	r30, r20
    5190:	61 91       	ld	r22, Z+
    5192:	71 91       	ld	r23, Z+
    5194:	af 01       	movw	r20, r30
    5196:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <__iob+0x2>
    519a:	90 91 4b 0a 	lds	r25, 0x0A4B	; 0x800a4b <__iob+0x3>
    519e:	61 d0       	rcall	.+194    	; 0x5262 <vfprintf>
    51a0:	df 91       	pop	r29
    51a2:	cf 91       	pop	r28
    51a4:	08 95       	ret

000051a6 <puts>:
    51a6:	0f 93       	push	r16
    51a8:	1f 93       	push	r17
    51aa:	cf 93       	push	r28
    51ac:	df 93       	push	r29
    51ae:	e0 91 4a 0a 	lds	r30, 0x0A4A	; 0x800a4a <__iob+0x2>
    51b2:	f0 91 4b 0a 	lds	r31, 0x0A4B	; 0x800a4b <__iob+0x3>
    51b6:	23 81       	ldd	r18, Z+3	; 0x03
    51b8:	21 ff       	sbrs	r18, 1
    51ba:	1b c0       	rjmp	.+54     	; 0x51f2 <puts+0x4c>
    51bc:	8c 01       	movw	r16, r24
    51be:	d0 e0       	ldi	r29, 0x00	; 0
    51c0:	c0 e0       	ldi	r28, 0x00	; 0
    51c2:	f8 01       	movw	r30, r16
    51c4:	81 91       	ld	r24, Z+
    51c6:	8f 01       	movw	r16, r30
    51c8:	60 91 4a 0a 	lds	r22, 0x0A4A	; 0x800a4a <__iob+0x2>
    51cc:	70 91 4b 0a 	lds	r23, 0x0A4B	; 0x800a4b <__iob+0x3>
    51d0:	db 01       	movw	r26, r22
    51d2:	18 96       	adiw	r26, 0x08	; 8
    51d4:	ed 91       	ld	r30, X+
    51d6:	fc 91       	ld	r31, X
    51d8:	19 97       	sbiw	r26, 0x09	; 9
    51da:	88 23       	and	r24, r24
    51dc:	31 f0       	breq	.+12     	; 0x51ea <puts+0x44>
    51de:	19 95       	eicall
    51e0:	89 2b       	or	r24, r25
    51e2:	79 f3       	breq	.-34     	; 0x51c2 <puts+0x1c>
    51e4:	df ef       	ldi	r29, 0xFF	; 255
    51e6:	cf ef       	ldi	r28, 0xFF	; 255
    51e8:	ec cf       	rjmp	.-40     	; 0x51c2 <puts+0x1c>
    51ea:	8a e0       	ldi	r24, 0x0A	; 10
    51ec:	19 95       	eicall
    51ee:	89 2b       	or	r24, r25
    51f0:	19 f0       	breq	.+6      	; 0x51f8 <puts+0x52>
    51f2:	8f ef       	ldi	r24, 0xFF	; 255
    51f4:	9f ef       	ldi	r25, 0xFF	; 255
    51f6:	02 c0       	rjmp	.+4      	; 0x51fc <puts+0x56>
    51f8:	8d 2f       	mov	r24, r29
    51fa:	9c 2f       	mov	r25, r28
    51fc:	df 91       	pop	r29
    51fe:	cf 91       	pop	r28
    5200:	1f 91       	pop	r17
    5202:	0f 91       	pop	r16
    5204:	08 95       	ret

00005206 <sprintf>:
    5206:	0f 93       	push	r16
    5208:	1f 93       	push	r17
    520a:	cf 93       	push	r28
    520c:	df 93       	push	r29
    520e:	cd b7       	in	r28, 0x3d	; 61
    5210:	de b7       	in	r29, 0x3e	; 62
    5212:	2e 97       	sbiw	r28, 0x0e	; 14
    5214:	0f b6       	in	r0, 0x3f	; 63
    5216:	f8 94       	cli
    5218:	de bf       	out	0x3e, r29	; 62
    521a:	0f be       	out	0x3f, r0	; 63
    521c:	cd bf       	out	0x3d, r28	; 61
    521e:	0e 89       	ldd	r16, Y+22	; 0x16
    5220:	1f 89       	ldd	r17, Y+23	; 0x17
    5222:	86 e0       	ldi	r24, 0x06	; 6
    5224:	8c 83       	std	Y+4, r24	; 0x04
    5226:	1a 83       	std	Y+2, r17	; 0x02
    5228:	09 83       	std	Y+1, r16	; 0x01
    522a:	8f ef       	ldi	r24, 0xFF	; 255
    522c:	9f e7       	ldi	r25, 0x7F	; 127
    522e:	9e 83       	std	Y+6, r25	; 0x06
    5230:	8d 83       	std	Y+5, r24	; 0x05
    5232:	ae 01       	movw	r20, r28
    5234:	46 5e       	subi	r20, 0xE6	; 230
    5236:	5f 4f       	sbci	r21, 0xFF	; 255
    5238:	68 8d       	ldd	r22, Y+24	; 0x18
    523a:	79 8d       	ldd	r23, Y+25	; 0x19
    523c:	ce 01       	movw	r24, r28
    523e:	01 96       	adiw	r24, 0x01	; 1
    5240:	10 d0       	rcall	.+32     	; 0x5262 <vfprintf>
    5242:	ef 81       	ldd	r30, Y+7	; 0x07
    5244:	f8 85       	ldd	r31, Y+8	; 0x08
    5246:	e0 0f       	add	r30, r16
    5248:	f1 1f       	adc	r31, r17
    524a:	10 82       	st	Z, r1
    524c:	2e 96       	adiw	r28, 0x0e	; 14
    524e:	0f b6       	in	r0, 0x3f	; 63
    5250:	f8 94       	cli
    5252:	de bf       	out	0x3e, r29	; 62
    5254:	0f be       	out	0x3f, r0	; 63
    5256:	cd bf       	out	0x3d, r28	; 61
    5258:	df 91       	pop	r29
    525a:	cf 91       	pop	r28
    525c:	1f 91       	pop	r17
    525e:	0f 91       	pop	r16
    5260:	08 95       	ret

00005262 <vfprintf>:
    5262:	2f 92       	push	r2
    5264:	3f 92       	push	r3
    5266:	4f 92       	push	r4
    5268:	5f 92       	push	r5
    526a:	6f 92       	push	r6
    526c:	7f 92       	push	r7
    526e:	8f 92       	push	r8
    5270:	9f 92       	push	r9
    5272:	af 92       	push	r10
    5274:	bf 92       	push	r11
    5276:	cf 92       	push	r12
    5278:	df 92       	push	r13
    527a:	ef 92       	push	r14
    527c:	ff 92       	push	r15
    527e:	0f 93       	push	r16
    5280:	1f 93       	push	r17
    5282:	cf 93       	push	r28
    5284:	df 93       	push	r29
    5286:	cd b7       	in	r28, 0x3d	; 61
    5288:	de b7       	in	r29, 0x3e	; 62
    528a:	2b 97       	sbiw	r28, 0x0b	; 11
    528c:	0f b6       	in	r0, 0x3f	; 63
    528e:	f8 94       	cli
    5290:	de bf       	out	0x3e, r29	; 62
    5292:	0f be       	out	0x3f, r0	; 63
    5294:	cd bf       	out	0x3d, r28	; 61
    5296:	6c 01       	movw	r12, r24
    5298:	7b 01       	movw	r14, r22
    529a:	8a 01       	movw	r16, r20
    529c:	fc 01       	movw	r30, r24
    529e:	17 82       	std	Z+7, r1	; 0x07
    52a0:	16 82       	std	Z+6, r1	; 0x06
    52a2:	83 81       	ldd	r24, Z+3	; 0x03
    52a4:	81 ff       	sbrs	r24, 1
    52a6:	bf c1       	rjmp	.+894    	; 0x5626 <vfprintf+0x3c4>
    52a8:	ce 01       	movw	r24, r28
    52aa:	01 96       	adiw	r24, 0x01	; 1
    52ac:	3c 01       	movw	r6, r24
    52ae:	f6 01       	movw	r30, r12
    52b0:	93 81       	ldd	r25, Z+3	; 0x03
    52b2:	f7 01       	movw	r30, r14
    52b4:	93 fd       	sbrc	r25, 3
    52b6:	85 91       	lpm	r24, Z+
    52b8:	93 ff       	sbrs	r25, 3
    52ba:	81 91       	ld	r24, Z+
    52bc:	7f 01       	movw	r14, r30
    52be:	88 23       	and	r24, r24
    52c0:	09 f4       	brne	.+2      	; 0x52c4 <vfprintf+0x62>
    52c2:	ad c1       	rjmp	.+858    	; 0x561e <vfprintf+0x3bc>
    52c4:	85 32       	cpi	r24, 0x25	; 37
    52c6:	39 f4       	brne	.+14     	; 0x52d6 <vfprintf+0x74>
    52c8:	93 fd       	sbrc	r25, 3
    52ca:	85 91       	lpm	r24, Z+
    52cc:	93 ff       	sbrs	r25, 3
    52ce:	81 91       	ld	r24, Z+
    52d0:	7f 01       	movw	r14, r30
    52d2:	85 32       	cpi	r24, 0x25	; 37
    52d4:	21 f4       	brne	.+8      	; 0x52de <vfprintf+0x7c>
    52d6:	b6 01       	movw	r22, r12
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	d6 d1       	rcall	.+940    	; 0x5688 <fputc>
    52dc:	e8 cf       	rjmp	.-48     	; 0x52ae <vfprintf+0x4c>
    52de:	91 2c       	mov	r9, r1
    52e0:	21 2c       	mov	r2, r1
    52e2:	31 2c       	mov	r3, r1
    52e4:	ff e1       	ldi	r31, 0x1F	; 31
    52e6:	f3 15       	cp	r31, r3
    52e8:	d8 f0       	brcs	.+54     	; 0x5320 <vfprintf+0xbe>
    52ea:	8b 32       	cpi	r24, 0x2B	; 43
    52ec:	79 f0       	breq	.+30     	; 0x530c <vfprintf+0xaa>
    52ee:	38 f4       	brcc	.+14     	; 0x52fe <vfprintf+0x9c>
    52f0:	80 32       	cpi	r24, 0x20	; 32
    52f2:	79 f0       	breq	.+30     	; 0x5312 <vfprintf+0xb0>
    52f4:	83 32       	cpi	r24, 0x23	; 35
    52f6:	a1 f4       	brne	.+40     	; 0x5320 <vfprintf+0xbe>
    52f8:	23 2d       	mov	r18, r3
    52fa:	20 61       	ori	r18, 0x10	; 16
    52fc:	1d c0       	rjmp	.+58     	; 0x5338 <vfprintf+0xd6>
    52fe:	8d 32       	cpi	r24, 0x2D	; 45
    5300:	61 f0       	breq	.+24     	; 0x531a <vfprintf+0xb8>
    5302:	80 33       	cpi	r24, 0x30	; 48
    5304:	69 f4       	brne	.+26     	; 0x5320 <vfprintf+0xbe>
    5306:	23 2d       	mov	r18, r3
    5308:	21 60       	ori	r18, 0x01	; 1
    530a:	16 c0       	rjmp	.+44     	; 0x5338 <vfprintf+0xd6>
    530c:	83 2d       	mov	r24, r3
    530e:	82 60       	ori	r24, 0x02	; 2
    5310:	38 2e       	mov	r3, r24
    5312:	e3 2d       	mov	r30, r3
    5314:	e4 60       	ori	r30, 0x04	; 4
    5316:	3e 2e       	mov	r3, r30
    5318:	2a c0       	rjmp	.+84     	; 0x536e <vfprintf+0x10c>
    531a:	f3 2d       	mov	r31, r3
    531c:	f8 60       	ori	r31, 0x08	; 8
    531e:	1d c0       	rjmp	.+58     	; 0x535a <vfprintf+0xf8>
    5320:	37 fc       	sbrc	r3, 7
    5322:	2d c0       	rjmp	.+90     	; 0x537e <vfprintf+0x11c>
    5324:	20 ed       	ldi	r18, 0xD0	; 208
    5326:	28 0f       	add	r18, r24
    5328:	2a 30       	cpi	r18, 0x0A	; 10
    532a:	40 f0       	brcs	.+16     	; 0x533c <vfprintf+0xda>
    532c:	8e 32       	cpi	r24, 0x2E	; 46
    532e:	b9 f4       	brne	.+46     	; 0x535e <vfprintf+0xfc>
    5330:	36 fc       	sbrc	r3, 6
    5332:	75 c1       	rjmp	.+746    	; 0x561e <vfprintf+0x3bc>
    5334:	23 2d       	mov	r18, r3
    5336:	20 64       	ori	r18, 0x40	; 64
    5338:	32 2e       	mov	r3, r18
    533a:	19 c0       	rjmp	.+50     	; 0x536e <vfprintf+0x10c>
    533c:	36 fe       	sbrs	r3, 6
    533e:	06 c0       	rjmp	.+12     	; 0x534c <vfprintf+0xea>
    5340:	8a e0       	ldi	r24, 0x0A	; 10
    5342:	98 9e       	mul	r9, r24
    5344:	20 0d       	add	r18, r0
    5346:	11 24       	eor	r1, r1
    5348:	92 2e       	mov	r9, r18
    534a:	11 c0       	rjmp	.+34     	; 0x536e <vfprintf+0x10c>
    534c:	ea e0       	ldi	r30, 0x0A	; 10
    534e:	2e 9e       	mul	r2, r30
    5350:	20 0d       	add	r18, r0
    5352:	11 24       	eor	r1, r1
    5354:	22 2e       	mov	r2, r18
    5356:	f3 2d       	mov	r31, r3
    5358:	f0 62       	ori	r31, 0x20	; 32
    535a:	3f 2e       	mov	r3, r31
    535c:	08 c0       	rjmp	.+16     	; 0x536e <vfprintf+0x10c>
    535e:	8c 36       	cpi	r24, 0x6C	; 108
    5360:	21 f4       	brne	.+8      	; 0x536a <vfprintf+0x108>
    5362:	83 2d       	mov	r24, r3
    5364:	80 68       	ori	r24, 0x80	; 128
    5366:	38 2e       	mov	r3, r24
    5368:	02 c0       	rjmp	.+4      	; 0x536e <vfprintf+0x10c>
    536a:	88 36       	cpi	r24, 0x68	; 104
    536c:	41 f4       	brne	.+16     	; 0x537e <vfprintf+0x11c>
    536e:	f7 01       	movw	r30, r14
    5370:	93 fd       	sbrc	r25, 3
    5372:	85 91       	lpm	r24, Z+
    5374:	93 ff       	sbrs	r25, 3
    5376:	81 91       	ld	r24, Z+
    5378:	7f 01       	movw	r14, r30
    537a:	81 11       	cpse	r24, r1
    537c:	b3 cf       	rjmp	.-154    	; 0x52e4 <vfprintf+0x82>
    537e:	98 2f       	mov	r25, r24
    5380:	9f 7d       	andi	r25, 0xDF	; 223
    5382:	95 54       	subi	r25, 0x45	; 69
    5384:	93 30       	cpi	r25, 0x03	; 3
    5386:	28 f4       	brcc	.+10     	; 0x5392 <vfprintf+0x130>
    5388:	0c 5f       	subi	r16, 0xFC	; 252
    538a:	1f 4f       	sbci	r17, 0xFF	; 255
    538c:	9f e3       	ldi	r25, 0x3F	; 63
    538e:	99 83       	std	Y+1, r25	; 0x01
    5390:	0d c0       	rjmp	.+26     	; 0x53ac <vfprintf+0x14a>
    5392:	83 36       	cpi	r24, 0x63	; 99
    5394:	31 f0       	breq	.+12     	; 0x53a2 <vfprintf+0x140>
    5396:	83 37       	cpi	r24, 0x73	; 115
    5398:	71 f0       	breq	.+28     	; 0x53b6 <vfprintf+0x154>
    539a:	83 35       	cpi	r24, 0x53	; 83
    539c:	09 f0       	breq	.+2      	; 0x53a0 <vfprintf+0x13e>
    539e:	55 c0       	rjmp	.+170    	; 0x544a <vfprintf+0x1e8>
    53a0:	20 c0       	rjmp	.+64     	; 0x53e2 <vfprintf+0x180>
    53a2:	f8 01       	movw	r30, r16
    53a4:	80 81       	ld	r24, Z
    53a6:	89 83       	std	Y+1, r24	; 0x01
    53a8:	0e 5f       	subi	r16, 0xFE	; 254
    53aa:	1f 4f       	sbci	r17, 0xFF	; 255
    53ac:	88 24       	eor	r8, r8
    53ae:	83 94       	inc	r8
    53b0:	91 2c       	mov	r9, r1
    53b2:	53 01       	movw	r10, r6
    53b4:	12 c0       	rjmp	.+36     	; 0x53da <vfprintf+0x178>
    53b6:	28 01       	movw	r4, r16
    53b8:	f2 e0       	ldi	r31, 0x02	; 2
    53ba:	4f 0e       	add	r4, r31
    53bc:	51 1c       	adc	r5, r1
    53be:	f8 01       	movw	r30, r16
    53c0:	a0 80       	ld	r10, Z
    53c2:	b1 80       	ldd	r11, Z+1	; 0x01
    53c4:	36 fe       	sbrs	r3, 6
    53c6:	03 c0       	rjmp	.+6      	; 0x53ce <vfprintf+0x16c>
    53c8:	69 2d       	mov	r22, r9
    53ca:	70 e0       	ldi	r23, 0x00	; 0
    53cc:	02 c0       	rjmp	.+4      	; 0x53d2 <vfprintf+0x170>
    53ce:	6f ef       	ldi	r22, 0xFF	; 255
    53d0:	7f ef       	ldi	r23, 0xFF	; 255
    53d2:	c5 01       	movw	r24, r10
    53d4:	4e d1       	rcall	.+668    	; 0x5672 <strnlen>
    53d6:	4c 01       	movw	r8, r24
    53d8:	82 01       	movw	r16, r4
    53da:	f3 2d       	mov	r31, r3
    53dc:	ff 77       	andi	r31, 0x7F	; 127
    53de:	3f 2e       	mov	r3, r31
    53e0:	15 c0       	rjmp	.+42     	; 0x540c <vfprintf+0x1aa>
    53e2:	28 01       	movw	r4, r16
    53e4:	22 e0       	ldi	r18, 0x02	; 2
    53e6:	42 0e       	add	r4, r18
    53e8:	51 1c       	adc	r5, r1
    53ea:	f8 01       	movw	r30, r16
    53ec:	a0 80       	ld	r10, Z
    53ee:	b1 80       	ldd	r11, Z+1	; 0x01
    53f0:	36 fe       	sbrs	r3, 6
    53f2:	03 c0       	rjmp	.+6      	; 0x53fa <vfprintf+0x198>
    53f4:	69 2d       	mov	r22, r9
    53f6:	70 e0       	ldi	r23, 0x00	; 0
    53f8:	02 c0       	rjmp	.+4      	; 0x53fe <vfprintf+0x19c>
    53fa:	6f ef       	ldi	r22, 0xFF	; 255
    53fc:	7f ef       	ldi	r23, 0xFF	; 255
    53fe:	c5 01       	movw	r24, r10
    5400:	2d d1       	rcall	.+602    	; 0x565c <strnlen_P>
    5402:	4c 01       	movw	r8, r24
    5404:	f3 2d       	mov	r31, r3
    5406:	f0 68       	ori	r31, 0x80	; 128
    5408:	3f 2e       	mov	r3, r31
    540a:	82 01       	movw	r16, r4
    540c:	33 fc       	sbrc	r3, 3
    540e:	19 c0       	rjmp	.+50     	; 0x5442 <vfprintf+0x1e0>
    5410:	82 2d       	mov	r24, r2
    5412:	90 e0       	ldi	r25, 0x00	; 0
    5414:	88 16       	cp	r8, r24
    5416:	99 06       	cpc	r9, r25
    5418:	a0 f4       	brcc	.+40     	; 0x5442 <vfprintf+0x1e0>
    541a:	b6 01       	movw	r22, r12
    541c:	80 e2       	ldi	r24, 0x20	; 32
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	33 d1       	rcall	.+614    	; 0x5688 <fputc>
    5422:	2a 94       	dec	r2
    5424:	f5 cf       	rjmp	.-22     	; 0x5410 <vfprintf+0x1ae>
    5426:	f5 01       	movw	r30, r10
    5428:	37 fc       	sbrc	r3, 7
    542a:	85 91       	lpm	r24, Z+
    542c:	37 fe       	sbrs	r3, 7
    542e:	81 91       	ld	r24, Z+
    5430:	5f 01       	movw	r10, r30
    5432:	b6 01       	movw	r22, r12
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	28 d1       	rcall	.+592    	; 0x5688 <fputc>
    5438:	21 10       	cpse	r2, r1
    543a:	2a 94       	dec	r2
    543c:	21 e0       	ldi	r18, 0x01	; 1
    543e:	82 1a       	sub	r8, r18
    5440:	91 08       	sbc	r9, r1
    5442:	81 14       	cp	r8, r1
    5444:	91 04       	cpc	r9, r1
    5446:	79 f7       	brne	.-34     	; 0x5426 <vfprintf+0x1c4>
    5448:	e1 c0       	rjmp	.+450    	; 0x560c <vfprintf+0x3aa>
    544a:	84 36       	cpi	r24, 0x64	; 100
    544c:	11 f0       	breq	.+4      	; 0x5452 <vfprintf+0x1f0>
    544e:	89 36       	cpi	r24, 0x69	; 105
    5450:	39 f5       	brne	.+78     	; 0x54a0 <vfprintf+0x23e>
    5452:	f8 01       	movw	r30, r16
    5454:	37 fe       	sbrs	r3, 7
    5456:	07 c0       	rjmp	.+14     	; 0x5466 <vfprintf+0x204>
    5458:	60 81       	ld	r22, Z
    545a:	71 81       	ldd	r23, Z+1	; 0x01
    545c:	82 81       	ldd	r24, Z+2	; 0x02
    545e:	93 81       	ldd	r25, Z+3	; 0x03
    5460:	0c 5f       	subi	r16, 0xFC	; 252
    5462:	1f 4f       	sbci	r17, 0xFF	; 255
    5464:	08 c0       	rjmp	.+16     	; 0x5476 <vfprintf+0x214>
    5466:	60 81       	ld	r22, Z
    5468:	71 81       	ldd	r23, Z+1	; 0x01
    546a:	07 2e       	mov	r0, r23
    546c:	00 0c       	add	r0, r0
    546e:	88 0b       	sbc	r24, r24
    5470:	99 0b       	sbc	r25, r25
    5472:	0e 5f       	subi	r16, 0xFE	; 254
    5474:	1f 4f       	sbci	r17, 0xFF	; 255
    5476:	f3 2d       	mov	r31, r3
    5478:	ff 76       	andi	r31, 0x6F	; 111
    547a:	3f 2e       	mov	r3, r31
    547c:	97 ff       	sbrs	r25, 7
    547e:	09 c0       	rjmp	.+18     	; 0x5492 <vfprintf+0x230>
    5480:	90 95       	com	r25
    5482:	80 95       	com	r24
    5484:	70 95       	com	r23
    5486:	61 95       	neg	r22
    5488:	7f 4f       	sbci	r23, 0xFF	; 255
    548a:	8f 4f       	sbci	r24, 0xFF	; 255
    548c:	9f 4f       	sbci	r25, 0xFF	; 255
    548e:	f0 68       	ori	r31, 0x80	; 128
    5490:	3f 2e       	mov	r3, r31
    5492:	2a e0       	ldi	r18, 0x0A	; 10
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	a3 01       	movw	r20, r6
    5498:	33 d1       	rcall	.+614    	; 0x5700 <__ultoa_invert>
    549a:	88 2e       	mov	r8, r24
    549c:	86 18       	sub	r8, r6
    549e:	44 c0       	rjmp	.+136    	; 0x5528 <vfprintf+0x2c6>
    54a0:	85 37       	cpi	r24, 0x75	; 117
    54a2:	31 f4       	brne	.+12     	; 0x54b0 <vfprintf+0x24e>
    54a4:	23 2d       	mov	r18, r3
    54a6:	2f 7e       	andi	r18, 0xEF	; 239
    54a8:	b2 2e       	mov	r11, r18
    54aa:	2a e0       	ldi	r18, 0x0A	; 10
    54ac:	30 e0       	ldi	r19, 0x00	; 0
    54ae:	25 c0       	rjmp	.+74     	; 0x54fa <vfprintf+0x298>
    54b0:	93 2d       	mov	r25, r3
    54b2:	99 7f       	andi	r25, 0xF9	; 249
    54b4:	b9 2e       	mov	r11, r25
    54b6:	8f 36       	cpi	r24, 0x6F	; 111
    54b8:	c1 f0       	breq	.+48     	; 0x54ea <vfprintf+0x288>
    54ba:	18 f4       	brcc	.+6      	; 0x54c2 <vfprintf+0x260>
    54bc:	88 35       	cpi	r24, 0x58	; 88
    54be:	79 f0       	breq	.+30     	; 0x54de <vfprintf+0x27c>
    54c0:	ae c0       	rjmp	.+348    	; 0x561e <vfprintf+0x3bc>
    54c2:	80 37       	cpi	r24, 0x70	; 112
    54c4:	19 f0       	breq	.+6      	; 0x54cc <vfprintf+0x26a>
    54c6:	88 37       	cpi	r24, 0x78	; 120
    54c8:	21 f0       	breq	.+8      	; 0x54d2 <vfprintf+0x270>
    54ca:	a9 c0       	rjmp	.+338    	; 0x561e <vfprintf+0x3bc>
    54cc:	e9 2f       	mov	r30, r25
    54ce:	e0 61       	ori	r30, 0x10	; 16
    54d0:	be 2e       	mov	r11, r30
    54d2:	b4 fe       	sbrs	r11, 4
    54d4:	0d c0       	rjmp	.+26     	; 0x54f0 <vfprintf+0x28e>
    54d6:	fb 2d       	mov	r31, r11
    54d8:	f4 60       	ori	r31, 0x04	; 4
    54da:	bf 2e       	mov	r11, r31
    54dc:	09 c0       	rjmp	.+18     	; 0x54f0 <vfprintf+0x28e>
    54de:	34 fe       	sbrs	r3, 4
    54e0:	0a c0       	rjmp	.+20     	; 0x54f6 <vfprintf+0x294>
    54e2:	29 2f       	mov	r18, r25
    54e4:	26 60       	ori	r18, 0x06	; 6
    54e6:	b2 2e       	mov	r11, r18
    54e8:	06 c0       	rjmp	.+12     	; 0x54f6 <vfprintf+0x294>
    54ea:	28 e0       	ldi	r18, 0x08	; 8
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	05 c0       	rjmp	.+10     	; 0x54fa <vfprintf+0x298>
    54f0:	20 e1       	ldi	r18, 0x10	; 16
    54f2:	30 e0       	ldi	r19, 0x00	; 0
    54f4:	02 c0       	rjmp	.+4      	; 0x54fa <vfprintf+0x298>
    54f6:	20 e1       	ldi	r18, 0x10	; 16
    54f8:	32 e0       	ldi	r19, 0x02	; 2
    54fa:	f8 01       	movw	r30, r16
    54fc:	b7 fe       	sbrs	r11, 7
    54fe:	07 c0       	rjmp	.+14     	; 0x550e <vfprintf+0x2ac>
    5500:	60 81       	ld	r22, Z
    5502:	71 81       	ldd	r23, Z+1	; 0x01
    5504:	82 81       	ldd	r24, Z+2	; 0x02
    5506:	93 81       	ldd	r25, Z+3	; 0x03
    5508:	0c 5f       	subi	r16, 0xFC	; 252
    550a:	1f 4f       	sbci	r17, 0xFF	; 255
    550c:	06 c0       	rjmp	.+12     	; 0x551a <vfprintf+0x2b8>
    550e:	60 81       	ld	r22, Z
    5510:	71 81       	ldd	r23, Z+1	; 0x01
    5512:	80 e0       	ldi	r24, 0x00	; 0
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	0e 5f       	subi	r16, 0xFE	; 254
    5518:	1f 4f       	sbci	r17, 0xFF	; 255
    551a:	a3 01       	movw	r20, r6
    551c:	f1 d0       	rcall	.+482    	; 0x5700 <__ultoa_invert>
    551e:	88 2e       	mov	r8, r24
    5520:	86 18       	sub	r8, r6
    5522:	fb 2d       	mov	r31, r11
    5524:	ff 77       	andi	r31, 0x7F	; 127
    5526:	3f 2e       	mov	r3, r31
    5528:	36 fe       	sbrs	r3, 6
    552a:	0d c0       	rjmp	.+26     	; 0x5546 <vfprintf+0x2e4>
    552c:	23 2d       	mov	r18, r3
    552e:	2e 7f       	andi	r18, 0xFE	; 254
    5530:	a2 2e       	mov	r10, r18
    5532:	89 14       	cp	r8, r9
    5534:	58 f4       	brcc	.+22     	; 0x554c <vfprintf+0x2ea>
    5536:	34 fe       	sbrs	r3, 4
    5538:	0b c0       	rjmp	.+22     	; 0x5550 <vfprintf+0x2ee>
    553a:	32 fc       	sbrc	r3, 2
    553c:	09 c0       	rjmp	.+18     	; 0x5550 <vfprintf+0x2ee>
    553e:	83 2d       	mov	r24, r3
    5540:	8e 7e       	andi	r24, 0xEE	; 238
    5542:	a8 2e       	mov	r10, r24
    5544:	05 c0       	rjmp	.+10     	; 0x5550 <vfprintf+0x2ee>
    5546:	b8 2c       	mov	r11, r8
    5548:	a3 2c       	mov	r10, r3
    554a:	03 c0       	rjmp	.+6      	; 0x5552 <vfprintf+0x2f0>
    554c:	b8 2c       	mov	r11, r8
    554e:	01 c0       	rjmp	.+2      	; 0x5552 <vfprintf+0x2f0>
    5550:	b9 2c       	mov	r11, r9
    5552:	a4 fe       	sbrs	r10, 4
    5554:	0f c0       	rjmp	.+30     	; 0x5574 <vfprintf+0x312>
    5556:	fe 01       	movw	r30, r28
    5558:	e8 0d       	add	r30, r8
    555a:	f1 1d       	adc	r31, r1
    555c:	80 81       	ld	r24, Z
    555e:	80 33       	cpi	r24, 0x30	; 48
    5560:	21 f4       	brne	.+8      	; 0x556a <vfprintf+0x308>
    5562:	9a 2d       	mov	r25, r10
    5564:	99 7e       	andi	r25, 0xE9	; 233
    5566:	a9 2e       	mov	r10, r25
    5568:	09 c0       	rjmp	.+18     	; 0x557c <vfprintf+0x31a>
    556a:	a2 fe       	sbrs	r10, 2
    556c:	06 c0       	rjmp	.+12     	; 0x557a <vfprintf+0x318>
    556e:	b3 94       	inc	r11
    5570:	b3 94       	inc	r11
    5572:	04 c0       	rjmp	.+8      	; 0x557c <vfprintf+0x31a>
    5574:	8a 2d       	mov	r24, r10
    5576:	86 78       	andi	r24, 0x86	; 134
    5578:	09 f0       	breq	.+2      	; 0x557c <vfprintf+0x31a>
    557a:	b3 94       	inc	r11
    557c:	a3 fc       	sbrc	r10, 3
    557e:	10 c0       	rjmp	.+32     	; 0x55a0 <vfprintf+0x33e>
    5580:	a0 fe       	sbrs	r10, 0
    5582:	06 c0       	rjmp	.+12     	; 0x5590 <vfprintf+0x32e>
    5584:	b2 14       	cp	r11, r2
    5586:	80 f4       	brcc	.+32     	; 0x55a8 <vfprintf+0x346>
    5588:	28 0c       	add	r2, r8
    558a:	92 2c       	mov	r9, r2
    558c:	9b 18       	sub	r9, r11
    558e:	0d c0       	rjmp	.+26     	; 0x55aa <vfprintf+0x348>
    5590:	b2 14       	cp	r11, r2
    5592:	58 f4       	brcc	.+22     	; 0x55aa <vfprintf+0x348>
    5594:	b6 01       	movw	r22, r12
    5596:	80 e2       	ldi	r24, 0x20	; 32
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	76 d0       	rcall	.+236    	; 0x5688 <fputc>
    559c:	b3 94       	inc	r11
    559e:	f8 cf       	rjmp	.-16     	; 0x5590 <vfprintf+0x32e>
    55a0:	b2 14       	cp	r11, r2
    55a2:	18 f4       	brcc	.+6      	; 0x55aa <vfprintf+0x348>
    55a4:	2b 18       	sub	r2, r11
    55a6:	02 c0       	rjmp	.+4      	; 0x55ac <vfprintf+0x34a>
    55a8:	98 2c       	mov	r9, r8
    55aa:	21 2c       	mov	r2, r1
    55ac:	a4 fe       	sbrs	r10, 4
    55ae:	0f c0       	rjmp	.+30     	; 0x55ce <vfprintf+0x36c>
    55b0:	b6 01       	movw	r22, r12
    55b2:	80 e3       	ldi	r24, 0x30	; 48
    55b4:	90 e0       	ldi	r25, 0x00	; 0
    55b6:	68 d0       	rcall	.+208    	; 0x5688 <fputc>
    55b8:	a2 fe       	sbrs	r10, 2
    55ba:	16 c0       	rjmp	.+44     	; 0x55e8 <vfprintf+0x386>
    55bc:	a1 fc       	sbrc	r10, 1
    55be:	03 c0       	rjmp	.+6      	; 0x55c6 <vfprintf+0x364>
    55c0:	88 e7       	ldi	r24, 0x78	; 120
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	02 c0       	rjmp	.+4      	; 0x55ca <vfprintf+0x368>
    55c6:	88 e5       	ldi	r24, 0x58	; 88
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	b6 01       	movw	r22, r12
    55cc:	0c c0       	rjmp	.+24     	; 0x55e6 <vfprintf+0x384>
    55ce:	8a 2d       	mov	r24, r10
    55d0:	86 78       	andi	r24, 0x86	; 134
    55d2:	51 f0       	breq	.+20     	; 0x55e8 <vfprintf+0x386>
    55d4:	a1 fe       	sbrs	r10, 1
    55d6:	02 c0       	rjmp	.+4      	; 0x55dc <vfprintf+0x37a>
    55d8:	8b e2       	ldi	r24, 0x2B	; 43
    55da:	01 c0       	rjmp	.+2      	; 0x55de <vfprintf+0x37c>
    55dc:	80 e2       	ldi	r24, 0x20	; 32
    55de:	a7 fc       	sbrc	r10, 7
    55e0:	8d e2       	ldi	r24, 0x2D	; 45
    55e2:	b6 01       	movw	r22, r12
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	50 d0       	rcall	.+160    	; 0x5688 <fputc>
    55e8:	89 14       	cp	r8, r9
    55ea:	30 f4       	brcc	.+12     	; 0x55f8 <vfprintf+0x396>
    55ec:	b6 01       	movw	r22, r12
    55ee:	80 e3       	ldi	r24, 0x30	; 48
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	4a d0       	rcall	.+148    	; 0x5688 <fputc>
    55f4:	9a 94       	dec	r9
    55f6:	f8 cf       	rjmp	.-16     	; 0x55e8 <vfprintf+0x386>
    55f8:	8a 94       	dec	r8
    55fa:	f3 01       	movw	r30, r6
    55fc:	e8 0d       	add	r30, r8
    55fe:	f1 1d       	adc	r31, r1
    5600:	80 81       	ld	r24, Z
    5602:	b6 01       	movw	r22, r12
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	40 d0       	rcall	.+128    	; 0x5688 <fputc>
    5608:	81 10       	cpse	r8, r1
    560a:	f6 cf       	rjmp	.-20     	; 0x55f8 <vfprintf+0x396>
    560c:	22 20       	and	r2, r2
    560e:	09 f4       	brne	.+2      	; 0x5612 <vfprintf+0x3b0>
    5610:	4e ce       	rjmp	.-868    	; 0x52ae <vfprintf+0x4c>
    5612:	b6 01       	movw	r22, r12
    5614:	80 e2       	ldi	r24, 0x20	; 32
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	37 d0       	rcall	.+110    	; 0x5688 <fputc>
    561a:	2a 94       	dec	r2
    561c:	f7 cf       	rjmp	.-18     	; 0x560c <vfprintf+0x3aa>
    561e:	f6 01       	movw	r30, r12
    5620:	86 81       	ldd	r24, Z+6	; 0x06
    5622:	97 81       	ldd	r25, Z+7	; 0x07
    5624:	02 c0       	rjmp	.+4      	; 0x562a <vfprintf+0x3c8>
    5626:	8f ef       	ldi	r24, 0xFF	; 255
    5628:	9f ef       	ldi	r25, 0xFF	; 255
    562a:	2b 96       	adiw	r28, 0x0b	; 11
    562c:	0f b6       	in	r0, 0x3f	; 63
    562e:	f8 94       	cli
    5630:	de bf       	out	0x3e, r29	; 62
    5632:	0f be       	out	0x3f, r0	; 63
    5634:	cd bf       	out	0x3d, r28	; 61
    5636:	df 91       	pop	r29
    5638:	cf 91       	pop	r28
    563a:	1f 91       	pop	r17
    563c:	0f 91       	pop	r16
    563e:	ff 90       	pop	r15
    5640:	ef 90       	pop	r14
    5642:	df 90       	pop	r13
    5644:	cf 90       	pop	r12
    5646:	bf 90       	pop	r11
    5648:	af 90       	pop	r10
    564a:	9f 90       	pop	r9
    564c:	8f 90       	pop	r8
    564e:	7f 90       	pop	r7
    5650:	6f 90       	pop	r6
    5652:	5f 90       	pop	r5
    5654:	4f 90       	pop	r4
    5656:	3f 90       	pop	r3
    5658:	2f 90       	pop	r2
    565a:	08 95       	ret

0000565c <strnlen_P>:
    565c:	fc 01       	movw	r30, r24
    565e:	05 90       	lpm	r0, Z+
    5660:	61 50       	subi	r22, 0x01	; 1
    5662:	70 40       	sbci	r23, 0x00	; 0
    5664:	01 10       	cpse	r0, r1
    5666:	d8 f7       	brcc	.-10     	; 0x565e <strnlen_P+0x2>
    5668:	80 95       	com	r24
    566a:	90 95       	com	r25
    566c:	8e 0f       	add	r24, r30
    566e:	9f 1f       	adc	r25, r31
    5670:	08 95       	ret

00005672 <strnlen>:
    5672:	fc 01       	movw	r30, r24
    5674:	61 50       	subi	r22, 0x01	; 1
    5676:	70 40       	sbci	r23, 0x00	; 0
    5678:	01 90       	ld	r0, Z+
    567a:	01 10       	cpse	r0, r1
    567c:	d8 f7       	brcc	.-10     	; 0x5674 <strnlen+0x2>
    567e:	80 95       	com	r24
    5680:	90 95       	com	r25
    5682:	8e 0f       	add	r24, r30
    5684:	9f 1f       	adc	r25, r31
    5686:	08 95       	ret

00005688 <fputc>:
    5688:	0f 93       	push	r16
    568a:	1f 93       	push	r17
    568c:	cf 93       	push	r28
    568e:	df 93       	push	r29
    5690:	fb 01       	movw	r30, r22
    5692:	23 81       	ldd	r18, Z+3	; 0x03
    5694:	21 fd       	sbrc	r18, 1
    5696:	03 c0       	rjmp	.+6      	; 0x569e <fputc+0x16>
    5698:	8f ef       	ldi	r24, 0xFF	; 255
    569a:	9f ef       	ldi	r25, 0xFF	; 255
    569c:	2c c0       	rjmp	.+88     	; 0x56f6 <fputc+0x6e>
    569e:	22 ff       	sbrs	r18, 2
    56a0:	16 c0       	rjmp	.+44     	; 0x56ce <fputc+0x46>
    56a2:	46 81       	ldd	r20, Z+6	; 0x06
    56a4:	57 81       	ldd	r21, Z+7	; 0x07
    56a6:	24 81       	ldd	r18, Z+4	; 0x04
    56a8:	35 81       	ldd	r19, Z+5	; 0x05
    56aa:	42 17       	cp	r20, r18
    56ac:	53 07       	cpc	r21, r19
    56ae:	44 f4       	brge	.+16     	; 0x56c0 <fputc+0x38>
    56b0:	a0 81       	ld	r26, Z
    56b2:	b1 81       	ldd	r27, Z+1	; 0x01
    56b4:	9d 01       	movw	r18, r26
    56b6:	2f 5f       	subi	r18, 0xFF	; 255
    56b8:	3f 4f       	sbci	r19, 0xFF	; 255
    56ba:	31 83       	std	Z+1, r19	; 0x01
    56bc:	20 83       	st	Z, r18
    56be:	8c 93       	st	X, r24
    56c0:	26 81       	ldd	r18, Z+6	; 0x06
    56c2:	37 81       	ldd	r19, Z+7	; 0x07
    56c4:	2f 5f       	subi	r18, 0xFF	; 255
    56c6:	3f 4f       	sbci	r19, 0xFF	; 255
    56c8:	37 83       	std	Z+7, r19	; 0x07
    56ca:	26 83       	std	Z+6, r18	; 0x06
    56cc:	14 c0       	rjmp	.+40     	; 0x56f6 <fputc+0x6e>
    56ce:	8b 01       	movw	r16, r22
    56d0:	ec 01       	movw	r28, r24
    56d2:	fb 01       	movw	r30, r22
    56d4:	00 84       	ldd	r0, Z+8	; 0x08
    56d6:	f1 85       	ldd	r31, Z+9	; 0x09
    56d8:	e0 2d       	mov	r30, r0
    56da:	19 95       	eicall
    56dc:	89 2b       	or	r24, r25
    56de:	e1 f6       	brne	.-72     	; 0x5698 <fputc+0x10>
    56e0:	d8 01       	movw	r26, r16
    56e2:	16 96       	adiw	r26, 0x06	; 6
    56e4:	8d 91       	ld	r24, X+
    56e6:	9c 91       	ld	r25, X
    56e8:	17 97       	sbiw	r26, 0x07	; 7
    56ea:	01 96       	adiw	r24, 0x01	; 1
    56ec:	17 96       	adiw	r26, 0x07	; 7
    56ee:	9c 93       	st	X, r25
    56f0:	8e 93       	st	-X, r24
    56f2:	16 97       	sbiw	r26, 0x06	; 6
    56f4:	ce 01       	movw	r24, r28
    56f6:	df 91       	pop	r29
    56f8:	cf 91       	pop	r28
    56fa:	1f 91       	pop	r17
    56fc:	0f 91       	pop	r16
    56fe:	08 95       	ret

00005700 <__ultoa_invert>:
    5700:	fa 01       	movw	r30, r20
    5702:	aa 27       	eor	r26, r26
    5704:	28 30       	cpi	r18, 0x08	; 8
    5706:	51 f1       	breq	.+84     	; 0x575c <__ultoa_invert+0x5c>
    5708:	20 31       	cpi	r18, 0x10	; 16
    570a:	81 f1       	breq	.+96     	; 0x576c <__ultoa_invert+0x6c>
    570c:	e8 94       	clt
    570e:	6f 93       	push	r22
    5710:	6e 7f       	andi	r22, 0xFE	; 254
    5712:	6e 5f       	subi	r22, 0xFE	; 254
    5714:	7f 4f       	sbci	r23, 0xFF	; 255
    5716:	8f 4f       	sbci	r24, 0xFF	; 255
    5718:	9f 4f       	sbci	r25, 0xFF	; 255
    571a:	af 4f       	sbci	r26, 0xFF	; 255
    571c:	b1 e0       	ldi	r27, 0x01	; 1
    571e:	3e d0       	rcall	.+124    	; 0x579c <__ultoa_invert+0x9c>
    5720:	b4 e0       	ldi	r27, 0x04	; 4
    5722:	3c d0       	rcall	.+120    	; 0x579c <__ultoa_invert+0x9c>
    5724:	67 0f       	add	r22, r23
    5726:	78 1f       	adc	r23, r24
    5728:	89 1f       	adc	r24, r25
    572a:	9a 1f       	adc	r25, r26
    572c:	a1 1d       	adc	r26, r1
    572e:	68 0f       	add	r22, r24
    5730:	79 1f       	adc	r23, r25
    5732:	8a 1f       	adc	r24, r26
    5734:	91 1d       	adc	r25, r1
    5736:	a1 1d       	adc	r26, r1
    5738:	6a 0f       	add	r22, r26
    573a:	71 1d       	adc	r23, r1
    573c:	81 1d       	adc	r24, r1
    573e:	91 1d       	adc	r25, r1
    5740:	a1 1d       	adc	r26, r1
    5742:	20 d0       	rcall	.+64     	; 0x5784 <__ultoa_invert+0x84>
    5744:	09 f4       	brne	.+2      	; 0x5748 <__ultoa_invert+0x48>
    5746:	68 94       	set
    5748:	3f 91       	pop	r19
    574a:	2a e0       	ldi	r18, 0x0A	; 10
    574c:	26 9f       	mul	r18, r22
    574e:	11 24       	eor	r1, r1
    5750:	30 19       	sub	r19, r0
    5752:	30 5d       	subi	r19, 0xD0	; 208
    5754:	31 93       	st	Z+, r19
    5756:	de f6       	brtc	.-74     	; 0x570e <__ultoa_invert+0xe>
    5758:	cf 01       	movw	r24, r30
    575a:	08 95       	ret
    575c:	46 2f       	mov	r20, r22
    575e:	47 70       	andi	r20, 0x07	; 7
    5760:	40 5d       	subi	r20, 0xD0	; 208
    5762:	41 93       	st	Z+, r20
    5764:	b3 e0       	ldi	r27, 0x03	; 3
    5766:	0f d0       	rcall	.+30     	; 0x5786 <__ultoa_invert+0x86>
    5768:	c9 f7       	brne	.-14     	; 0x575c <__ultoa_invert+0x5c>
    576a:	f6 cf       	rjmp	.-20     	; 0x5758 <__ultoa_invert+0x58>
    576c:	46 2f       	mov	r20, r22
    576e:	4f 70       	andi	r20, 0x0F	; 15
    5770:	40 5d       	subi	r20, 0xD0	; 208
    5772:	4a 33       	cpi	r20, 0x3A	; 58
    5774:	18 f0       	brcs	.+6      	; 0x577c <__ultoa_invert+0x7c>
    5776:	49 5d       	subi	r20, 0xD9	; 217
    5778:	31 fd       	sbrc	r19, 1
    577a:	40 52       	subi	r20, 0x20	; 32
    577c:	41 93       	st	Z+, r20
    577e:	02 d0       	rcall	.+4      	; 0x5784 <__ultoa_invert+0x84>
    5780:	a9 f7       	brne	.-22     	; 0x576c <__ultoa_invert+0x6c>
    5782:	ea cf       	rjmp	.-44     	; 0x5758 <__ultoa_invert+0x58>
    5784:	b4 e0       	ldi	r27, 0x04	; 4
    5786:	a6 95       	lsr	r26
    5788:	97 95       	ror	r25
    578a:	87 95       	ror	r24
    578c:	77 95       	ror	r23
    578e:	67 95       	ror	r22
    5790:	ba 95       	dec	r27
    5792:	c9 f7       	brne	.-14     	; 0x5786 <__ultoa_invert+0x86>
    5794:	00 97       	sbiw	r24, 0x00	; 0
    5796:	61 05       	cpc	r22, r1
    5798:	71 05       	cpc	r23, r1
    579a:	08 95       	ret
    579c:	9b 01       	movw	r18, r22
    579e:	ac 01       	movw	r20, r24
    57a0:	0a 2e       	mov	r0, r26
    57a2:	06 94       	lsr	r0
    57a4:	57 95       	ror	r21
    57a6:	47 95       	ror	r20
    57a8:	37 95       	ror	r19
    57aa:	27 95       	ror	r18
    57ac:	ba 95       	dec	r27
    57ae:	c9 f7       	brne	.-14     	; 0x57a2 <__ultoa_invert+0xa2>
    57b0:	62 0f       	add	r22, r18
    57b2:	73 1f       	adc	r23, r19
    57b4:	84 1f       	adc	r24, r20
    57b6:	95 1f       	adc	r25, r21
    57b8:	a0 1d       	adc	r26, r0
    57ba:	08 95       	ret

000057bc <_exit>:
    57bc:	f8 94       	cli

000057be <__stop_program>:
    57be:	ff cf       	rjmp	.-2      	; 0x57be <__stop_program>
