
app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005aa  00800200  0000544e  000054e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000544e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000284  008007aa  008007aa  00005a8c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005a8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b28  00000000  00000000  00005b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e0bd  00000000  00000000  00006650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003af5  00000000  00000000  0001470d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006bd5  00000000  00000000  00018202  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000236c  00000000  00000000  0001edd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004693  00000000  00000000  00021144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bfc0  00000000  00000000  000257d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b00  00000000  00000000  00031797  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ec c6       	rjmp	.+3544   	; 0xe0a <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__vector_25>
      68:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <__vector_36>
      94:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__vector_51>
      d0:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__vector_54>
      dc:	0c 94 17 19 	jmp	0x322e	; 0x322e <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	96 01       	movw	r18, r12
      e6:	96 01       	movw	r18, r12
      e8:	96 01       	movw	r18, r12
      ea:	c5 01       	movw	r24, r10
      ec:	cd 01       	movw	r24, r26
      ee:	dc 01       	movw	r26, r24
      f0:	96 01       	movw	r18, r12
      f2:	96 01       	movw	r18, r12
      f4:	c5 01       	movw	r24, r10
      f6:	cd 01       	movw	r24, r26
      f8:	04 23       	and	r16, r20
      fa:	74 23       	and	r23, r20
      fc:	74 23       	and	r23, r20
      fe:	74 23       	and	r23, r20
     100:	74 23       	and	r23, r20
     102:	74 23       	and	r23, r20
     104:	74 23       	and	r23, r20
     106:	74 23       	and	r23, r20
     108:	04 23       	and	r16, r20
     10a:	74 23       	and	r23, r20
     10c:	74 23       	and	r23, r20
     10e:	74 23       	and	r23, r20
     110:	74 23       	and	r23, r20
     112:	74 23       	and	r23, r20
     114:	74 23       	and	r23, r20
     116:	74 23       	and	r23, r20
     118:	06 23       	and	r16, r22
     11a:	74 23       	and	r23, r20
     11c:	74 23       	and	r23, r20
     11e:	74 23       	and	r23, r20
     120:	74 23       	and	r23, r20
     122:	74 23       	and	r23, r20
     124:	74 23       	and	r23, r20
     126:	74 23       	and	r23, r20
     128:	74 23       	and	r23, r20
     12a:	74 23       	and	r23, r20
     12c:	74 23       	and	r23, r20
     12e:	74 23       	and	r23, r20
     130:	74 23       	and	r23, r20
     132:	74 23       	and	r23, r20
     134:	74 23       	and	r23, r20
     136:	74 23       	and	r23, r20
     138:	06 23       	and	r16, r22
     13a:	74 23       	and	r23, r20
     13c:	74 23       	and	r23, r20
     13e:	74 23       	and	r23, r20
     140:	74 23       	and	r23, r20
     142:	74 23       	and	r23, r20
     144:	74 23       	and	r23, r20
     146:	74 23       	and	r23, r20
     148:	74 23       	and	r23, r20
     14a:	74 23       	and	r23, r20
     14c:	74 23       	and	r23, r20
     14e:	74 23       	and	r23, r20
     150:	74 23       	and	r23, r20
     152:	74 23       	and	r23, r20
     154:	74 23       	and	r23, r20
     156:	74 23       	and	r23, r20
     158:	70 23       	and	r23, r16
     15a:	74 23       	and	r23, r20
     15c:	74 23       	and	r23, r20
     15e:	74 23       	and	r23, r20
     160:	74 23       	and	r23, r20
     162:	74 23       	and	r23, r20
     164:	74 23       	and	r23, r20
     166:	74 23       	and	r23, r20
     168:	3b 23       	and	r19, r27
     16a:	74 23       	and	r23, r20
     16c:	74 23       	and	r23, r20
     16e:	74 23       	and	r23, r20
     170:	74 23       	and	r23, r20
     172:	74 23       	and	r23, r20
     174:	74 23       	and	r23, r20
     176:	74 23       	and	r23, r20
     178:	74 23       	and	r23, r20
     17a:	74 23       	and	r23, r20
     17c:	74 23       	and	r23, r20
     17e:	74 23       	and	r23, r20
     180:	74 23       	and	r23, r20
     182:	74 23       	and	r23, r20
     184:	74 23       	and	r23, r20
     186:	74 23       	and	r23, r20
     188:	2f 23       	and	r18, r31
     18a:	74 23       	and	r23, r20
     18c:	74 23       	and	r23, r20
     18e:	74 23       	and	r23, r20
     190:	74 23       	and	r23, r20
     192:	74 23       	and	r23, r20
     194:	74 23       	and	r23, r20
     196:	74 23       	and	r23, r20
     198:	53 23       	and	r21, r19

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0c ec       	ldi	r16, 0xCC	; 204
     19c:	17 e0       	ldi	r17, 0x07	; 7
     19e:	0f 2e       	mov	r0, r31
     1a0:	f4 ef       	ldi	r31, 0xF4	; 244
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f7 e0       	ldi	r31, 0x07	; 7
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	85 d4       	rcall	.+2314   	; 0xad6 <uxListRemove>
     1cc:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <uxCurrentNumberOfTasks>
     1d6:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	03 d4       	rcall	.+2054   	; 0x9f0 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	01 d4       	rcall	.+2050   	; 0x9f0 <vPortFree>
     1ee:	80 91 cb 07 	lds	r24, 0x07CB	; 0x8007cb <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	40 d5       	rcall	.+2688   	; 0xc80 <vPortYield>
     200:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
     220:	51 2c       	mov	r5, r1
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
     226:	e0 91 22 08 	lds	r30, 0x0822	; 0x800822 <pxCurrentTimerList>
     22a:	f0 91 23 08 	lds	r31, 0x0823	; 0x800823 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d8 c0       	rjmp	.+432    	; 0x3e6 <prvTimerTask+0x1e0>
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
     240:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <vTaskSuspendAll>
     244:	c4 01       	movw	r24, r8
     246:	0e 94 a9 14 	call	0x2952	; 0x2952 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	49 c0       	rjmp	.+146    	; 0x2e4 <prvTimerTask+0xde>
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
     258:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xTaskResumeAll>
     25c:	e0 91 22 08 	lds	r30, 0x0822	; 0x800822 <pxCurrentTimerList>
     260:	f0 91 23 08 	lds	r31, 0x0823	; 0x800823 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	31 d4       	rcall	.+2146   	; 0xad6 <uxListRemove>
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 62 14 	call	0x28c4	; 0x28c4 <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	85 c0       	rjmp	.+266    	; 0x3ce <prvTimerTask+0x1c8>
     2c4:	45 2d       	mov	r20, r5
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xTimerQueue>
     2d0:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xTimerQueue+0x1>
     2d4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vQueueWaitForMessageRestricted>
     2d8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xTaskResumeAll>
     2dc:	81 11       	cpse	r24, r1
     2de:	77 c0       	rjmp	.+238    	; 0x3ce <prvTimerTask+0x1c8>
     2e0:	cf d4       	rcall	.+2462   	; 0xc80 <vPortYield>
     2e2:	75 c0       	rjmp	.+234    	; 0x3ce <prvTimerTask+0x1c8>
     2e4:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xTaskResumeAll>
     2e8:	72 c0       	rjmp	.+228    	; 0x3ce <prvTimerTask+0x1c8>
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 23       	and	r24, r24
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <prvTimerTask+0xec>
     2f0:	6e c0       	rjmp	.+220    	; 0x3ce <prvTimerTask+0x1c8>
     2f2:	ac 80       	ldd	r10, Y+4	; 0x04
     2f4:	bd 80       	ldd	r11, Y+5	; 0x05
     2f6:	f5 01       	movw	r30, r10
     2f8:	82 85       	ldd	r24, Z+10	; 0x0a
     2fa:	93 85       	ldd	r25, Z+11	; 0x0b
     2fc:	89 2b       	or	r24, r25
     2fe:	19 f0       	breq	.+6      	; 0x306 <prvTimerTask+0x100>
     300:	c5 01       	movw	r24, r10
     302:	02 96       	adiw	r24, 0x02	; 2
     304:	e8 d3       	rcall	.+2000   	; 0xad6 <uxListRemove>
     306:	ce 01       	movw	r24, r28
     308:	06 96       	adiw	r24, 0x06	; 6
     30a:	0e 94 a9 14 	call	0x2952	; 0x2952 <prvSampleTimeNow>
     30e:	ac 01       	movw	r20, r24
     310:	e9 81       	ldd	r30, Y+1	; 0x01
     312:	0e 2e       	mov	r0, r30
     314:	00 0c       	add	r0, r0
     316:	ff 0b       	sbc	r31, r31
     318:	ea 30       	cpi	r30, 0x0A	; 10
     31a:	f1 05       	cpc	r31, r1
     31c:	08 f0       	brcs	.+2      	; 0x320 <prvTimerTask+0x11a>
     31e:	57 c0       	rjmp	.+174    	; 0x3ce <prvTimerTask+0x1c8>
     320:	88 27       	eor	r24, r24
     322:	ee 58       	subi	r30, 0x8E	; 142
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	8f 4f       	sbci	r24, 0xFF	; 255
     328:	0c 94 86 25 	jmp	0x4b0c	; 0x4b0c <__tablejump2__>
     32c:	d5 01       	movw	r26, r10
     32e:	53 96       	adiw	r26, 0x13	; 19
     330:	8c 91       	ld	r24, X
     332:	53 97       	sbiw	r26, 0x13	; 19
     334:	81 60       	ori	r24, 0x01	; 1
     336:	53 96       	adiw	r26, 0x13	; 19
     338:	8c 93       	st	X, r24
     33a:	53 97       	sbiw	r26, 0x13	; 19
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	1c 96       	adiw	r26, 0x0c	; 12
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	1d 97       	sbiw	r26, 0x0d	; 13
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	c5 01       	movw	r24, r10
     34e:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <prvInsertTimerInActiveList>
     352:	88 23       	and	r24, r24
     354:	e1 f1       	breq	.+120    	; 0x3ce <prvTimerTask+0x1c8>
     356:	d5 01       	movw	r26, r10
     358:	50 96       	adiw	r26, 0x10	; 16
     35a:	ed 91       	ld	r30, X+
     35c:	fc 91       	ld	r31, X
     35e:	51 97       	sbiw	r26, 0x11	; 17
     360:	c5 01       	movw	r24, r10
     362:	19 95       	eicall
     364:	f5 01       	movw	r30, r10
     366:	83 89       	ldd	r24, Z+19	; 0x13
     368:	82 ff       	sbrs	r24, 2
     36a:	31 c0       	rjmp	.+98     	; 0x3ce <prvTimerTask+0x1c8>
     36c:	4a 81       	ldd	r20, Y+2	; 0x02
     36e:	5b 81       	ldd	r21, Y+3	; 0x03
     370:	84 85       	ldd	r24, Z+12	; 0x0c
     372:	95 85       	ldd	r25, Z+13	; 0x0d
     374:	48 0f       	add	r20, r24
     376:	59 1f       	adc	r21, r25
     378:	0e 2d       	mov	r16, r14
     37a:	1f 2d       	mov	r17, r15
     37c:	2e 2d       	mov	r18, r14
     37e:	3f 2d       	mov	r19, r15
     380:	65 2d       	mov	r22, r5
     382:	c5 01       	movw	r24, r10
     384:	0e 94 62 14 	call	0x28c4	; 0x28c4 <xTimerGenericCommand>
     388:	22 c0       	rjmp	.+68     	; 0x3ce <prvTimerTask+0x1c8>
     38a:	d5 01       	movw	r26, r10
     38c:	53 96       	adiw	r26, 0x13	; 19
     38e:	8c 91       	ld	r24, X
     390:	53 97       	sbiw	r26, 0x13	; 19
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	53 96       	adiw	r26, 0x13	; 19
     396:	8c 93       	st	X, r24
     398:	1a c0       	rjmp	.+52     	; 0x3ce <prvTimerTask+0x1c8>
     39a:	f5 01       	movw	r30, r10
     39c:	83 89       	ldd	r24, Z+19	; 0x13
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	83 8b       	std	Z+19, r24	; 0x13
     3a2:	6a 81       	ldd	r22, Y+2	; 0x02
     3a4:	7b 81       	ldd	r23, Y+3	; 0x03
     3a6:	75 87       	std	Z+13, r23	; 0x0d
     3a8:	64 87       	std	Z+12, r22	; 0x0c
     3aa:	64 0f       	add	r22, r20
     3ac:	75 1f       	adc	r23, r21
     3ae:	9a 01       	movw	r18, r20
     3b0:	c5 01       	movw	r24, r10
     3b2:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <prvInsertTimerInActiveList>
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <prvTimerTask+0x1c8>
     3b8:	d5 01       	movw	r26, r10
     3ba:	53 96       	adiw	r26, 0x13	; 19
     3bc:	8c 91       	ld	r24, X
     3be:	81 fd       	sbrc	r24, 1
     3c0:	03 c0       	rjmp	.+6      	; 0x3c8 <prvTimerTask+0x1c2>
     3c2:	c5 01       	movw	r24, r10
     3c4:	15 d3       	rcall	.+1578   	; 0x9f0 <vPortFree>
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <prvTimerTask+0x1c8>
     3c8:	8e 7f       	andi	r24, 0xFE	; 254
     3ca:	f5 01       	movw	r30, r10
     3cc:	83 8b       	std	Z+19, r24	; 0x13
     3ce:	4e 2d       	mov	r20, r14
     3d0:	5f 2d       	mov	r21, r15
     3d2:	6c 2d       	mov	r22, r12
     3d4:	7d 2d       	mov	r23, r13
     3d6:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xTimerQueue>
     3da:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xTimerQueue+0x1>
     3de:	3e d7       	rcall	.+3708   	; 0x125c <xQueueReceive>
     3e0:	81 11       	cpse	r24, r1
     3e2:	83 cf       	rjmp	.-250    	; 0x2ea <prvTimerTask+0xe4>
     3e4:	20 cf       	rjmp	.-448    	; 0x226 <prvTimerTask+0x20>
     3e6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <vTaskSuspendAll>
     3ea:	c4 01       	movw	r24, r8
     3ec:	0e 94 a9 14 	call	0x2952	; 0x2952 <prvSampleTimeNow>
     3f0:	8c 01       	movw	r16, r24
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
     3f4:	81 11       	cpse	r24, r1
     3f6:	76 cf       	rjmp	.-276    	; 0x2e4 <prvTimerTask+0xde>
     3f8:	e0 91 20 08 	lds	r30, 0x0820	; 0x800820 <pxOverflowTimerList>
     3fc:	f0 91 21 08 	lds	r31, 0x0821	; 0x800821 <pxOverflowTimerList+0x1>
     400:	80 81       	ld	r24, Z
     402:	44 2d       	mov	r20, r4
     404:	81 11       	cpse	r24, r1
     406:	45 2d       	mov	r20, r5
     408:	ae 2c       	mov	r10, r14
     40a:	bf 2c       	mov	r11, r15
     40c:	5c cf       	rjmp	.-328    	; 0x2c6 <prvTimerTask+0xc0>

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d1 e2       	ldi	r29, 0x21	; 33
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	0c bf       	out	0x3c, r16	; 60

0000041e <__do_copy_data>:
     41e:	17 e0       	ldi	r17, 0x07	; 7
     420:	a0 e0       	ldi	r26, 0x00	; 0
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	ee e4       	ldi	r30, 0x4E	; 78
     426:	f4 e5       	ldi	r31, 0x54	; 84
     428:	00 e0       	ldi	r16, 0x00	; 0
     42a:	0b bf       	out	0x3b, r16	; 59
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__do_copy_data+0x14>
     42e:	07 90       	elpm	r0, Z+
     430:	0d 92       	st	X+, r0
     432:	aa 3a       	cpi	r26, 0xAA	; 170
     434:	b1 07       	cpc	r27, r17
     436:	d9 f7       	brne	.-10     	; 0x42e <__do_copy_data+0x10>

00000438 <__do_clear_bss>:
     438:	2a e0       	ldi	r18, 0x0A	; 10
     43a:	aa ea       	ldi	r26, 0xAA	; 170
     43c:	b7 e0       	ldi	r27, 0x07	; 7
     43e:	01 c0       	rjmp	.+2      	; 0x442 <.do_clear_bss_start>

00000440 <.do_clear_bss_loop>:
     440:	1d 92       	st	X+, r1

00000442 <.do_clear_bss_start>:
     442:	ae 32       	cpi	r26, 0x2E	; 46
     444:	b2 07       	cpc	r27, r18
     446:	e1 f7       	brne	.-8      	; 0x440 <.do_clear_bss_loop>
     448:	03 d0       	rcall	.+6      	; 0x450 <main>
     44a:	0c 94 25 2a 	jmp	0x544a	; 0x544a <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <main>:
TaskHandle_t lightSensorHandle = NULL;
TaskHandle_t WaterHandle = NULL;
TaskHandle_t ServoMotorHandle = NULL;
TaskHandle_t loRaWanHandle = NULL;

int main() {
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
	
	plantdata.co2 = 0;
     456:	ee e9       	ldi	r30, 0x9E	; 158
     458:	f9 e0       	ldi	r31, 0x09	; 9
     45a:	15 82       	std	Z+5, r1	; 0x05
     45c:	14 82       	std	Z+4, r1	; 0x04
	plantdata.humidity = 0;
     45e:	13 82       	std	Z+3, r1	; 0x03
     460:	12 82       	std	Z+2, r1	; 0x02
	plantdata.light = 0;
     462:	17 82       	std	Z+7, r1	; 0x07
     464:	16 82       	std	Z+6, r1	; 0x06
	plantdata.temperature = 0;
     466:	11 82       	std	Z+1, r1	; 0x01
     468:	10 82       	st	Z, r1
	plantdata.water = 0;
     46a:	11 86       	std	Z+9, r1	; 0x09
     46c:	10 86       	std	Z+8, r1	; 0x08
	
	stdioCreate(0);
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <stdioCreate>
	
	//setup for loRaWAN
	hal_create(LED_TASK_PRIORITY);
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <hal_create>
	lora_driver_create(ser_USART1);
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0e 94 4f 1c 	call	0x389e	; 0x389e <lora_driver_create>
	
	//creating tasks
	xTaskCreate(tempSensorTask, "Temperature measurement", configMINIMAL_STACK_SIZE, NULL, TEMP_TASK_PRIORITY, &tempSensorHandle);
     480:	0f 2e       	mov	r0, r31
     482:	f2 eb       	ldi	r31, 0xB2	; 178
     484:	ef 2e       	mov	r14, r31
     486:	f7 e0       	ldi	r31, 0x07	; 7
     488:	ff 2e       	mov	r15, r31
     48a:	f0 2d       	mov	r31, r0
     48c:	01 e0       	ldi	r16, 0x01	; 1
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	40 ec       	ldi	r20, 0xC0	; 192
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	6e e6       	ldi	r22, 0x6E	; 110
     498:	72 e0       	ldi	r23, 0x02	; 2
     49a:	89 e7       	ldi	r24, 0x79	; 121
     49c:	94 e0       	ldi	r25, 0x04	; 4
     49e:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <xTaskCreate>
	xTaskCreate(co2SensorTask, "CO2 measurement", configMINIMAL_STACK_SIZE, NULL, CO2_TASK_PRIORITY, &co2SensorHandle);
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f0 eb       	ldi	r31, 0xB0	; 176
     4a6:	ef 2e       	mov	r14, r31
     4a8:	f7 e0       	ldi	r31, 0x07	; 7
     4aa:	ff 2e       	mov	r15, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 ec       	ldi	r20, 0xC0	; 192
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	66 e8       	ldi	r22, 0x86	; 134
     4b8:	72 e0       	ldi	r23, 0x02	; 2
     4ba:	83 ed       	ldi	r24, 0xD3	; 211
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <xTaskCreate>
	xTaskCreate(lightSensorTask, "Light measurement", configMINIMAL_STACK_SIZE, NULL, LIGHT_TASK_PRIORITY, &lightSensorHandle);
     4c2:	0f 2e       	mov	r0, r31
     4c4:	fe ea       	ldi	r31, 0xAE	; 174
     4c6:	ef 2e       	mov	r14, r31
     4c8:	f7 e0       	ldi	r31, 0x07	; 7
     4ca:	ff 2e       	mov	r15, r31
     4cc:	f0 2d       	mov	r31, r0
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 ec       	ldi	r20, 0xC0	; 192
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	66 e9       	ldi	r22, 0x96	; 150
     4d8:	72 e0       	ldi	r23, 0x02	; 2
     4da:	87 e0       	ldi	r24, 0x07	; 7
     4dc:	93 e0       	ldi	r25, 0x03	; 3
     4de:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <xTaskCreate>
	xTaskCreate(loRaWanTask, "Led", configMINIMAL_STACK_SIZE, NULL,LED_TASK_PRIORITY, &loRaWanHandle);
     4e2:	0f 2e       	mov	r0, r31
     4e4:	fa ea       	ldi	r31, 0xAA	; 170
     4e6:	ef 2e       	mov	r14, r31
     4e8:	f7 e0       	ldi	r31, 0x07	; 7
     4ea:	ff 2e       	mov	r15, r31
     4ec:	f0 2d       	mov	r31, r0
     4ee:	03 e0       	ldi	r16, 0x03	; 3
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 ec       	ldi	r20, 0xC0	; 192
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	68 ea       	ldi	r22, 0xA8	; 168
     4fa:	72 e0       	ldi	r23, 0x02	; 2
     4fc:	8e ef       	ldi	r24, 0xFE	; 254
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <xTaskCreate>
	xTaskCreate(servoMotorTask, "Servo Motor", configMINIMAL_STACK_SIZE, NULL, SERVO_TASK_PRIORITY,&ServoMotorHandle);
     504:	0f 2e       	mov	r0, r31
     506:	fc ea       	ldi	r31, 0xAC	; 172
     508:	ef 2e       	mov	r14, r31
     50a:	f7 e0       	ldi	r31, 0x07	; 7
     50c:	ff 2e       	mov	r15, r31
     50e:	f0 2d       	mov	r31, r0
     510:	01 e0       	ldi	r16, 0x01	; 1
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	40 ec       	ldi	r20, 0xC0	; 192
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	6c ea       	ldi	r22, 0xAC	; 172
     51c:	72 e0       	ldi	r23, 0x02	; 2
     51e:	80 e6       	ldi	r24, 0x60	; 96
     520:	94 e0       	ldi	r25, 0x04	; 4
     522:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <xTaskCreate>
	
	semaphore = xSemaphoreCreateMutex();
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	49 d6       	rcall	.+3218   	; 0x11bc <xQueueCreateMutex>
     52a:	90 93 9d 09 	sts	0x099D, r25	; 0x80099d <semaphore+0x1>
     52e:	80 93 9c 09 	sts	0x099C, r24	; 0x80099c <semaphore>
	
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
     532:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <hih8120Create>
     536:	81 11       	cpse	r24, r1
     538:	2c c0       	rjmp	.+88     	; 0x592 <main+0x142>
		printf("Failed to initialize temperature sensor\n");
		return 1;
	}
	//setup servoMotor
	rcServoCreate();
     53a:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <rcServoCreate>

	//setup co2 sensor
	mh_z19_create(ser_USART3, co2Callback);
     53e:	6c ee       	ldi	r22, 0xEC	; 236
     540:	72 e0       	ldi	r23, 0x02	; 2
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <mh_z19_create>

	//setup light sensor
	int r = tsl2591Create(lightCallback);
     548:	80 e2       	ldi	r24, 0x20	; 32
     54a:	93 e0       	ldi	r25, 0x03	; 3
     54c:	0e 94 e6 20 	call	0x41cc	; 0x41cc <tsl2591Create>
	if(r != TSL2591_OK) {
     550:	88 23       	and	r24, r24
     552:	61 f0       	breq	.+24     	; 0x56c <main+0x11c>
		printf("Failed to initialize light sensor: %d\n", r);
     554:	1f 92       	push	r1
     556:	8f 93       	push	r24
     558:	80 ee       	ldi	r24, 0xE0	; 224
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
	}

	r = tsl2591Enable();
     56c:	0e 94 01 21 	call	0x4202	; 0x4202 <tsl2591Enable>
	if(r != TSL2591_OK) {
     570:	88 23       	and	r24, r24
     572:	61 f0       	breq	.+24     	; 0x58c <main+0x13c>
		printf("Failed to enable light sensor %d\n", r);
     574:	1f 92       	push	r1
     576:	8f 93       	push	r24
     578:	87 e0       	ldi	r24, 0x07	; 7
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
	}
	
	vTaskStartScheduler();
     58c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <vTaskStartScheduler>
     590:	ff cf       	rjmp	.-2      	; 0x590 <main+0x140>
	
	semaphore = xSemaphoreCreateMutex();
	
	//setup temperature/humidity sensor
	if(HIH8120_OK != hih8120Create()) {
		printf("Failed to initialize temperature sensor\n");
     592:	88 eb       	ldi	r24, 0xB8	; 184
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <puts>
	vTaskStartScheduler();
	
	while(1) {
		;
	}
}
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0f 91       	pop	r16
     5a0:	ff 90       	pop	r15
     5a2:	ef 90       	pop	r14
     5a4:	08 95       	ret

000005a6 <co2SensorTask>:

	while(1) {
		vTaskDelay(1000);
		int r = mh_z19_take_meassuring();
		if(r != MHZ19_OK) {
			printf("CO2 sensor: %d", r);			
     5a6:	c9 e2       	ldi	r28, 0x29	; 41
     5a8:	d3 e0       	ldi	r29, 0x03	; 3

void co2SensorTask(void *pvParamters) {
	(void)pvParamters;

	while(1) {
		vTaskDelay(1000);
     5aa:	88 ee       	ldi	r24, 0xE8	; 232
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
		int r = mh_z19_take_meassuring();
     5b2:	0e 94 23 20 	call	0x4046	; 0x4046 <mh_z19_take_meassuring>
		if(r != MHZ19_OK) {
     5b6:	88 23       	and	r24, r24
     5b8:	51 f0       	breq	.+20     	; 0x5ce <co2SensorTask+0x28>
			printf("CO2 sensor: %d", r);			
     5ba:	1f 92       	push	r1
     5bc:	8f 93       	push	r24
     5be:	df 93       	push	r29
     5c0:	cf 93       	push	r28
     5c2:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
		}
		vTaskDelay(9000);
     5ce:	88 e2       	ldi	r24, 0x28	; 40
     5d0:	93 e2       	ldi	r25, 0x23	; 35
     5d2:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
	}
     5d6:	e9 cf       	rjmp	.-46     	; 0x5aa <co2SensorTask+0x4>

000005d8 <co2Callback>:

	vTaskDelete(NULL);
}

void co2Callback(uint16_t ppm) {
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	ec 01       	movw	r28, r24
	///////////////////semaphore:
	xSemaphoreTake(semaphore, portMAX_DELAY);
     5de:	6f ef       	ldi	r22, 0xFF	; 255
     5e0:	7f ef       	ldi	r23, 0xFF	; 255
     5e2:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <semaphore>
     5e6:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <semaphore+0x1>
     5ea:	c1 d6       	rcall	.+3458   	; 0x136e <xQueueSemaphoreTake>
	plantdata.co2 = ppm;
     5ec:	d0 93 a3 09 	sts	0x09A3, r29	; 0x8009a3 <plantdata+0x5>
     5f0:	c0 93 a2 09 	sts	0x09A2, r28	; 0x8009a2 <plantdata+0x4>
	//printf("CO2 level: %u\n", ppm);
	
	xSemaphoreGive(semaphore);
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <semaphore>
     602:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <semaphore+0x1>
     606:	45 d5       	rcall	.+2698   	; 0x1092 <xQueueGenericSend>
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <lightSensorTask>:

	while(1) {
		vTaskDelay(1000);	
		int r = tsl2591FetchData();
		if(r != TSL2591_OK) {
			printf("Failed to fetch light data: %d\n", r);	
     60e:	c8 e3       	ldi	r28, 0x38	; 56
     610:	d3 e0       	ldi	r29, 0x03	; 3

void lightSensorTask(void* pvParameters) {
	(void)pvParameters;

	while(1) {
		vTaskDelay(1000);	
     612:	88 ee       	ldi	r24, 0xE8	; 232
     614:	93 e0       	ldi	r25, 0x03	; 3
     616:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
		int r = tsl2591FetchData();
     61a:	0e 94 16 21 	call	0x422c	; 0x422c <tsl2591FetchData>
		if(r != TSL2591_OK) {
     61e:	88 23       	and	r24, r24
     620:	51 f0       	breq	.+20     	; 0x636 <lightSensorTask+0x28>
			printf("Failed to fetch light data: %d\n", r);	
     622:	1f 92       	push	r1
     624:	8f 93       	push	r24
     626:	df 93       	push	r29
     628:	cf 93       	push	r28
     62a:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
		}
		vTaskDelay(9000);
     636:	88 e2       	ldi	r24, 0x28	; 40
     638:	93 e2       	ldi	r25, 0x23	; 35
     63a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
	}
     63e:	e9 cf       	rjmp	.-46     	; 0x612 <lightSensorTask+0x4>

00000640 <lightCallback>:

	vTaskDelete(NULL);
}

void lightCallback(tsl2591ReturnCode_t rc) {
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	00 d0       	rcall	.+0      	; 0x646 <lightCallback+0x6>
     646:	1f 92       	push	r1
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
	float measure;
	if(rc != TSL2591_DATA_READY) {
     64c:	81 30       	cpi	r24, 0x01	; 1
     64e:	29 f0       	breq	.+10     	; 0x65a <lightCallback+0x1a>
		printf("Light sensor not ready\n");
     650:	88 e5       	ldi	r24, 0x58	; 88
     652:	93 e0       	ldi	r25, 0x03	; 3
     654:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <puts>
     658:	26 c0       	rjmp	.+76     	; 0x6a6 <lightCallback+0x66>
		return;
	}
	if(TSL2591_OK == tsl2591GetLux(&measure)) {
     65a:	ce 01       	movw	r24, r28
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	0e 94 28 21 	call	0x4250	; 0x4250 <tsl2591GetLux>
     662:	81 11       	cpse	r24, r1
     664:	1c c0       	rjmp	.+56     	; 0x69e <lightCallback+0x5e>
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     666:	6f ef       	ldi	r22, 0xFF	; 255
     668:	7f ef       	ldi	r23, 0xFF	; 255
     66a:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <semaphore>
     66e:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <semaphore+0x1>
     672:	7d d6       	rcall	.+3322   	; 0x136e <xQueueSemaphoreTake>
		plantdata.light = (uint16_t) measure;
     674:	69 81       	ldd	r22, Y+1	; 0x01
     676:	7a 81       	ldd	r23, Y+2	; 0x02
     678:	8b 81       	ldd	r24, Y+3	; 0x03
     67a:	9c 81       	ldd	r25, Y+4	; 0x04
     67c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <__fixunssfsi>
     680:	70 93 a5 09 	sts	0x09A5, r23	; 0x8009a5 <plantdata+0x7>
     684:	60 93 a4 09 	sts	0x09A4, r22	; 0x8009a4 <plantdata+0x6>
		//printf("Light: %d\n", (uint16_t) measure);
		xSemaphoreGive(semaphore);
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <semaphore>
     696:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <semaphore+0x1>
     69a:	fb d4       	rcall	.+2550   	; 0x1092 <xQueueGenericSend>
     69c:	04 c0       	rjmp	.+8      	; 0x6a6 <lightCallback+0x66>
	}
	else {
		printf("Lux overflow\n");	
     69e:	8f e6       	ldi	r24, 0x6F	; 111
     6a0:	93 e0       	ldi	r25, 0x03	; 3
     6a2:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <puts>
	}
	
}
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <_loRa_setup>:
#define LORA_appEUI "c53e8f9f10801fc4"
#define LORA_appKEY "018cc25f724a8517cbfd763dc1126614"

char _out_buff[100];

void _loRa_setup(void){
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
	
	e_LoRa_return_code_t rc;
	
	//For factory reset.
	printf("FactoryRest >%s<\n",
     6be:	0e 94 9f 1c 	call	0x393e	; 0x393e <lora_driver_rn2483_factory_reset>
     6c2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <lora_driver_map_return_code_to_text>
     6c6:	9f 93       	push	r25
     6c8:	8f 93       	push	r24
     6ca:	8c e7       	ldi	r24, 0x7C	; 124
     6cc:	93 e0       	ldi	r25, 0x03	; 3
     6ce:	9f 93       	push	r25
     6d0:	8f 93       	push	r24
     6d2:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
	lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
	
	//Configure to EU868 LoRaWAN standards.
	printf("Configure to EU868 >%s<\n",
     6d6:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <lora_driver_configure_to_eu868>
     6da:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <lora_driver_map_return_code_to_text>
     6de:	9f 93       	push	r25
     6e0:	8f 93       	push	r24
     6e2:	8e e8       	ldi	r24, 0x8E	; 142
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	9f 93       	push	r25
     6e8:	8f 93       	push	r24
     6ea:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
	lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
	
	//Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buff);
     6ee:	8a ea       	ldi	r24, 0xAA	; 170
     6f0:	99 e0       	ldi	r25, 0x09	; 9
     6f2:	0e 94 b1 1c 	call	0x3962	; 0x3962 <lora_driver_get_rn2483_hweui>
	printf("Get HWEUI: %s >%s< \n", lora_driver_map_return_code_to_text(rc), _out_buff );
     6f6:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <lora_driver_map_return_code_to_text>
     6fa:	ca ea       	ldi	r28, 0xAA	; 170
     6fc:	d9 e0       	ldi	r29, 0x09	; 9
     6fe:	df 93       	push	r29
     700:	cf 93       	push	r28
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	87 ea       	ldi	r24, 0xA7	; 167
     708:	93 e0       	ldi	r25, 0x03	; 3
     70a:	9f 93       	push	r25
     70c:	8f 93       	push	r24
     70e:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
	
	
	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buff)));
     712:	ce 01       	movw	r24, r28
     714:	0e 94 cd 1c 	call	0x399a	; 0x399a <lora_driver_set_device_identifier>
     718:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <lora_driver_map_return_code_to_text>
     71c:	9f 93       	push	r25
     71e:	8f 93       	push	r24
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	8c eb       	ldi	r24, 0xBC	; 188
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buff, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buff)));
     730:	ae 01       	movw	r20, r28
     732:	61 ed       	ldi	r22, 0xD1	; 209
     734:	73 e0       	ldi	r23, 0x03	; 3
     736:	82 ef       	ldi	r24, 0xF2	; 242
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <lora_driver_set_otaa_identity>
     73e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <lora_driver_map_return_code_to_text>
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	df 93       	push	r29
     748:	cf 93       	push	r28
     74a:	81 ed       	ldi	r24, 0xD1	; 209
     74c:	93 e0       	ldi	r25, 0x03	; 3
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	82 ef       	ldi	r24, 0xF2	; 242
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	9f 93       	push	r25
     758:	8f 93       	push	r24
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	94 e0       	ldi	r25, 0x04	; 4
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     766:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <lora_driver_save_mac>
     76a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <lora_driver_map_return_code_to_text>
     76e:	9f 93       	push	r25
     770:	8f 93       	push	r24
     772:	89 e3       	ldi	r24, 0x39	; 57
     774:	94 e0       	ldi	r25, 0x04	; 4
     776:	9f 93       	push	r25
     778:	8f 93       	push	r24
     77a:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     77e:	8d b7       	in	r24, 0x3d	; 61
     780:	9e b7       	in	r25, 0x3e	; 62
     782:	82 96       	adiw	r24, 0x22	; 34
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	9e bf       	out	0x3e, r25	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	8d bf       	out	0x3d, r24	; 61
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <lora_driver_set_adaptive_data_rate>
     794:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <lora_driver_map_return_code_to_text>
     798:	9f 93       	push	r25
     79a:	8f 93       	push	r24
     79c:	88 e4       	ldi	r24, 0x48	; 72
     79e:	94 e0       	ldi	r25, 0x04	; 4
     7a0:	9f 93       	push	r25
     7a2:	8f 93       	push	r24
     7a4:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	0f 90       	pop	r0
     7b0:	c5 e0       	ldi	r28, 0x05	; 5
     7b2:	d0 e0       	ldi	r29, 0x00	; 0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     7b4:	0f 2e       	mov	r0, r31
     7b6:	f9 e6       	ldi	r31, 0x69	; 105
     7b8:	ef 2e       	mov	r14, r31
     7ba:	f4 e0       	ldi	r31, 0x04	; 4
     7bc:	ff 2e       	mov	r15, r31
     7be:	f0 2d       	mov	r31, r0
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <lora_driver_join>
     7c6:	18 2f       	mov	r17, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     7c8:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <lora_driver_map_return_code_to_text>
     7cc:	9f 93       	push	r25
     7ce:	8f 93       	push	r24
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	ff 92       	push	r15
     7d6:	ef 92       	push	r14
     7d8:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
		if ( rc == LoRa_ACCEPTED){
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	18 30       	cpi	r17, 0x08	; 8
     7ea:	11 f0       	breq	.+4      	; 0x7f0 <_loRa_setup+0x13c>
     7ec:	21 97       	sbiw	r28, 0x01	; 1
			break;
		}

	} while (--maxJoinTriesLeft);
     7ee:	41 f7       	brne	.-48     	; 0x7c0 <_loRa_setup+0x10c>

}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	ff 90       	pop	r15
     7f8:	ef 90       	pop	r14
     7fa:	08 95       	ret

000007fc <loRaWanTask>:

void loRaWanTask(void* pvParamters){
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	66 97       	sbiw	r28, 0x16	; 22
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
	(void)pvParamters;

	//for resetting the LoRaWAN hardware.
	lora_driver_reset_rn2483(1);
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	0e 94 8b 1c 	call	0x3916	; 0x3916 <lora_driver_reset_rn2483>
	vTaskDelay(150);
     816:	86 e9       	ldi	r24, 0x96	; 150
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
	lora_driver_reset_rn2483(0);
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	0e 94 8b 1c 	call	0x3916	; 0x3916 <lora_driver_reset_rn2483>
	vTaskDelay(150);
     824:	86 e9       	ldi	r24, 0x96	; 150
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
	lora_driver_flush_buffers();
     82c:	0e 94 48 1c 	call	0x3890	; 0x3890 <lora_driver_flush_buffers>
	
	_loRa_setup();
     830:	41 df       	rcall	.-382    	; 0x6b4 <_loRa_setup>
	vTaskDelay(200);
     832:	88 ec       	ldi	r24, 0xC8	; 200
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
	
	lora_payload_t _uplink_payload;
	
	_uplink_payload.len = 7;
     83a:	87 e0       	ldi	r24, 0x07	; 7
     83c:	8a 83       	std	Y+2, r24	; 0x02
	_uplink_payload.port_no = 2;
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	89 83       	std	Y+1, r24	; 0x01
	
	while(1){
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
		_uplink_payload.bytes[0] = plantdata.humidity;
     842:	0e e9       	ldi	r16, 0x9E	; 158
     844:	19 e0       	ldi	r17, 0x09	; 9
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
		_uplink_payload.bytes[4] = plantdata.light >> 8;
		_uplink_payload.bytes[5] = plantdata.light& 0xFF;
		_uplink_payload.bytes[6] = plantdata.water;
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     846:	0f 2e       	mov	r0, r31
     848:	f9 e8       	ldi	r31, 0x89	; 137
     84a:	ef 2e       	mov	r14, r31
     84c:	f4 e0       	ldi	r31, 0x04	; 4
     84e:	ff 2e       	mov	r15, r31
     850:	f0 2d       	mov	r31, r0
	
	
	while(1){
		
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     852:	6f ef       	ldi	r22, 0xFF	; 255
     854:	7f ef       	ldi	r23, 0xFF	; 255
     856:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <semaphore>
     85a:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <semaphore+0x1>
     85e:	87 d5       	rcall	.+2830   	; 0x136e <xQueueSemaphoreTake>
		_uplink_payload.bytes[0] = plantdata.humidity;
     860:	f8 01       	movw	r30, r16
     862:	82 81       	ldd	r24, Z+2	; 0x02
     864:	8b 83       	std	Y+3, r24	; 0x03
		_uplink_payload.bytes[1] = plantdata.temperature;
     866:	80 81       	ld	r24, Z
     868:	8c 83       	std	Y+4, r24	; 0x04
		_uplink_payload.bytes[2] = plantdata.co2 >> 8;
     86a:	84 81       	ldd	r24, Z+4	; 0x04
     86c:	95 81       	ldd	r25, Z+5	; 0x05
     86e:	9d 83       	std	Y+5, r25	; 0x05
		_uplink_payload.bytes[3] = plantdata.co2 & 0xFF;
     870:	8e 83       	std	Y+6, r24	; 0x06
		_uplink_payload.bytes[4] = plantdata.light >> 8;
     872:	86 81       	ldd	r24, Z+6	; 0x06
     874:	97 81       	ldd	r25, Z+7	; 0x07
     876:	9f 83       	std	Y+7, r25	; 0x07
		_uplink_payload.bytes[5] = plantdata.light& 0xFF;
     878:	88 87       	std	Y+8, r24	; 0x08
		_uplink_payload.bytes[6] = plantdata.water;
     87a:	80 85       	ldd	r24, Z+8	; 0x08
     87c:	89 87       	std	Y+9, r24	; 0x09
		
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &_uplink_payload)));
     87e:	be 01       	movw	r22, r28
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <lora_driver_sent_upload_message>
     88a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <lora_driver_map_return_code_to_text>
     88e:	9f 93       	push	r25
     890:	8f 93       	push	r24
     892:	ff 92       	push	r15
     894:	ef 92       	push	r14
     896:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
		xSemaphoreGive(semaphore);
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <semaphore>
     8a8:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <semaphore+0x1>
     8ac:	f2 d3       	rcall	.+2020   	; 0x1092 <xQueueGenericSend>
		vTaskDelay(10000);
     8ae:	80 e1       	ldi	r24, 0x10	; 16
     8b0:	97 e2       	ldi	r25, 0x27	; 39
     8b2:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	c9 cf       	rjmp	.-110    	; 0x852 <loRaWanTask+0x56>

000008c0 <servoMotorTask>:
	
	while(1){
		vTaskDelay(1100);
			rcServoSet(0,100);
			lastWateringTime = xTaskGetTickCount();
			plantdata.water = xTaskGetTickCount();	
     8c0:	ce e9       	ldi	r28, 0x9E	; 158
     8c2:	d9 e0       	ldi	r29, 0x09	; 9
void servoMotorTask(void* pvParamters){
	(void)pvParamters;
	TickType_t waterInterval = (lastWateringTime + 1000);
	
	while(1){
		vTaskDelay(1100);
     8c4:	8c e4       	ldi	r24, 0x4C	; 76
     8c6:	94 e0       	ldi	r25, 0x04	; 4
     8c8:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
			rcServoSet(0,100);
     8cc:	64 e6       	ldi	r22, 0x64	; 100
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 53 20 	call	0x40a6	; 0x40a6 <rcServoSet>
			lastWateringTime = xTaskGetTickCount();
     8d4:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xTaskGetTickCount>
     8d8:	90 93 a9 09 	sts	0x09A9, r25	; 0x8009a9 <lastWateringTime+0x1>
     8dc:	80 93 a8 09 	sts	0x09A8, r24	; 0x8009a8 <lastWateringTime>
			plantdata.water = xTaskGetTickCount();	
     8e0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <xTaskGetTickCount>
     8e4:	99 87       	std	Y+9, r25	; 0x09
     8e6:	88 87       	std	Y+8, r24	; 0x08
			//printf("Plant has been watered!!!!\n");
		vTaskDelay(9000);
     8e8:	88 e2       	ldi	r24, 0x28	; 40
     8ea:	93 e2       	ldi	r25, 0x23	; 35
     8ec:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
     8f0:	e9 cf       	rjmp	.-46     	; 0x8c4 <servoMotorTask+0x4>

000008f2 <tempSensorTask>:
	while(1) {
		vTaskDelay(1000);
		
		int r = hih8120Wakeup();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("temp-wake error: %d\n", r);
     8f2:	0f 2e       	mov	r0, r31
     8f4:	fe e9       	ldi	r31, 0x9E	; 158
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	ff 2e       	mov	r15, r31
     8fc:	f0 2d       	mov	r31, r0
		}
		
		vTaskDelay(100);
		r = hih8120Meassure();
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
			printf("Temp-read error: %d\n", r);
     8fe:	03 eb       	ldi	r16, 0xB3	; 179
     900:	14 e0       	ldi	r17, 0x04	; 4

		}
		vTaskDelay(100);
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
		plantdata.humidity = hih8120GetHumidity();
     902:	ce e9       	ldi	r28, 0x9E	; 158
     904:	d9 e0       	ldi	r29, 0x09	; 9
void tempSensorTask(void* pvParameters) {
	(void)pvParameters;
		
	//Do temperature measurement
	while(1) {
		vTaskDelay(1000);
     906:	88 ee       	ldi	r24, 0xE8	; 232
     908:	93 e0       	ldi	r25, 0x03	; 3
     90a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
		
		int r = hih8120Wakeup();
     90e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <hih8120Wakeup>
     912:	28 2f       	mov	r18, r24
     914:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     916:	21 15       	cp	r18, r1
     918:	31 05       	cpc	r19, r1
     91a:	69 f0       	breq	.+26     	; 0x936 <tempSensorTask+0x44>
     91c:	23 30       	cpi	r18, 0x03	; 3
     91e:	31 05       	cpc	r19, r1
     920:	51 f0       	breq	.+20     	; 0x936 <tempSensorTask+0x44>
			printf("temp-wake error: %d\n", r);
     922:	1f 92       	push	r1
     924:	8f 93       	push	r24
     926:	ff 92       	push	r15
     928:	ef 92       	push	r14
     92a:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
		}
		
		vTaskDelay(100);
     936:	84 e6       	ldi	r24, 0x64	; 100
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
		r = hih8120Meassure();
     93e:	0e 94 06 1a 	call	0x340c	; 0x340c <hih8120Meassure>
     942:	28 2f       	mov	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
		if(r != HIH8120_OK && r != HIH8120_TWI_BUSY) {
     946:	21 15       	cp	r18, r1
     948:	31 05       	cpc	r19, r1
     94a:	69 f0       	breq	.+26     	; 0x966 <tempSensorTask+0x74>
     94c:	23 30       	cpi	r18, 0x03	; 3
     94e:	31 05       	cpc	r19, r1
     950:	51 f0       	breq	.+20     	; 0x966 <tempSensorTask+0x74>
			printf("Temp-read error: %d\n", r);
     952:	1f 92       	push	r1
     954:	8f 93       	push	r24
     956:	1f 93       	push	r17
     958:	0f 93       	push	r16
     95a:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <printf>
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0

		}
		vTaskDelay(100);
     966:	84 e6       	ldi	r24, 0x64	; 100
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
		///////////////////semaphore:
		xSemaphoreTake(semaphore, portMAX_DELAY);
     96e:	6f ef       	ldi	r22, 0xFF	; 255
     970:	7f ef       	ldi	r23, 0xFF	; 255
     972:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <semaphore>
     976:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <semaphore+0x1>
     97a:	f9 d4       	rcall	.+2546   	; 0x136e <xQueueSemaphoreTake>
		plantdata.humidity = hih8120GetHumidity();
     97c:	0e 94 17 1a 	call	0x342e	; 0x342e <hih8120GetHumidity>
     980:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__fixsfsi>
     984:	7b 83       	std	Y+3, r23	; 0x03
     986:	6a 83       	std	Y+2, r22	; 0x02
		plantdata.temperature = hih8120GetTemperature();
     988:	0e 94 2c 1a 	call	0x3458	; 0x3458 <hih8120GetTemperature>
     98c:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__fixsfsi>
     990:	79 83       	std	Y+1, r23	; 0x01
     992:	68 83       	st	Y, r22
		//printf("Hum: %d  Temp: %d\n", plantdata.humidity, plantdata.temperature);
		xSemaphoreGive(semaphore);
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	80 91 9c 09 	lds	r24, 0x099C	; 0x80099c <semaphore>
     9a2:	90 91 9d 09 	lds	r25, 0x099D	; 0x80099d <semaphore+0x1>
     9a6:	75 d3       	rcall	.+1770   	; 0x1092 <xQueueGenericSend>

	}
     9a8:	ae cf       	rjmp	.-164    	; 0x906 <tempSensorTask+0x14>

000009aa <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     9aa:	e8 e0       	ldi	r30, 0x08	; 8
     9ac:	f1 e0       	ldi	r31, 0x01	; 1
     9ae:	90 81       	ld	r25, Z
     9b0:	90 7f       	andi	r25, 0xF0	; 240
     9b2:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     9b4:	90 81       	ld	r25, Z
     9b6:	8f 70       	andi	r24, 0x0F	; 15
     9b8:	98 2b       	or	r25, r24
     9ba:	90 83       	st	Z, r25
     9bc:	08 95       	ret

000009be <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     9be:	e8 e0       	ldi	r30, 0x08	; 8
     9c0:	f1 e0       	ldi	r31, 0x01	; 1
     9c2:	80 81       	ld	r24, Z
     9c4:	80 7f       	andi	r24, 0xF0	; 240
     9c6:	80 83       	st	Z, r24
     9c8:	08 95       	ret

000009ca <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     9d0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     9d4:	ce 01       	movw	r24, r28
     9d6:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <malloc>
     9da:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     9dc:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     9e0:	20 97       	sbiw	r28, 0x00	; 0
     9e2:	11 f4       	brne	.+4      	; 0x9e8 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     9e4:	0e 94 18 15 	call	0x2a30	; 0x2a30 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     9e8:	ce 01       	movw	r24, r28
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
    if( pv )
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	41 f0       	breq	.+16     	; 0xa08 <vPortFree+0x18>
     9f8:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     9fa:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <vTaskSuspendAll>
        {
            free( pv );
     9fe:	ce 01       	movw	r24, r28
     a00:	0e 94 40 26 	call	0x4c80	; 0x4c80 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     a04:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <xTaskResumeAll>
    }
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a0e:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a10:	03 96       	adiw	r24, 0x03	; 3
     a12:	92 83       	std	Z+2, r25	; 0x02
     a14:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     a16:	2f ef       	ldi	r18, 0xFF	; 255
     a18:	3f ef       	ldi	r19, 0xFF	; 255
     a1a:	34 83       	std	Z+4, r19	; 0x04
     a1c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a1e:	96 83       	std	Z+6, r25	; 0x06
     a20:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a22:	90 87       	std	Z+8, r25	; 0x08
     a24:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a26:	10 82       	st	Z, r1
     a28:	08 95       	ret

00000a2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     a2a:	fc 01       	movw	r30, r24
     a2c:	11 86       	std	Z+9, r1	; 0x09
     a2e:	10 86       	std	Z+8, r1	; 0x08
     a30:	08 95       	ret

00000a32 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	9c 01       	movw	r18, r24
     a38:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     a3a:	dc 01       	movw	r26, r24
     a3c:	11 96       	adiw	r26, 0x01	; 1
     a3e:	cd 91       	ld	r28, X+
     a40:	dc 91       	ld	r29, X
     a42:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     a44:	d3 83       	std	Z+3, r29	; 0x03
     a46:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a48:	8c 81       	ldd	r24, Y+4	; 0x04
     a4a:	9d 81       	ldd	r25, Y+5	; 0x05
     a4c:	95 83       	std	Z+5, r25	; 0x05
     a4e:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     a50:	8c 81       	ldd	r24, Y+4	; 0x04
     a52:	9d 81       	ldd	r25, Y+5	; 0x05
     a54:	dc 01       	movw	r26, r24
     a56:	13 96       	adiw	r26, 0x03	; 3
     a58:	7c 93       	st	X, r23
     a5a:	6e 93       	st	-X, r22
     a5c:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     a5e:	7d 83       	std	Y+5, r23	; 0x05
     a60:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     a62:	31 87       	std	Z+9, r19	; 0x09
     a64:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     a66:	f9 01       	movw	r30, r18
     a68:	80 81       	ld	r24, Z
     a6a:	8f 5f       	subi	r24, 0xFF	; 255
     a6c:	80 83       	st	Z, r24
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a7a:	48 81       	ld	r20, Y
     a7c:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     a7e:	4f 3f       	cpi	r20, 0xFF	; 255
     a80:	2f ef       	ldi	r18, 0xFF	; 255
     a82:	52 07       	cpc	r21, r18
     a84:	21 f4       	brne	.+8      	; 0xa8e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     a86:	fc 01       	movw	r30, r24
     a88:	a7 81       	ldd	r26, Z+7	; 0x07
     a8a:	b0 85       	ldd	r27, Z+8	; 0x08
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     a8e:	dc 01       	movw	r26, r24
     a90:	13 96       	adiw	r26, 0x03	; 3
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <vListInsert+0x22>
     a94:	df 01       	movw	r26, r30
     a96:	12 96       	adiw	r26, 0x02	; 2
     a98:	ed 91       	ld	r30, X+
     a9a:	fc 91       	ld	r31, X
     a9c:	13 97       	sbiw	r26, 0x03	; 3
     a9e:	20 81       	ld	r18, Z
     aa0:	31 81       	ldd	r19, Z+1	; 0x01
     aa2:	42 17       	cp	r20, r18
     aa4:	53 07       	cpc	r21, r19
     aa6:	b0 f7       	brcc	.-20     	; 0xa94 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     aa8:	12 96       	adiw	r26, 0x02	; 2
     aaa:	ed 91       	ld	r30, X+
     aac:	fc 91       	ld	r31, X
     aae:	13 97       	sbiw	r26, 0x03	; 3
     ab0:	fb 83       	std	Y+3, r31	; 0x03
     ab2:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ab4:	d5 83       	std	Z+5, r29	; 0x05
     ab6:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     ab8:	bd 83       	std	Y+5, r27	; 0x05
     aba:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     abc:	13 96       	adiw	r26, 0x03	; 3
     abe:	dc 93       	st	X, r29
     ac0:	ce 93       	st	-X, r28
     ac2:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     ac4:	99 87       	std	Y+9, r25	; 0x09
     ac6:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     ac8:	fc 01       	movw	r30, r24
     aca:	20 81       	ld	r18, Z
     acc:	2f 5f       	subi	r18, 0xFF	; 255
     ace:	20 83       	st	Z, r18
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     adc:	a0 85       	ldd	r26, Z+8	; 0x08
     ade:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     ae0:	c2 81       	ldd	r28, Z+2	; 0x02
     ae2:	d3 81       	ldd	r29, Z+3	; 0x03
     ae4:	84 81       	ldd	r24, Z+4	; 0x04
     ae6:	95 81       	ldd	r25, Z+5	; 0x05
     ae8:	9d 83       	std	Y+5, r25	; 0x05
     aea:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     aec:	c4 81       	ldd	r28, Z+4	; 0x04
     aee:	d5 81       	ldd	r29, Z+5	; 0x05
     af0:	82 81       	ldd	r24, Z+2	; 0x02
     af2:	93 81       	ldd	r25, Z+3	; 0x03
     af4:	9b 83       	std	Y+3, r25	; 0x03
     af6:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     af8:	11 96       	adiw	r26, 0x01	; 1
     afa:	8d 91       	ld	r24, X+
     afc:	9c 91       	ld	r25, X
     afe:	12 97       	sbiw	r26, 0x02	; 2
     b00:	e8 17       	cp	r30, r24
     b02:	f9 07       	cpc	r31, r25
     b04:	31 f4       	brne	.+12     	; 0xb12 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     b06:	84 81       	ldd	r24, Z+4	; 0x04
     b08:	95 81       	ldd	r25, Z+5	; 0x05
     b0a:	12 96       	adiw	r26, 0x02	; 2
     b0c:	9c 93       	st	X, r25
     b0e:	8e 93       	st	-X, r24
     b10:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     b12:	11 86       	std	Z+9, r1	; 0x09
     b14:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     b16:	8c 91       	ld	r24, X
     b18:	81 50       	subi	r24, 0x01	; 1
     b1a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     b1c:	8c 91       	ld	r24, X
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b24:	31 e1       	ldi	r19, 0x11	; 17
     b26:	fc 01       	movw	r30, r24
     b28:	30 83       	st	Z, r19
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	22 e2       	ldi	r18, 0x22	; 34
     b2e:	20 83       	st	Z, r18
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	a3 e3       	ldi	r26, 0x33	; 51
     b34:	a0 83       	st	Z, r26
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	60 83       	st	Z, r22
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	70 83       	st	Z, r23
     b3e:	31 97       	sbiw	r30, 0x01	; 1
     b40:	10 82       	st	Z, r1
     b42:	31 97       	sbiw	r30, 0x01	; 1
     b44:	10 82       	st	Z, r1
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	60 e8       	ldi	r22, 0x80	; 128
     b4a:	60 83       	st	Z, r22
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	10 82       	st	Z, r1
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	10 82       	st	Z, r1
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	10 82       	st	Z, r1
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	62 e0       	ldi	r22, 0x02	; 2
     b5c:	60 83       	st	Z, r22
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	63 e0       	ldi	r22, 0x03	; 3
     b62:	60 83       	st	Z, r22
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	64 e0       	ldi	r22, 0x04	; 4
     b68:	60 83       	st	Z, r22
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	65 e0       	ldi	r22, 0x05	; 5
     b6e:	60 83       	st	Z, r22
     b70:	31 97       	sbiw	r30, 0x01	; 1
     b72:	66 e0       	ldi	r22, 0x06	; 6
     b74:	60 83       	st	Z, r22
     b76:	31 97       	sbiw	r30, 0x01	; 1
     b78:	67 e0       	ldi	r22, 0x07	; 7
     b7a:	60 83       	st	Z, r22
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	68 e0       	ldi	r22, 0x08	; 8
     b80:	60 83       	st	Z, r22
     b82:	31 97       	sbiw	r30, 0x01	; 1
     b84:	69 e0       	ldi	r22, 0x09	; 9
     b86:	60 83       	st	Z, r22
     b88:	31 97       	sbiw	r30, 0x01	; 1
     b8a:	60 e1       	ldi	r22, 0x10	; 16
     b8c:	60 83       	st	Z, r22
     b8e:	31 97       	sbiw	r30, 0x01	; 1
     b90:	30 83       	st	Z, r19
     b92:	31 97       	sbiw	r30, 0x01	; 1
     b94:	32 e1       	ldi	r19, 0x12	; 18
     b96:	30 83       	st	Z, r19
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	33 e1       	ldi	r19, 0x13	; 19
     b9c:	30 83       	st	Z, r19
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	34 e1       	ldi	r19, 0x14	; 20
     ba2:	30 83       	st	Z, r19
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	35 e1       	ldi	r19, 0x15	; 21
     ba8:	30 83       	st	Z, r19
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	36 e1       	ldi	r19, 0x16	; 22
     bae:	30 83       	st	Z, r19
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	37 e1       	ldi	r19, 0x17	; 23
     bb4:	30 83       	st	Z, r19
     bb6:	31 97       	sbiw	r30, 0x01	; 1
     bb8:	38 e1       	ldi	r19, 0x18	; 24
     bba:	30 83       	st	Z, r19
     bbc:	31 97       	sbiw	r30, 0x01	; 1
     bbe:	39 e1       	ldi	r19, 0x19	; 25
     bc0:	30 83       	st	Z, r19
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	30 e2       	ldi	r19, 0x20	; 32
     bc6:	30 83       	st	Z, r19
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	31 e2       	ldi	r19, 0x21	; 33
     bcc:	30 83       	st	Z, r19
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	20 83       	st	Z, r18
     bd2:	31 97       	sbiw	r30, 0x01	; 1
     bd4:	23 e2       	ldi	r18, 0x23	; 35
     bd6:	20 83       	st	Z, r18
     bd8:	31 97       	sbiw	r30, 0x01	; 1
     bda:	40 83       	st	Z, r20
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	50 83       	st	Z, r21
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	26 e2       	ldi	r18, 0x26	; 38
     be4:	20 83       	st	Z, r18
     be6:	31 97       	sbiw	r30, 0x01	; 1
     be8:	27 e2       	ldi	r18, 0x27	; 39
     bea:	20 83       	st	Z, r18
     bec:	31 97       	sbiw	r30, 0x01	; 1
     bee:	28 e2       	ldi	r18, 0x28	; 40
     bf0:	20 83       	st	Z, r18
     bf2:	31 97       	sbiw	r30, 0x01	; 1
     bf4:	29 e2       	ldi	r18, 0x29	; 41
     bf6:	20 83       	st	Z, r18
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	20 e3       	ldi	r18, 0x30	; 48
     bfc:	20 83       	st	Z, r18
     bfe:	31 97       	sbiw	r30, 0x01	; 1
     c00:	21 e3       	ldi	r18, 0x31	; 49
     c02:	20 83       	st	Z, r18
     c04:	89 97       	sbiw	r24, 0x29	; 41
     c06:	08 95       	ret

00000c08 <xPortStartScheduler>:
     c08:	a8 95       	wdr
     c0a:	90 ec       	ldi	r25, 0xC0	; 192
     c0c:	88 e1       	ldi	r24, 0x18	; 24
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	a8 95       	wdr
     c14:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     c1e:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <pxCurrentTCB>
     c22:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
     c26:	cd 91       	ld	r28, X+
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	dd 91       	ld	r29, X+
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	9f 90       	pop	r9
     c5c:	8f 90       	pop	r8
     c5e:	7f 90       	pop	r7
     c60:	6f 90       	pop	r6
     c62:	5f 90       	pop	r5
     c64:	4f 90       	pop	r4
     c66:	3f 90       	pop	r3
     c68:	2f 90       	pop	r2
     c6a:	1f 90       	pop	r1
     c6c:	0f 90       	pop	r0
     c6e:	0c be       	out	0x3c, r0	; 60
     c70:	0f 90       	pop	r0
     c72:	0b be       	out	0x3b, r0	; 59
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	08 95       	ret
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	08 95       	ret

00000c80 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	0f 92       	push	r0
     c88:	0b b6       	in	r0, 0x3b	; 59
     c8a:	0f 92       	push	r0
     c8c:	0c b6       	in	r0, 0x3c	; 60
     c8e:	0f 92       	push	r0
     c90:	1f 92       	push	r1
     c92:	11 24       	eor	r1, r1
     c94:	2f 92       	push	r2
     c96:	3f 92       	push	r3
     c98:	4f 92       	push	r4
     c9a:	5f 92       	push	r5
     c9c:	6f 92       	push	r6
     c9e:	7f 92       	push	r7
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	5f 93       	push	r21
     cbc:	6f 93       	push	r22
     cbe:	7f 93       	push	r23
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ef 93       	push	r30
     cce:	ff 93       	push	r31
     cd0:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <pxCurrentTCB>
     cd4:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
     cd8:	0d b6       	in	r0, 0x3d	; 61
     cda:	0d 92       	st	X+, r0
     cdc:	0e b6       	in	r0, 0x3e	; 62
     cde:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     ce0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     ce4:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <pxCurrentTCB>
     ce8:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
     cec:	cd 91       	ld	r28, X+
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	dd 91       	ld	r29, X+
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	bf 91       	pop	r27
     cfe:	af 91       	pop	r26
     d00:	9f 91       	pop	r25
     d02:	8f 91       	pop	r24
     d04:	7f 91       	pop	r23
     d06:	6f 91       	pop	r22
     d08:	5f 91       	pop	r21
     d0a:	4f 91       	pop	r20
     d0c:	3f 91       	pop	r19
     d0e:	2f 91       	pop	r18
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	bf 90       	pop	r11
     d1e:	af 90       	pop	r10
     d20:	9f 90       	pop	r9
     d22:	8f 90       	pop	r8
     d24:	7f 90       	pop	r7
     d26:	6f 90       	pop	r6
     d28:	5f 90       	pop	r5
     d2a:	4f 90       	pop	r4
     d2c:	3f 90       	pop	r3
     d2e:	2f 90       	pop	r2
     d30:	1f 90       	pop	r1
     d32:	0f 90       	pop	r0
     d34:	0c be       	out	0x3c, r0	; 60
     d36:	0f 90       	pop	r0
     d38:	0b be       	out	0x3b, r0	; 59
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d40:	08 95       	ret

00000d42 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     d42:	0f 92       	push	r0
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	0f 92       	push	r0
     d4a:	0b b6       	in	r0, 0x3b	; 59
     d4c:	0f 92       	push	r0
     d4e:	0c b6       	in	r0, 0x3c	; 60
     d50:	0f 92       	push	r0
     d52:	1f 92       	push	r1
     d54:	11 24       	eor	r1, r1
     d56:	2f 92       	push	r2
     d58:	3f 92       	push	r3
     d5a:	4f 92       	push	r4
     d5c:	5f 92       	push	r5
     d5e:	6f 92       	push	r6
     d60:	7f 92       	push	r7
     d62:	8f 92       	push	r8
     d64:	9f 92       	push	r9
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	2f 93       	push	r18
     d78:	3f 93       	push	r19
     d7a:	4f 93       	push	r20
     d7c:	5f 93       	push	r21
     d7e:	6f 93       	push	r22
     d80:	7f 93       	push	r23
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
     d86:	af 93       	push	r26
     d88:	bf 93       	push	r27
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
     d92:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <pxCurrentTCB>
     d96:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
     d9a:	0d b6       	in	r0, 0x3d	; 61
     d9c:	0d 92       	st	X+, r0
     d9e:	0e b6       	in	r0, 0x3e	; 62
     da0:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     da2:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     da4:	c0 d7       	rcall	.+3968   	; 0x1d26 <xTaskIncrementTick>
     da6:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     da8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     dac:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <pxCurrentTCB>
     db0:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
     db4:	cd 91       	ld	r28, X+
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	dd 91       	ld	r29, X+
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	bf 90       	pop	r11
     de6:	af 90       	pop	r10
     de8:	9f 90       	pop	r9
     dea:	8f 90       	pop	r8
     dec:	7f 90       	pop	r7
     dee:	6f 90       	pop	r6
     df0:	5f 90       	pop	r5
     df2:	4f 90       	pop	r4
     df4:	3f 90       	pop	r3
     df6:	2f 90       	pop	r2
     df8:	1f 90       	pop	r1
     dfa:	0f 90       	pop	r0
     dfc:	0c be       	out	0x3c, r0	; 60
     dfe:	0f 90       	pop	r0
     e00:	0b be       	out	0x3b, r0	; 59
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     e08:	08 95       	ret

00000e0a <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     e0a:	9b df       	rcall	.-202    	; 0xd42 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     e0c:	18 95       	reti

00000e0e <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	0f 92       	push	r0
     e14:	fc 01       	movw	r30, r24
     e16:	92 8d       	ldd	r25, Z+26	; 0x1a
     e18:	0f 90       	pop	r0
     e1a:	0f be       	out	0x3f, r0	; 63
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	91 11       	cpse	r25, r1
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	08 95       	ret

00000e24 <prvCopyDataToQueue>:
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
     e2e:	04 2f       	mov	r16, r20
     e30:	1a 8d       	ldd	r17, Y+26	; 0x1a
     e32:	4c 8d       	ldd	r20, Y+28	; 0x1c
     e34:	41 11       	cpse	r20, r1
     e36:	0c c0       	rjmp	.+24     	; 0xe50 <prvCopyDataToQueue+0x2c>
     e38:	88 81       	ld	r24, Y
     e3a:	99 81       	ldd	r25, Y+1	; 0x01
     e3c:	89 2b       	or	r24, r25
     e3e:	09 f0       	breq	.+2      	; 0xe42 <prvCopyDataToQueue+0x1e>
     e40:	42 c0       	rjmp	.+132    	; 0xec6 <prvCopyDataToQueue+0xa2>
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	9d 81       	ldd	r25, Y+5	; 0x05
     e46:	0e 94 a3 11 	call	0x2346	; 0x2346 <xTaskPriorityDisinherit>
     e4a:	1d 82       	std	Y+5, r1	; 0x05
     e4c:	1c 82       	std	Y+4, r1	; 0x04
     e4e:	42 c0       	rjmp	.+132    	; 0xed4 <prvCopyDataToQueue+0xb0>
     e50:	01 11       	cpse	r16, r1
     e52:	17 c0       	rjmp	.+46     	; 0xe82 <prvCopyDataToQueue+0x5e>
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <memcpy>
     e5e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	82 0f       	add	r24, r18
     e66:	91 1d       	adc	r25, r1
     e68:	9b 83       	std	Y+3, r25	; 0x03
     e6a:	8a 83       	std	Y+2, r24	; 0x02
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	82 17       	cp	r24, r18
     e72:	93 07       	cpc	r25, r19
     e74:	50 f1       	brcs	.+84     	; 0xeca <prvCopyDataToQueue+0xa6>
     e76:	88 81       	ld	r24, Y
     e78:	99 81       	ldd	r25, Y+1	; 0x01
     e7a:	9b 83       	std	Y+3, r25	; 0x03
     e7c:	8a 83       	std	Y+2, r24	; 0x02
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	29 c0       	rjmp	.+82     	; 0xed4 <prvCopyDataToQueue+0xb0>
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	8e 81       	ldd	r24, Y+6	; 0x06
     e86:	9f 81       	ldd	r25, Y+7	; 0x07
     e88:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <memcpy>
     e8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	91 95       	neg	r25
     e92:	81 95       	neg	r24
     e94:	91 09       	sbc	r25, r1
     e96:	2e 81       	ldd	r18, Y+6	; 0x06
     e98:	3f 81       	ldd	r19, Y+7	; 0x07
     e9a:	28 0f       	add	r18, r24
     e9c:	39 1f       	adc	r19, r25
     e9e:	3f 83       	std	Y+7, r19	; 0x07
     ea0:	2e 83       	std	Y+6, r18	; 0x06
     ea2:	48 81       	ld	r20, Y
     ea4:	59 81       	ldd	r21, Y+1	; 0x01
     ea6:	24 17       	cp	r18, r20
     ea8:	35 07       	cpc	r19, r21
     eaa:	30 f4       	brcc	.+12     	; 0xeb8 <prvCopyDataToQueue+0x94>
     eac:	2c 81       	ldd	r18, Y+4	; 0x04
     eae:	3d 81       	ldd	r19, Y+5	; 0x05
     eb0:	82 0f       	add	r24, r18
     eb2:	93 1f       	adc	r25, r19
     eb4:	9f 83       	std	Y+7, r25	; 0x07
     eb6:	8e 83       	std	Y+6, r24	; 0x06
     eb8:	02 30       	cpi	r16, 0x02	; 2
     eba:	49 f4       	brne	.+18     	; 0xece <prvCopyDataToQueue+0xaa>
     ebc:	11 23       	and	r17, r17
     ebe:	49 f0       	breq	.+18     	; 0xed2 <prvCopyDataToQueue+0xae>
     ec0:	11 50       	subi	r17, 0x01	; 1
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <prvCopyDataToQueue+0xb0>
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <prvCopyDataToQueue+0xb0>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <prvCopyDataToQueue+0xb0>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <prvCopyDataToQueue+0xb0>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	1f 5f       	subi	r17, 0xFF	; 255
     ed6:	1a 8f       	std	Y+26, r17	; 0x1a
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	08 95       	ret

00000ee2 <prvCopyDataFromQueue>:
     ee2:	fc 01       	movw	r30, r24
     ee4:	44 8d       	ldd	r20, Z+28	; 0x1c
     ee6:	44 23       	and	r20, r20
     ee8:	a9 f0       	breq	.+42     	; 0xf14 <prvCopyDataFromQueue+0x32>
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	26 81       	ldd	r18, Z+6	; 0x06
     eee:	37 81       	ldd	r19, Z+7	; 0x07
     ef0:	24 0f       	add	r18, r20
     ef2:	35 1f       	adc	r19, r21
     ef4:	37 83       	std	Z+7, r19	; 0x07
     ef6:	26 83       	std	Z+6, r18	; 0x06
     ef8:	84 81       	ldd	r24, Z+4	; 0x04
     efa:	95 81       	ldd	r25, Z+5	; 0x05
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	20 f0       	brcs	.+8      	; 0xf0a <prvCopyDataFromQueue+0x28>
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	97 83       	std	Z+7, r25	; 0x07
     f08:	86 83       	std	Z+6, r24	; 0x06
     f0a:	cb 01       	movw	r24, r22
     f0c:	66 81       	ldd	r22, Z+6	; 0x06
     f0e:	77 81       	ldd	r23, Z+7	; 0x07
     f10:	0c 94 cd 26 	jmp	0x4d9a	; 0x4d9a <memcpy>
     f14:	08 95       	ret

00000f16 <prvUnlockQueue>:
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	0f 93       	push	r16
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	8c 01       	movw	r16, r24
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	0f 92       	push	r0
     f28:	fc 01       	movw	r30, r24
     f2a:	c6 8d       	ldd	r28, Z+30	; 0x1e
     f2c:	1c 16       	cp	r1, r28
     f2e:	ac f4       	brge	.+42     	; 0xf5a <prvUnlockQueue+0x44>
     f30:	81 89       	ldd	r24, Z+17	; 0x11
     f32:	81 11       	cpse	r24, r1
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <prvUnlockQueue+0x2c>
     f36:	11 c0       	rjmp	.+34     	; 0xf5a <prvUnlockQueue+0x44>
     f38:	f8 01       	movw	r30, r16
     f3a:	81 89       	ldd	r24, Z+17	; 0x11
     f3c:	81 11       	cpse	r24, r1
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <prvUnlockQueue+0x34>
     f40:	0c c0       	rjmp	.+24     	; 0xf5a <prvUnlockQueue+0x44>
     f42:	78 01       	movw	r14, r16
     f44:	f1 e1       	ldi	r31, 0x11	; 17
     f46:	ef 0e       	add	r14, r31
     f48:	f1 1c       	adc	r15, r1
     f4a:	c7 01       	movw	r24, r14
     f4c:	0e 94 92 10 	call	0x2124	; 0x2124 <xTaskRemoveFromEventList>
     f50:	81 11       	cpse	r24, r1
     f52:	0e 94 1a 11 	call	0x2234	; 0x2234 <vTaskMissedYield>
     f56:	c1 50       	subi	r28, 0x01	; 1
     f58:	79 f7       	brne	.-34     	; 0xf38 <prvUnlockQueue+0x22>
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	f8 01       	movw	r30, r16
     f5e:	86 8f       	std	Z+30, r24	; 0x1e
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	0f 92       	push	r0
     f6a:	c5 8d       	ldd	r28, Z+29	; 0x1d
     f6c:	1c 16       	cp	r1, r28
     f6e:	ac f4       	brge	.+42     	; 0xf9a <prvUnlockQueue+0x84>
     f70:	80 85       	ldd	r24, Z+8	; 0x08
     f72:	81 11       	cpse	r24, r1
     f74:	06 c0       	rjmp	.+12     	; 0xf82 <prvUnlockQueue+0x6c>
     f76:	11 c0       	rjmp	.+34     	; 0xf9a <prvUnlockQueue+0x84>
     f78:	f8 01       	movw	r30, r16
     f7a:	80 85       	ldd	r24, Z+8	; 0x08
     f7c:	81 11       	cpse	r24, r1
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <prvUnlockQueue+0x74>
     f80:	0c c0       	rjmp	.+24     	; 0xf9a <prvUnlockQueue+0x84>
     f82:	78 01       	movw	r14, r16
     f84:	f8 e0       	ldi	r31, 0x08	; 8
     f86:	ef 0e       	add	r14, r31
     f88:	f1 1c       	adc	r15, r1
     f8a:	c7 01       	movw	r24, r14
     f8c:	0e 94 92 10 	call	0x2124	; 0x2124 <xTaskRemoveFromEventList>
     f90:	81 11       	cpse	r24, r1
     f92:	0e 94 1a 11 	call	0x2234	; 0x2234 <vTaskMissedYield>
     f96:	c1 50       	subi	r28, 0x01	; 1
     f98:	79 f7       	brne	.-34     	; 0xf78 <prvUnlockQueue+0x62>
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	f8 01       	movw	r30, r16
     f9e:	85 8f       	std	Z+29, r24	; 0x1d
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	08 95       	ret

00000fb0 <xQueueGenericReset>:
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	ec 01       	movw	r28, r24
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	0f 92       	push	r0
     fbc:	e8 81       	ld	r30, Y
     fbe:	f9 81       	ldd	r31, Y+1	; 0x01
     fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	82 9f       	mul	r24, r18
     fca:	a0 01       	movw	r20, r0
     fcc:	83 9f       	mul	r24, r19
     fce:	50 0d       	add	r21, r0
     fd0:	92 9f       	mul	r25, r18
     fd2:	50 0d       	add	r21, r0
     fd4:	11 24       	eor	r1, r1
     fd6:	4e 0f       	add	r20, r30
     fd8:	5f 1f       	adc	r21, r31
     fda:	5d 83       	std	Y+5, r21	; 0x05
     fdc:	4c 83       	std	Y+4, r20	; 0x04
     fde:	1a 8e       	std	Y+26, r1	; 0x1a
     fe0:	fb 83       	std	Y+3, r31	; 0x03
     fe2:	ea 83       	std	Y+2, r30	; 0x02
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	82 9f       	mul	r24, r18
     fe8:	a0 01       	movw	r20, r0
     fea:	83 9f       	mul	r24, r19
     fec:	50 0d       	add	r21, r0
     fee:	92 9f       	mul	r25, r18
     ff0:	50 0d       	add	r21, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	cf 01       	movw	r24, r30
     ff6:	84 0f       	add	r24, r20
     ff8:	95 1f       	adc	r25, r21
     ffa:	9f 83       	std	Y+7, r25	; 0x07
     ffc:	8e 83       	std	Y+6, r24	; 0x06
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	8d 8f       	std	Y+29, r24	; 0x1d
    1002:	8e 8f       	std	Y+30, r24	; 0x1e
    1004:	61 11       	cpse	r22, r1
    1006:	0b c0       	rjmp	.+22     	; 0x101e <xQueueGenericReset+0x6e>
    1008:	88 85       	ldd	r24, Y+8	; 0x08
    100a:	88 23       	and	r24, r24
    100c:	71 f0       	breq	.+28     	; 0x102a <xQueueGenericReset+0x7a>
    100e:	ce 01       	movw	r24, r28
    1010:	08 96       	adiw	r24, 0x08	; 8
    1012:	0e 94 92 10 	call	0x2124	; 0x2124 <xTaskRemoveFromEventList>
    1016:	88 23       	and	r24, r24
    1018:	41 f0       	breq	.+16     	; 0x102a <xQueueGenericReset+0x7a>
    101a:	32 de       	rcall	.-924    	; 0xc80 <vPortYield>
    101c:	06 c0       	rjmp	.+12     	; 0x102a <xQueueGenericReset+0x7a>
    101e:	ce 01       	movw	r24, r28
    1020:	08 96       	adiw	r24, 0x08	; 8
    1022:	f5 dc       	rcall	.-1558   	; 0xa0e <vListInitialise>
    1024:	ce 01       	movw	r24, r28
    1026:	41 96       	adiw	r24, 0x11	; 17
    1028:	f2 dc       	rcall	.-1564   	; 0xa0e <vListInitialise>
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <xQueueGenericCreate>:
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	08 2f       	mov	r16, r24
    1042:	16 2f       	mov	r17, r22
    1044:	f4 2e       	mov	r15, r20
    1046:	66 23       	and	r22, r22
    1048:	b9 f0       	breq	.+46     	; 0x1078 <xQueueGenericCreate+0x42>
    104a:	86 9f       	mul	r24, r22
    104c:	c0 01       	movw	r24, r0
    104e:	11 24       	eor	r1, r1
    1050:	81 96       	adiw	r24, 0x21	; 33
    1052:	bb dc       	rcall	.-1674   	; 0x9ca <pvPortMalloc>
    1054:	ec 01       	movw	r28, r24
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	41 f4       	brne	.+16     	; 0x106a <xQueueGenericCreate+0x34>
    105a:	14 c0       	rjmp	.+40     	; 0x1084 <xQueueGenericCreate+0x4e>
    105c:	0b 8f       	std	Y+27, r16	; 0x1b
    105e:	1c 8f       	std	Y+28, r17	; 0x1c
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	ce 01       	movw	r24, r28
    1064:	a5 df       	rcall	.-182    	; 0xfb0 <xQueueGenericReset>
    1066:	f8 a2       	std	Y+32, r15	; 0x20
    1068:	0d c0       	rjmp	.+26     	; 0x1084 <xQueueGenericCreate+0x4e>
    106a:	81 96       	adiw	r24, 0x21	; 33
    106c:	99 83       	std	Y+1, r25	; 0x01
    106e:	88 83       	st	Y, r24
    1070:	f5 cf       	rjmp	.-22     	; 0x105c <xQueueGenericCreate+0x26>
    1072:	d9 83       	std	Y+1, r29	; 0x01
    1074:	c8 83       	st	Y, r28
    1076:	f2 cf       	rjmp	.-28     	; 0x105c <xQueueGenericCreate+0x26>
    1078:	81 e2       	ldi	r24, 0x21	; 33
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	a6 dc       	rcall	.-1716   	; 0x9ca <pvPortMalloc>
    107e:	ec 01       	movw	r28, r24
    1080:	89 2b       	or	r24, r25
    1082:	b9 f7       	brne	.-18     	; 0x1072 <xQueueGenericCreate+0x3c>
    1084:	ce 01       	movw	r24, r28
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	ff 90       	pop	r15
    1090:	08 95       	ret

00001092 <xQueueGenericSend>:
    1092:	9f 92       	push	r9
    1094:	af 92       	push	r10
    1096:	bf 92       	push	r11
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <xQueueGenericSend+0x18>
    10aa:	1f 92       	push	r1
    10ac:	1f 92       	push	r1
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	8c 01       	movw	r16, r24
    10b4:	6b 01       	movw	r12, r22
    10b6:	5d 83       	std	Y+5, r21	; 0x05
    10b8:	4c 83       	std	Y+4, r20	; 0x04
    10ba:	a2 2e       	mov	r10, r18
    10bc:	b1 2c       	mov	r11, r1
    10be:	99 24       	eor	r9, r9
    10c0:	93 94       	inc	r9
    10c2:	7c 01       	movw	r14, r24
    10c4:	88 e0       	ldi	r24, 0x08	; 8
    10c6:	e8 0e       	add	r14, r24
    10c8:	f1 1c       	adc	r15, r1
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	0f 92       	push	r0
    10d0:	f8 01       	movw	r30, r16
    10d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    10d4:	83 8d       	ldd	r24, Z+27	; 0x1b
    10d6:	98 17       	cp	r25, r24
    10d8:	18 f0       	brcs	.+6      	; 0x10e0 <xQueueGenericSend+0x4e>
    10da:	f2 e0       	ldi	r31, 0x02	; 2
    10dc:	af 12       	cpse	r10, r31
    10de:	16 c0       	rjmp	.+44     	; 0x110c <xQueueGenericSend+0x7a>
    10e0:	4a 2d       	mov	r20, r10
    10e2:	b6 01       	movw	r22, r12
    10e4:	c8 01       	movw	r24, r16
    10e6:	9e de       	rcall	.-708    	; 0xe24 <prvCopyDataToQueue>
    10e8:	f8 01       	movw	r30, r16
    10ea:	91 89       	ldd	r25, Z+17	; 0x11
    10ec:	99 23       	and	r25, r25
    10ee:	41 f0       	breq	.+16     	; 0x1100 <xQueueGenericSend+0x6e>
    10f0:	c8 01       	movw	r24, r16
    10f2:	41 96       	adiw	r24, 0x11	; 17
    10f4:	0e 94 92 10 	call	0x2124	; 0x2124 <xTaskRemoveFromEventList>
    10f8:	88 23       	and	r24, r24
    10fa:	21 f0       	breq	.+8      	; 0x1104 <xQueueGenericSend+0x72>
    10fc:	c1 dd       	rcall	.-1150   	; 0xc80 <vPortYield>
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <xQueueGenericSend+0x72>
    1100:	81 11       	cpse	r24, r1
    1102:	be dd       	rcall	.-1156   	; 0xc80 <vPortYield>
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	47 c0       	rjmp	.+142    	; 0x119a <xQueueGenericSend+0x108>
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	9d 81       	ldd	r25, Y+5	; 0x05
    1110:	89 2b       	or	r24, r25
    1112:	21 f4       	brne	.+8      	; 0x111c <xQueueGenericSend+0x8a>
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	3f c0       	rjmp	.+126    	; 0x119a <xQueueGenericSend+0x108>
    111c:	b1 10       	cpse	r11, r1
    111e:	05 c0       	rjmp	.+10     	; 0x112a <xQueueGenericSend+0x98>
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	0e 94 da 10 	call	0x21b4	; 0x21b4 <vTaskInternalSetTimeOutState>
    1128:	b9 2c       	mov	r11, r9
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	eb d5       	rcall	.+3030   	; 0x1d06 <vTaskSuspendAll>
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	0f 92       	push	r0
    1136:	f8 01       	movw	r30, r16
    1138:	85 8d       	ldd	r24, Z+29	; 0x1d
    113a:	8f 3f       	cpi	r24, 0xFF	; 255
    113c:	09 f4       	brne	.+2      	; 0x1140 <xQueueGenericSend+0xae>
    113e:	15 8e       	std	Z+29, r1	; 0x1d
    1140:	f8 01       	movw	r30, r16
    1142:	86 8d       	ldd	r24, Z+30	; 0x1e
    1144:	8f 3f       	cpi	r24, 0xFF	; 255
    1146:	09 f4       	brne	.+2      	; 0x114a <xQueueGenericSend+0xb8>
    1148:	16 8e       	std	Z+30, r1	; 0x1e
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	be 01       	movw	r22, r28
    1150:	6c 5f       	subi	r22, 0xFC	; 252
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	ce 01       	movw	r24, r28
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	0e 94 e5 10 	call	0x21ca	; 0x21ca <xTaskCheckForTimeOut>
    115c:	81 11       	cpse	r24, r1
    115e:	19 c0       	rjmp	.+50     	; 0x1192 <xQueueGenericSend+0x100>
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	0f 92       	push	r0
    1166:	f8 01       	movw	r30, r16
    1168:	92 8d       	ldd	r25, Z+26	; 0x1a
    116a:	83 8d       	ldd	r24, Z+27	; 0x1b
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	98 13       	cpse	r25, r24
    1172:	0b c0       	rjmp	.+22     	; 0x118a <xQueueGenericSend+0xf8>
    1174:	6c 81       	ldd	r22, Y+4	; 0x04
    1176:	7d 81       	ldd	r23, Y+5	; 0x05
    1178:	c7 01       	movw	r24, r14
    117a:	ab d7       	rcall	.+3926   	; 0x20d2 <vTaskPlaceOnEventList>
    117c:	c8 01       	movw	r24, r16
    117e:	cb de       	rcall	.-618    	; 0xf16 <prvUnlockQueue>
    1180:	8c d6       	rcall	.+3352   	; 0x1e9a <xTaskResumeAll>
    1182:	81 11       	cpse	r24, r1
    1184:	a2 cf       	rjmp	.-188    	; 0x10ca <xQueueGenericSend+0x38>
    1186:	7c dd       	rcall	.-1288   	; 0xc80 <vPortYield>
    1188:	a0 cf       	rjmp	.-192    	; 0x10ca <xQueueGenericSend+0x38>
    118a:	c8 01       	movw	r24, r16
    118c:	c4 de       	rcall	.-632    	; 0xf16 <prvUnlockQueue>
    118e:	85 d6       	rcall	.+3338   	; 0x1e9a <xTaskResumeAll>
    1190:	9c cf       	rjmp	.-200    	; 0x10ca <xQueueGenericSend+0x38>
    1192:	c8 01       	movw	r24, r16
    1194:	c0 de       	rcall	.-640    	; 0xf16 <prvUnlockQueue>
    1196:	81 d6       	rcall	.+3330   	; 0x1e9a <xTaskResumeAll>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	bf 90       	pop	r11
    11b6:	af 90       	pop	r10
    11b8:	9f 90       	pop	r9
    11ba:	08 95       	ret

000011bc <xQueueCreateMutex>:
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
    11c0:	48 2f       	mov	r20, r24
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	37 df       	rcall	.-402    	; 0x1036 <xQueueGenericCreate>
    11c8:	ec 01       	movw	r28, r24
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	59 f0       	breq	.+22     	; 0x11e4 <xQueueCreateMutex+0x28>
    11ce:	1d 82       	std	Y+5, r1	; 0x05
    11d0:	1c 82       	std	Y+4, r1	; 0x04
    11d2:	19 82       	std	Y+1, r1	; 0x01
    11d4:	18 82       	st	Y, r1
    11d6:	1e 82       	std	Y+6, r1	; 0x06
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	57 df       	rcall	.-338    	; 0x1092 <xQueueGenericSend>
    11e4:	ce 01       	movw	r24, r28
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <xQueueGenericSendFromISR>:
    11ec:	ef 92       	push	r14
    11ee:	ff 92       	push	r15
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	8a 01       	movw	r16, r20
    11fa:	fc 01       	movw	r30, r24
    11fc:	52 8d       	ldd	r21, Z+26	; 0x1a
    11fe:	33 8d       	ldd	r19, Z+27	; 0x1b
    1200:	53 17       	cp	r21, r19
    1202:	10 f0       	brcs	.+4      	; 0x1208 <xQueueGenericSendFromISR+0x1c>
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	e1 f4       	brne	.+56     	; 0x1240 <xQueueGenericSendFromISR+0x54>
    1208:	42 2f       	mov	r20, r18
    120a:	78 01       	movw	r14, r16
    120c:	ec 01       	movw	r28, r24
    120e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1210:	09 de       	rcall	.-1006   	; 0xe24 <prvCopyDataToQueue>
    1212:	1f 3f       	cpi	r17, 0xFF	; 255
    1214:	79 f4       	brne	.+30     	; 0x1234 <xQueueGenericSendFromISR+0x48>
    1216:	89 89       	ldd	r24, Y+17	; 0x11
    1218:	88 23       	and	r24, r24
    121a:	a1 f0       	breq	.+40     	; 0x1244 <xQueueGenericSendFromISR+0x58>
    121c:	ce 01       	movw	r24, r28
    121e:	41 96       	adiw	r24, 0x11	; 17
    1220:	81 d7       	rcall	.+3842   	; 0x2124 <xTaskRemoveFromEventList>
    1222:	88 23       	and	r24, r24
    1224:	89 f0       	breq	.+34     	; 0x1248 <xQueueGenericSendFromISR+0x5c>
    1226:	e1 14       	cp	r14, r1
    1228:	f1 04       	cpc	r15, r1
    122a:	81 f0       	breq	.+32     	; 0x124c <xQueueGenericSendFromISR+0x60>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	f7 01       	movw	r30, r14
    1230:	80 83       	st	Z, r24
    1232:	0d c0       	rjmp	.+26     	; 0x124e <xQueueGenericSendFromISR+0x62>
    1234:	ff 24       	eor	r15, r15
    1236:	f3 94       	inc	r15
    1238:	f1 0e       	add	r15, r17
    123a:	fe 8e       	std	Y+30, r15	; 0x1e
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	07 c0       	rjmp	.+14     	; 0x124e <xQueueGenericSendFromISR+0x62>
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	05 c0       	rjmp	.+10     	; 0x124e <xQueueGenericSendFromISR+0x62>
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	03 c0       	rjmp	.+6      	; 0x124e <xQueueGenericSendFromISR+0x62>
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	01 c0       	rjmp	.+2      	; 0x124e <xQueueGenericSendFromISR+0x62>
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	08 95       	ret

0000125c <xQueueReceive>:
    125c:	9f 92       	push	r9
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	00 d0       	rcall	.+0      	; 0x1274 <xQueueReceive+0x18>
    1274:	1f 92       	push	r1
    1276:	1f 92       	push	r1
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	8c 01       	movw	r16, r24
    127e:	5b 01       	movw	r10, r22
    1280:	5d 83       	std	Y+5, r21	; 0x05
    1282:	4c 83       	std	Y+4, r20	; 0x04
    1284:	e1 2c       	mov	r14, r1
    1286:	99 24       	eor	r9, r9
    1288:	93 94       	inc	r9
    128a:	6c 01       	movw	r12, r24
    128c:	81 e1       	ldi	r24, 0x11	; 17
    128e:	c8 0e       	add	r12, r24
    1290:	d1 1c       	adc	r13, r1
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	0f 92       	push	r0
    1298:	f8 01       	movw	r30, r16
    129a:	f2 8c       	ldd	r15, Z+26	; 0x1a
    129c:	ff 20       	and	r15, r15
    129e:	91 f0       	breq	.+36     	; 0x12c4 <xQueueReceive+0x68>
    12a0:	b5 01       	movw	r22, r10
    12a2:	c8 01       	movw	r24, r16
    12a4:	1e de       	rcall	.-964    	; 0xee2 <prvCopyDataFromQueue>
    12a6:	fa 94       	dec	r15
    12a8:	f8 01       	movw	r30, r16
    12aa:	f2 8e       	std	Z+26, r15	; 0x1a
    12ac:	80 85       	ldd	r24, Z+8	; 0x08
    12ae:	88 23       	and	r24, r24
    12b0:	29 f0       	breq	.+10     	; 0x12bc <xQueueReceive+0x60>
    12b2:	c8 01       	movw	r24, r16
    12b4:	08 96       	adiw	r24, 0x08	; 8
    12b6:	36 d7       	rcall	.+3692   	; 0x2124 <xTaskRemoveFromEventList>
    12b8:	81 11       	cpse	r24, r1
    12ba:	e2 dc       	rcall	.-1596   	; 0xc80 <vPortYield>
    12bc:	0f 90       	pop	r0
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	44 c0       	rjmp	.+136    	; 0x134c <xQueueReceive+0xf0>
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	89 2b       	or	r24, r25
    12ca:	21 f4       	brne	.+8      	; 0x12d4 <xQueueReceive+0x78>
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	3c c0       	rjmp	.+120    	; 0x134c <xQueueReceive+0xf0>
    12d4:	e1 10       	cpse	r14, r1
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <xQueueReceive+0x84>
    12d8:	ce 01       	movw	r24, r28
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	6b d7       	rcall	.+3798   	; 0x21b4 <vTaskInternalSetTimeOutState>
    12de:	e9 2c       	mov	r14, r9
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	10 d5       	rcall	.+2592   	; 0x1d06 <vTaskSuspendAll>
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	0f 92       	push	r0
    12ec:	f8 01       	movw	r30, r16
    12ee:	85 8d       	ldd	r24, Z+29	; 0x1d
    12f0:	8f 3f       	cpi	r24, 0xFF	; 255
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <xQueueReceive+0x9a>
    12f4:	15 8e       	std	Z+29, r1	; 0x1d
    12f6:	f8 01       	movw	r30, r16
    12f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    12fa:	8f 3f       	cpi	r24, 0xFF	; 255
    12fc:	09 f4       	brne	.+2      	; 0x1300 <xQueueReceive+0xa4>
    12fe:	16 8e       	std	Z+30, r1	; 0x1e
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	be 01       	movw	r22, r28
    1306:	6c 5f       	subi	r22, 0xFC	; 252
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	5d d7       	rcall	.+3770   	; 0x21ca <xTaskCheckForTimeOut>
    1310:	81 11       	cpse	r24, r1
    1312:	13 c0       	rjmp	.+38     	; 0x133a <xQueueReceive+0xde>
    1314:	c8 01       	movw	r24, r16
    1316:	7b dd       	rcall	.-1290   	; 0xe0e <prvIsQueueEmpty>
    1318:	88 23       	and	r24, r24
    131a:	59 f0       	breq	.+22     	; 0x1332 <xQueueReceive+0xd6>
    131c:	6c 81       	ldd	r22, Y+4	; 0x04
    131e:	7d 81       	ldd	r23, Y+5	; 0x05
    1320:	c6 01       	movw	r24, r12
    1322:	d7 d6       	rcall	.+3502   	; 0x20d2 <vTaskPlaceOnEventList>
    1324:	c8 01       	movw	r24, r16
    1326:	f7 dd       	rcall	.-1042   	; 0xf16 <prvUnlockQueue>
    1328:	b8 d5       	rcall	.+2928   	; 0x1e9a <xTaskResumeAll>
    132a:	81 11       	cpse	r24, r1
    132c:	b2 cf       	rjmp	.-156    	; 0x1292 <xQueueReceive+0x36>
    132e:	a8 dc       	rcall	.-1712   	; 0xc80 <vPortYield>
    1330:	b0 cf       	rjmp	.-160    	; 0x1292 <xQueueReceive+0x36>
    1332:	c8 01       	movw	r24, r16
    1334:	f0 dd       	rcall	.-1056   	; 0xf16 <prvUnlockQueue>
    1336:	b1 d5       	rcall	.+2914   	; 0x1e9a <xTaskResumeAll>
    1338:	ac cf       	rjmp	.-168    	; 0x1292 <xQueueReceive+0x36>
    133a:	c8 01       	movw	r24, r16
    133c:	ec dd       	rcall	.-1064   	; 0xf16 <prvUnlockQueue>
    133e:	ad d5       	rcall	.+2906   	; 0x1e9a <xTaskResumeAll>
    1340:	c8 01       	movw	r24, r16
    1342:	65 dd       	rcall	.-1334   	; 0xe0e <prvIsQueueEmpty>
    1344:	88 23       	and	r24, r24
    1346:	09 f4       	brne	.+2      	; 0x134a <xQueueReceive+0xee>
    1348:	a4 cf       	rjmp	.-184    	; 0x1292 <xQueueReceive+0x36>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	df 90       	pop	r13
    1364:	cf 90       	pop	r12
    1366:	bf 90       	pop	r11
    1368:	af 90       	pop	r10
    136a:	9f 90       	pop	r9
    136c:	08 95       	ret

0000136e <xQueueSemaphoreTake>:
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	00 d0       	rcall	.+0      	; 0x1382 <xQueueSemaphoreTake+0x14>
    1382:	1f 92       	push	r1
    1384:	1f 92       	push	r1
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	8c 01       	movw	r16, r24
    138c:	7d 83       	std	Y+5, r23	; 0x05
    138e:	6c 83       	std	Y+4, r22	; 0x04
    1390:	b1 2c       	mov	r11, r1
    1392:	d1 2c       	mov	r13, r1
    1394:	cc 24       	eor	r12, r12
    1396:	c3 94       	inc	r12
    1398:	7c 01       	movw	r14, r24
    139a:	81 e1       	ldi	r24, 0x11	; 17
    139c:	e8 0e       	add	r14, r24
    139e:	f1 1c       	adc	r15, r1
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	0f 92       	push	r0
    13a6:	d8 01       	movw	r26, r16
    13a8:	5a 96       	adiw	r26, 0x1a	; 26
    13aa:	8c 91       	ld	r24, X
    13ac:	5a 97       	sbiw	r26, 0x1a	; 26
    13ae:	88 23       	and	r24, r24
    13b0:	d9 f0       	breq	.+54     	; 0x13e8 <xQueueSemaphoreTake+0x7a>
    13b2:	81 50       	subi	r24, 0x01	; 1
    13b4:	5a 96       	adiw	r26, 0x1a	; 26
    13b6:	8c 93       	st	X, r24
    13b8:	5a 97       	sbiw	r26, 0x1a	; 26
    13ba:	8d 91       	ld	r24, X+
    13bc:	9c 91       	ld	r25, X
    13be:	89 2b       	or	r24, r25
    13c0:	29 f4       	brne	.+10     	; 0x13cc <xQueueSemaphoreTake+0x5e>
    13c2:	0e 94 33 12 	call	0x2466	; 0x2466 <pvTaskIncrementMutexHeldCount>
    13c6:	f8 01       	movw	r30, r16
    13c8:	95 83       	std	Z+5, r25	; 0x05
    13ca:	84 83       	std	Z+4, r24	; 0x04
    13cc:	d8 01       	movw	r26, r16
    13ce:	18 96       	adiw	r26, 0x08	; 8
    13d0:	8c 91       	ld	r24, X
    13d2:	88 23       	and	r24, r24
    13d4:	29 f0       	breq	.+10     	; 0x13e0 <xQueueSemaphoreTake+0x72>
    13d6:	c8 01       	movw	r24, r16
    13d8:	08 96       	adiw	r24, 0x08	; 8
    13da:	a4 d6       	rcall	.+3400   	; 0x2124 <xTaskRemoveFromEventList>
    13dc:	81 11       	cpse	r24, r1
    13de:	50 dc       	rcall	.-1888   	; 0xc80 <vPortYield>
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	70 c0       	rjmp	.+224    	; 0x14c8 <xQueueSemaphoreTake+0x15a>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	89 2b       	or	r24, r25
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <xQueueSemaphoreTake+0x8a>
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	68 c0       	rjmp	.+208    	; 0x14c8 <xQueueSemaphoreTake+0x15a>
    13f8:	d1 10       	cpse	r13, r1
    13fa:	04 c0       	rjmp	.+8      	; 0x1404 <xQueueSemaphoreTake+0x96>
    13fc:	ce 01       	movw	r24, r28
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	d9 d6       	rcall	.+3506   	; 0x21b4 <vTaskInternalSetTimeOutState>
    1402:	dc 2c       	mov	r13, r12
    1404:	0f 90       	pop	r0
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	7e d4       	rcall	.+2300   	; 0x1d06 <vTaskSuspendAll>
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	0f 92       	push	r0
    1410:	f8 01       	movw	r30, r16
    1412:	85 8d       	ldd	r24, Z+29	; 0x1d
    1414:	8f 3f       	cpi	r24, 0xFF	; 255
    1416:	09 f4       	brne	.+2      	; 0x141a <xQueueSemaphoreTake+0xac>
    1418:	15 8e       	std	Z+29, r1	; 0x1d
    141a:	d8 01       	movw	r26, r16
    141c:	5e 96       	adiw	r26, 0x1e	; 30
    141e:	8c 91       	ld	r24, X
    1420:	5e 97       	sbiw	r26, 0x1e	; 30
    1422:	8f 3f       	cpi	r24, 0xFF	; 255
    1424:	11 f4       	brne	.+4      	; 0x142a <xQueueSemaphoreTake+0xbc>
    1426:	5e 96       	adiw	r26, 0x1e	; 30
    1428:	1c 92       	st	X, r1
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	be 01       	movw	r22, r28
    1430:	6c 5f       	subi	r22, 0xFC	; 252
    1432:	7f 4f       	sbci	r23, 0xFF	; 255
    1434:	ce 01       	movw	r24, r28
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	c8 d6       	rcall	.+3472   	; 0x21ca <xTaskCheckForTimeOut>
    143a:	81 11       	cpse	r24, r1
    143c:	21 c0       	rjmp	.+66     	; 0x1480 <xQueueSemaphoreTake+0x112>
    143e:	c8 01       	movw	r24, r16
    1440:	e6 dc       	rcall	.-1588   	; 0xe0e <prvIsQueueEmpty>
    1442:	88 23       	and	r24, r24
    1444:	c9 f0       	breq	.+50     	; 0x1478 <xQueueSemaphoreTake+0x10a>
    1446:	f8 01       	movw	r30, r16
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	89 2b       	or	r24, r25
    144e:	49 f4       	brne	.+18     	; 0x1462 <xQueueSemaphoreTake+0xf4>
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	84 81       	ldd	r24, Z+4	; 0x04
    1458:	95 81       	ldd	r25, Z+5	; 0x05
    145a:	03 d7       	rcall	.+3590   	; 0x2262 <xTaskPriorityInherit>
    145c:	b8 2e       	mov	r11, r24
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	6c 81       	ldd	r22, Y+4	; 0x04
    1464:	7d 81       	ldd	r23, Y+5	; 0x05
    1466:	c7 01       	movw	r24, r14
    1468:	34 d6       	rcall	.+3176   	; 0x20d2 <vTaskPlaceOnEventList>
    146a:	c8 01       	movw	r24, r16
    146c:	54 dd       	rcall	.-1368   	; 0xf16 <prvUnlockQueue>
    146e:	15 d5       	rcall	.+2602   	; 0x1e9a <xTaskResumeAll>
    1470:	81 11       	cpse	r24, r1
    1472:	96 cf       	rjmp	.-212    	; 0x13a0 <xQueueSemaphoreTake+0x32>
    1474:	05 dc       	rcall	.-2038   	; 0xc80 <vPortYield>
    1476:	94 cf       	rjmp	.-216    	; 0x13a0 <xQueueSemaphoreTake+0x32>
    1478:	c8 01       	movw	r24, r16
    147a:	4d dd       	rcall	.-1382   	; 0xf16 <prvUnlockQueue>
    147c:	0e d5       	rcall	.+2588   	; 0x1e9a <xTaskResumeAll>
    147e:	90 cf       	rjmp	.-224    	; 0x13a0 <xQueueSemaphoreTake+0x32>
    1480:	c8 01       	movw	r24, r16
    1482:	49 dd       	rcall	.-1390   	; 0xf16 <prvUnlockQueue>
    1484:	0a d5       	rcall	.+2580   	; 0x1e9a <xTaskResumeAll>
    1486:	c8 01       	movw	r24, r16
    1488:	c2 dc       	rcall	.-1660   	; 0xe0e <prvIsQueueEmpty>
    148a:	88 23       	and	r24, r24
    148c:	09 f4       	brne	.+2      	; 0x1490 <xQueueSemaphoreTake+0x122>
    148e:	88 cf       	rjmp	.-240    	; 0x13a0 <xQueueSemaphoreTake+0x32>
    1490:	bb 20       	and	r11, r11
    1492:	c9 f0       	breq	.+50     	; 0x14c6 <xQueueSemaphoreTake+0x158>
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	0f 92       	push	r0
    149a:	f8 01       	movw	r30, r16
    149c:	81 89       	ldd	r24, Z+17	; 0x11
    149e:	88 23       	and	r24, r24
    14a0:	39 f0       	breq	.+14     	; 0x14b0 <xQueueSemaphoreTake+0x142>
    14a2:	06 88       	ldd	r0, Z+22	; 0x16
    14a4:	f7 89       	ldd	r31, Z+23	; 0x17
    14a6:	e0 2d       	mov	r30, r0
    14a8:	80 81       	ld	r24, Z
    14aa:	64 e0       	ldi	r22, 0x04	; 4
    14ac:	68 1b       	sub	r22, r24
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <xQueueSemaphoreTake+0x144>
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	d8 01       	movw	r26, r16
    14b4:	14 96       	adiw	r26, 0x04	; 4
    14b6:	8d 91       	ld	r24, X+
    14b8:	9c 91       	ld	r25, X
    14ba:	15 97       	sbiw	r26, 0x05	; 5
    14bc:	84 d7       	rcall	.+3848   	; 0x23c6 <vTaskPriorityDisinheritAfterTimeout>
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <xQueueSemaphoreTake+0x15a>
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	08 95       	ret

000014e6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	0f 92       	push	r0
    14f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f4:	8f 3f       	cpi	r24, 0xFF	; 255
    14f6:	09 f4       	brne	.+2      	; 0x14fa <vQueueWaitForMessageRestricted+0x14>
    14f8:	1d 8e       	std	Y+29, r1	; 0x1d
    14fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14fc:	8f 3f       	cpi	r24, 0xFF	; 255
    14fe:	09 f4       	brne	.+2      	; 0x1502 <vQueueWaitForMessageRestricted+0x1c>
    1500:	1e 8e       	std	Y+30, r1	; 0x1e
    1502:	0f 90       	pop	r0
    1504:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1506:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1508:	81 11       	cpse	r24, r1
    150a:	03 c0       	rjmp	.+6      	; 0x1512 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    150c:	ce 01       	movw	r24, r28
    150e:	41 96       	adiw	r24, 0x11	; 17
    1510:	f1 d5       	rcall	.+3042   	; 0x20f4 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1512:	ce 01       	movw	r24, r28
    1514:	00 dd       	rcall	.-1536   	; 0xf16 <prvUnlockQueue>
    }
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    151c:	fc 01       	movw	r30, r24
    151e:	44 81       	ldd	r20, Z+4	; 0x04
    1520:	55 81       	ldd	r21, Z+5	; 0x05
    1522:	22 81       	ldd	r18, Z+2	; 0x02
    1524:	33 81       	ldd	r19, Z+3	; 0x03
    1526:	24 0f       	add	r18, r20
    1528:	35 1f       	adc	r19, r21
    152a:	80 81       	ld	r24, Z
    152c:	91 81       	ldd	r25, Z+1	; 0x01
    152e:	b9 01       	movw	r22, r18
    1530:	68 1b       	sub	r22, r24
    1532:	79 0b       	sbc	r23, r25
    1534:	cb 01       	movw	r24, r22
    1536:	64 17       	cp	r22, r20
    1538:	75 07       	cpc	r23, r21
    153a:	10 f0       	brcs	.+4      	; 0x1540 <prvBytesInBuffer+0x24>
    153c:	84 1b       	sub	r24, r20
    153e:	95 0b       	sbc	r25, r21
    1540:	08 95       	ret

00001542 <prvWriteBytesToBuffer>:
    1542:	af 92       	push	r10
    1544:	bf 92       	push	r11
    1546:	cf 92       	push	r12
    1548:	df 92       	push	r13
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	6c 01       	movw	r12, r24
    1558:	5b 01       	movw	r10, r22
    155a:	7a 01       	movw	r14, r20
    155c:	fc 01       	movw	r30, r24
    155e:	c2 81       	ldd	r28, Z+2	; 0x02
    1560:	d3 81       	ldd	r29, Z+3	; 0x03
    1562:	04 81       	ldd	r16, Z+4	; 0x04
    1564:	15 81       	ldd	r17, Z+5	; 0x05
    1566:	0c 1b       	sub	r16, r28
    1568:	1d 0b       	sbc	r17, r29
    156a:	40 17       	cp	r20, r16
    156c:	51 07       	cpc	r21, r17
    156e:	08 f4       	brcc	.+2      	; 0x1572 <prvWriteBytesToBuffer+0x30>
    1570:	8a 01       	movw	r16, r20
    1572:	f6 01       	movw	r30, r12
    1574:	84 85       	ldd	r24, Z+12	; 0x0c
    1576:	95 85       	ldd	r25, Z+13	; 0x0d
    1578:	a8 01       	movw	r20, r16
    157a:	b5 01       	movw	r22, r10
    157c:	8c 0f       	add	r24, r28
    157e:	9d 1f       	adc	r25, r29
    1580:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <memcpy>
    1584:	0e 15       	cp	r16, r14
    1586:	1f 05       	cpc	r17, r15
    1588:	58 f4       	brcc	.+22     	; 0x15a0 <prvWriteBytesToBuffer+0x5e>
    158a:	a7 01       	movw	r20, r14
    158c:	40 1b       	sub	r20, r16
    158e:	51 0b       	sbc	r21, r17
    1590:	b5 01       	movw	r22, r10
    1592:	60 0f       	add	r22, r16
    1594:	71 1f       	adc	r23, r17
    1596:	f6 01       	movw	r30, r12
    1598:	84 85       	ldd	r24, Z+12	; 0x0c
    159a:	95 85       	ldd	r25, Z+13	; 0x0d
    159c:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <memcpy>
    15a0:	ce 01       	movw	r24, r28
    15a2:	8e 0d       	add	r24, r14
    15a4:	9f 1d       	adc	r25, r15
    15a6:	f6 01       	movw	r30, r12
    15a8:	24 81       	ldd	r18, Z+4	; 0x04
    15aa:	35 81       	ldd	r19, Z+5	; 0x05
    15ac:	82 17       	cp	r24, r18
    15ae:	93 07       	cpc	r25, r19
    15b0:	10 f0       	brcs	.+4      	; 0x15b6 <prvWriteBytesToBuffer+0x74>
    15b2:	82 1b       	sub	r24, r18
    15b4:	93 0b       	sbc	r25, r19
    15b6:	f6 01       	movw	r30, r12
    15b8:	93 83       	std	Z+3, r25	; 0x03
    15ba:	82 83       	std	Z+2, r24	; 0x02
    15bc:	c7 01       	movw	r24, r14
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	df 90       	pop	r13
    15cc:	cf 90       	pop	r12
    15ce:	bf 90       	pop	r11
    15d0:	af 90       	pop	r10
    15d2:	08 95       	ret

000015d4 <prvWriteMessageToBuffer>:
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	1f 92       	push	r1
    15e6:	1f 92       	push	r1
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	5a 83       	std	Y+2, r21	; 0x02
    15ee:	49 83       	std	Y+1, r20	; 0x01
    15f0:	21 15       	cp	r18, r1
    15f2:	31 05       	cpc	r19, r1
    15f4:	c9 f0       	breq	.+50     	; 0x1628 <prvWriteMessageToBuffer+0x54>
    15f6:	6b 01       	movw	r12, r22
    15f8:	7c 01       	movw	r14, r24
    15fa:	fc 01       	movw	r30, r24
    15fc:	86 85       	ldd	r24, Z+14	; 0x0e
    15fe:	80 fd       	sbrc	r24, 0
    1600:	08 c0       	rjmp	.+16     	; 0x1612 <prvWriteMessageToBuffer+0x3e>
    1602:	ca 01       	movw	r24, r20
    1604:	24 17       	cp	r18, r20
    1606:	35 07       	cpc	r19, r21
    1608:	08 f4       	brcc	.+2      	; 0x160c <prvWriteMessageToBuffer+0x38>
    160a:	c9 01       	movw	r24, r18
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	11 c0       	rjmp	.+34     	; 0x1634 <prvWriteMessageToBuffer+0x60>
    1612:	20 17       	cp	r18, r16
    1614:	31 07       	cpc	r19, r17
    1616:	58 f0       	brcs	.+22     	; 0x162e <prvWriteMessageToBuffer+0x5a>
    1618:	42 e0       	ldi	r20, 0x02	; 2
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	be 01       	movw	r22, r28
    161e:	6f 5f       	subi	r22, 0xFF	; 255
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
    1622:	c7 01       	movw	r24, r14
    1624:	8e df       	rcall	.-228    	; 0x1542 <prvWriteBytesToBuffer>
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <prvWriteMessageToBuffer+0x60>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	08 c0       	rjmp	.+16     	; 0x163e <prvWriteMessageToBuffer+0x6a>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	05 c0       	rjmp	.+10     	; 0x163e <prvWriteMessageToBuffer+0x6a>
    1634:	49 81       	ldd	r20, Y+1	; 0x01
    1636:	5a 81       	ldd	r21, Y+2	; 0x02
    1638:	b6 01       	movw	r22, r12
    163a:	c7 01       	movw	r24, r14
    163c:	82 df       	rcall	.-252    	; 0x1542 <prvWriteBytesToBuffer>
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	08 95       	ret

00001654 <prvReadBytesFromBuffer>:
    1654:	af 92       	push	r10
    1656:	bf 92       	push	r11
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	7c 01       	movw	r14, r24
    166a:	5b 01       	movw	r10, r22
    166c:	e9 01       	movw	r28, r18
    166e:	42 17       	cp	r20, r18
    1670:	53 07       	cpc	r21, r19
    1672:	08 f4       	brcc	.+2      	; 0x1676 <prvReadBytesFromBuffer+0x22>
    1674:	ea 01       	movw	r28, r20
    1676:	20 97       	sbiw	r28, 0x00	; 0
    1678:	79 f1       	breq	.+94     	; 0x16d8 <prvReadBytesFromBuffer+0x84>
    167a:	f7 01       	movw	r30, r14
    167c:	00 81       	ld	r16, Z
    167e:	11 81       	ldd	r17, Z+1	; 0x01
    1680:	c4 80       	ldd	r12, Z+4	; 0x04
    1682:	d5 80       	ldd	r13, Z+5	; 0x05
    1684:	c0 1a       	sub	r12, r16
    1686:	d1 0a       	sbc	r13, r17
    1688:	cc 15       	cp	r28, r12
    168a:	dd 05       	cpc	r29, r13
    168c:	08 f4       	brcc	.+2      	; 0x1690 <prvReadBytesFromBuffer+0x3c>
    168e:	6e 01       	movw	r12, r28
    1690:	f7 01       	movw	r30, r14
    1692:	64 85       	ldd	r22, Z+12	; 0x0c
    1694:	75 85       	ldd	r23, Z+13	; 0x0d
    1696:	60 0f       	add	r22, r16
    1698:	71 1f       	adc	r23, r17
    169a:	a6 01       	movw	r20, r12
    169c:	c5 01       	movw	r24, r10
    169e:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <memcpy>
    16a2:	cc 16       	cp	r12, r28
    16a4:	dd 06       	cpc	r13, r29
    16a6:	58 f4       	brcc	.+22     	; 0x16be <prvReadBytesFromBuffer+0x6a>
    16a8:	ae 01       	movw	r20, r28
    16aa:	4c 19       	sub	r20, r12
    16ac:	5d 09       	sbc	r21, r13
    16ae:	f7 01       	movw	r30, r14
    16b0:	64 85       	ldd	r22, Z+12	; 0x0c
    16b2:	75 85       	ldd	r23, Z+13	; 0x0d
    16b4:	c5 01       	movw	r24, r10
    16b6:	8c 0d       	add	r24, r12
    16b8:	9d 1d       	adc	r25, r13
    16ba:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <memcpy>
    16be:	0c 0f       	add	r16, r28
    16c0:	1d 1f       	adc	r17, r29
    16c2:	f7 01       	movw	r30, r14
    16c4:	84 81       	ldd	r24, Z+4	; 0x04
    16c6:	95 81       	ldd	r25, Z+5	; 0x05
    16c8:	08 17       	cp	r16, r24
    16ca:	19 07       	cpc	r17, r25
    16cc:	10 f0       	brcs	.+4      	; 0x16d2 <prvReadBytesFromBuffer+0x7e>
    16ce:	08 1b       	sub	r16, r24
    16d0:	19 0b       	sbc	r17, r25
    16d2:	f7 01       	movw	r30, r14
    16d4:	11 83       	std	Z+1, r17	; 0x01
    16d6:	00 83       	st	Z, r16
    16d8:	ce 01       	movw	r24, r28
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	cf 90       	pop	r12
    16ea:	bf 90       	pop	r11
    16ec:	af 90       	pop	r10
    16ee:	08 95       	ret

000016f0 <xStreamBufferGenericCreate>:
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	eb 01       	movw	r28, r22
    16fc:	11 e0       	ldi	r17, 0x01	; 1
    16fe:	41 30       	cpi	r20, 0x01	; 1
    1700:	09 f0       	breq	.+2      	; 0x1704 <xStreamBufferGenericCreate+0x14>
    1702:	10 e0       	ldi	r17, 0x00	; 0
    1704:	20 97       	sbiw	r28, 0x00	; 0
    1706:	11 f4       	brne	.+4      	; 0x170c <xStreamBufferGenericCreate+0x1c>
    1708:	c1 e0       	ldi	r28, 0x01	; 1
    170a:	d0 e0       	ldi	r29, 0x00	; 0
    170c:	7c 01       	movw	r14, r24
    170e:	2f ef       	ldi	r18, 0xFF	; 255
    1710:	e2 1a       	sub	r14, r18
    1712:	f2 0a       	sbc	r15, r18
    1714:	41 96       	adiw	r24, 0x11	; 17
    1716:	59 d9       	rcall	.-3406   	; 0x9ca <pvPortMalloc>
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	81 f0       	breq	.+32     	; 0x173c <xStreamBufferGenericCreate+0x4c>
    171c:	20 e1       	ldi	r18, 0x10	; 16
    171e:	fc 01       	movw	r30, r24
    1720:	11 92       	st	Z+, r1
    1722:	2a 95       	dec	r18
    1724:	e9 f7       	brne	.-6      	; 0x1720 <xStreamBufferGenericCreate+0x30>
    1726:	9c 01       	movw	r18, r24
    1728:	20 5f       	subi	r18, 0xF0	; 240
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	fc 01       	movw	r30, r24
    172e:	35 87       	std	Z+13, r19	; 0x0d
    1730:	24 87       	std	Z+12, r18	; 0x0c
    1732:	f5 82       	std	Z+5, r15	; 0x05
    1734:	e4 82       	std	Z+4, r14	; 0x04
    1736:	d7 83       	std	Z+7, r29	; 0x07
    1738:	c6 83       	std	Z+6, r28	; 0x06
    173a:	16 87       	std	Z+14, r17	; 0x0e
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	08 95       	ret

00001748 <xStreamBufferReset>:
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	fc 01       	movw	r30, r24
    174e:	27 85       	ldd	r18, Z+15	; 0x0f
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	0f 92       	push	r0
    1756:	80 85       	ldd	r24, Z+8	; 0x08
    1758:	91 85       	ldd	r25, Z+9	; 0x09
    175a:	89 2b       	or	r24, r25
    175c:	d1 f4       	brne	.+52     	; 0x1792 <xStreamBufferReset+0x4a>
    175e:	82 85       	ldd	r24, Z+10	; 0x0a
    1760:	93 85       	ldd	r25, Z+11	; 0x0b
    1762:	89 2b       	or	r24, r25
    1764:	c1 f4       	brne	.+48     	; 0x1796 <xStreamBufferReset+0x4e>
    1766:	86 85       	ldd	r24, Z+14	; 0x0e
    1768:	46 81       	ldd	r20, Z+6	; 0x06
    176a:	57 81       	ldd	r21, Z+7	; 0x07
    176c:	64 81       	ldd	r22, Z+4	; 0x04
    176e:	75 81       	ldd	r23, Z+5	; 0x05
    1770:	a4 85       	ldd	r26, Z+12	; 0x0c
    1772:	b5 85       	ldd	r27, Z+13	; 0x0d
    1774:	90 e1       	ldi	r25, 0x10	; 16
    1776:	ef 01       	movw	r28, r30
    1778:	19 92       	st	Y+, r1
    177a:	9a 95       	dec	r25
    177c:	e9 f7       	brne	.-6      	; 0x1778 <xStreamBufferReset+0x30>
    177e:	b5 87       	std	Z+13, r27	; 0x0d
    1780:	a4 87       	std	Z+12, r26	; 0x0c
    1782:	75 83       	std	Z+5, r23	; 0x05
    1784:	64 83       	std	Z+4, r22	; 0x04
    1786:	57 83       	std	Z+7, r21	; 0x07
    1788:	46 83       	std	Z+6, r20	; 0x06
    178a:	86 87       	std	Z+14, r24	; 0x0e
    178c:	27 87       	std	Z+15, r18	; 0x0f
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	03 c0       	rjmp	.+6      	; 0x1798 <xStreamBufferReset+0x50>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <xStreamBufferReset+0x50>
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <xStreamBufferSpacesAvailable>:
    17a2:	fc 01       	movw	r30, r24
    17a4:	24 81       	ldd	r18, Z+4	; 0x04
    17a6:	35 81       	ldd	r19, Z+5	; 0x05
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
    17ac:	42 81       	ldd	r20, Z+2	; 0x02
    17ae:	53 81       	ldd	r21, Z+3	; 0x03
    17b0:	82 0f       	add	r24, r18
    17b2:	93 1f       	adc	r25, r19
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	84 1b       	sub	r24, r20
    17b8:	95 0b       	sbc	r25, r21
    17ba:	82 17       	cp	r24, r18
    17bc:	93 07       	cpc	r25, r19
    17be:	10 f0       	brcs	.+4      	; 0x17c4 <xStreamBufferSpacesAvailable+0x22>
    17c0:	82 1b       	sub	r24, r18
    17c2:	93 0b       	sbc	r25, r19
    17c4:	08 95       	ret

000017c6 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    17c6:	af 92       	push	r10
    17c8:	bf 92       	push	r11
    17ca:	cf 92       	push	r12
    17cc:	df 92       	push	r13
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	ec 01       	movw	r28, r24
    17dc:	5b 01       	movw	r10, r22
    17de:	6a 01       	movw	r12, r20
    17e0:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17e4:	80 ff       	sbrs	r24, 0
    17e6:	04 c0       	rjmp	.+8      	; 0x17f0 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17e8:	8a 01       	movw	r16, r20
    17ea:	0e 5f       	subi	r16, 0xFE	; 254
    17ec:	1f 4f       	sbci	r17, 0xFF	; 255
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    17f0:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    17f2:	ce 01       	movw	r24, r28
    17f4:	d6 df       	rcall	.-84     	; 0x17a2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    17f6:	9c 01       	movw	r18, r24
    17f8:	a6 01       	movw	r20, r12
    17fa:	b5 01       	movw	r22, r10
    17fc:	ce 01       	movw	r24, r28
    17fe:	ea de       	rcall	.-556    	; 0x15d4 <prvWriteMessageToBuffer>
    1800:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1802:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1804:	b1 f0       	breq	.+44     	; 0x1832 <xStreamBufferSendFromISR+0x6c>
    1806:	ce 01       	movw	r24, r28
    1808:	89 de       	rcall	.-750    	; 0x151c <prvBytesInBuffer>
    180a:	2e 81       	ldd	r18, Y+6	; 0x06
    180c:	3f 81       	ldd	r19, Y+7	; 0x07
    180e:	82 17       	cp	r24, r18
    1810:	93 07       	cpc	r25, r19
    1812:	78 f0       	brcs	.+30     	; 0x1832 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1814:	88 85       	ldd	r24, Y+8	; 0x08
    1816:	99 85       	ldd	r25, Y+9	; 0x09
    1818:	89 2b       	or	r24, r25
    181a:	59 f0       	breq	.+22     	; 0x1832 <xStreamBufferSendFromISR+0x6c>
    181c:	88 85       	ldd	r24, Y+8	; 0x08
    181e:	99 85       	ldd	r25, Y+9	; 0x09
    1820:	00 e0       	ldi	r16, 0x00	; 0
    1822:	10 e0       	ldi	r17, 0x00	; 0
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	ba 01       	movw	r22, r20
    182c:	2f d7       	rcall	.+3678   	; 0x268c <xTaskGenericNotifyFromISR>
    182e:	19 86       	std	Y+9, r1	; 0x09
    1830:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1832:	c6 01       	movw	r24, r12
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	bf 90       	pop	r11
    1846:	af 90       	pop	r10
    1848:	08 95       	ret

0000184a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    184a:	6f 92       	push	r6
    184c:	7f 92       	push	r7
    184e:	8f 92       	push	r8
    1850:	9f 92       	push	r9
    1852:	af 92       	push	r10
    1854:	bf 92       	push	r11
    1856:	cf 92       	push	r12
    1858:	df 92       	push	r13
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	1f 92       	push	r1
    1868:	1f 92       	push	r1
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	6c 01       	movw	r12, r24
    1870:	3b 01       	movw	r6, r22
    1872:	4a 01       	movw	r8, r20
    1874:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1876:	fc 01       	movw	r30, r24
    1878:	86 85       	ldd	r24, Z+14	; 0x0e
    187a:	80 fd       	sbrc	r24, 0
    187c:	03 c0       	rjmp	.+6      	; 0x1884 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    187e:	a1 2c       	mov	r10, r1
    1880:	b1 2c       	mov	r11, r1
    1882:	04 c0       	rjmp	.+8      	; 0x188c <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1884:	68 94       	set
    1886:	aa 24       	eor	r10, r10
    1888:	a1 f8       	bld	r10, 1
    188a:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    188c:	e1 14       	cp	r14, r1
    188e:	f1 04       	cpc	r15, r1
    1890:	29 f1       	breq	.+74     	; 0x18dc <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1898:	c6 01       	movw	r24, r12
    189a:	40 de       	rcall	.-896    	; 0x151c <prvBytesInBuffer>
    189c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    189e:	a8 16       	cp	r10, r24
    18a0:	b9 06       	cpc	r11, r25
    18a2:	38 f0       	brcs	.+14     	; 0x18b2 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    18a8:	81 d7       	rcall	.+3842   	; 0x27ac <xTaskNotifyStateClear>
    18aa:	c8 d4       	rcall	.+2448   	; 0x223c <xTaskGetCurrentTaskHandle>
    18ac:	f6 01       	movw	r30, r12
    18ae:	91 87       	std	Z+9, r25	; 0x09
    18b0:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    18b2:	0f 90       	pop	r0
    18b4:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    18b6:	a0 16       	cp	r10, r16
    18b8:	b1 06       	cpc	r11, r17
    18ba:	b0 f0       	brcs	.+44     	; 0x18e8 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    18bc:	00 e0       	ldi	r16, 0x00	; 0
    18be:	10 e0       	ldi	r17, 0x00	; 0
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	a9 01       	movw	r20, r18
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	cb 01       	movw	r24, r22
    18cc:	de d5       	rcall	.+3004   	; 0x248a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    18ce:	f6 01       	movw	r30, r12
    18d0:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18d2:	10 86       	std	Z+8, r1	; 0x08
    18d4:	c6 01       	movw	r24, r12
    18d6:	22 de       	rcall	.-956    	; 0x151c <prvBytesInBuffer>
    18d8:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    18da:	03 c0       	rjmp	.+6      	; 0x18e2 <xStreamBufferReceive+0x98>
    18dc:	c6 01       	movw	r24, r12
    18de:	1e de       	rcall	.-964    	; 0x151c <prvBytesInBuffer>
    18e0:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    18e2:	a0 16       	cp	r10, r16
    18e4:	b1 06       	cpc	r11, r17
    18e6:	b8 f5       	brcc	.+110    	; 0x1956 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    18e8:	a1 14       	cp	r10, r1
    18ea:	b1 04       	cpc	r11, r1
    18ec:	c1 f0       	breq	.+48     	; 0x191e <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    18ee:	f6 01       	movw	r30, r12
    18f0:	e0 80       	ld	r14, Z
    18f2:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    18f4:	98 01       	movw	r18, r16
    18f6:	a5 01       	movw	r20, r10
    18f8:	be 01       	movw	r22, r28
    18fa:	6f 5f       	subi	r22, 0xFF	; 255
    18fc:	7f 4f       	sbci	r23, 0xFF	; 255
    18fe:	c6 01       	movw	r24, r12
    1900:	a9 de       	rcall	.-686    	; 0x1654 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1906:	0a 19       	sub	r16, r10
    1908:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    190a:	88 16       	cp	r8, r24
    190c:	99 06       	cpc	r9, r25
    190e:	30 f4       	brcc	.+12     	; 0x191c <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1910:	f6 01       	movw	r30, r12
    1912:	f1 82       	std	Z+1, r15	; 0x01
    1914:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1916:	81 2c       	mov	r8, r1
    1918:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    191a:	01 c0       	rjmp	.+2      	; 0x191e <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    191c:	4c 01       	movw	r8, r24
    191e:	98 01       	movw	r18, r16
    1920:	a4 01       	movw	r20, r8
    1922:	b3 01       	movw	r22, r6
    1924:	c6 01       	movw	r24, r12
    1926:	96 de       	rcall	.-724    	; 0x1654 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1928:	7c 01       	movw	r14, r24
    192a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    192c:	b1 f0       	breq	.+44     	; 0x195a <xStreamBufferReceive+0x110>
    192e:	eb d1       	rcall	.+982    	; 0x1d06 <vTaskSuspendAll>
    1930:	f6 01       	movw	r30, r12
    1932:	82 85       	ldd	r24, Z+10	; 0x0a
    1934:	93 85       	ldd	r25, Z+11	; 0x0b
    1936:	89 2b       	or	r24, r25
    1938:	61 f0       	breq	.+24     	; 0x1952 <xStreamBufferReceive+0x108>
    193a:	82 85       	ldd	r24, Z+10	; 0x0a
    193c:	93 85       	ldd	r25, Z+11	; 0x0b
    193e:	00 e0       	ldi	r16, 0x00	; 0
    1940:	10 e0       	ldi	r17, 0x00	; 0
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	ba 01       	movw	r22, r20
    194a:	22 d6       	rcall	.+3140   	; 0x2590 <xTaskGenericNotify>
    194c:	f6 01       	movw	r30, r12
    194e:	13 86       	std	Z+11, r1	; 0x0b
    1950:	12 86       	std	Z+10, r1	; 0x0a
    1952:	a3 d2       	rcall	.+1350   	; 0x1e9a <xTaskResumeAll>
    1954:	02 c0       	rjmp	.+4      	; 0x195a <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1956:	e1 2c       	mov	r14, r1
    1958:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    195a:	c7 01       	movw	r24, r14
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	df 90       	pop	r13
    196e:	cf 90       	pop	r12
    1970:	bf 90       	pop	r11
    1972:	af 90       	pop	r10
    1974:	9f 90       	pop	r9
    1976:	8f 90       	pop	r8
    1978:	7f 90       	pop	r7
    197a:	6f 90       	pop	r6
    197c:	08 95       	ret

0000197e <prvResetNextTaskUnblockTime>:
    197e:	e0 91 e0 07 	lds	r30, 0x07E0	; 0x8007e0 <pxDelayedTaskList>
    1982:	f0 91 e1 07 	lds	r31, 0x07E1	; 0x8007e1 <pxDelayedTaskList+0x1>
    1986:	80 81       	ld	r24, Z
    1988:	81 11       	cpse	r24, r1
    198a:	07 c0       	rjmp	.+14     	; 0x199a <prvResetNextTaskUnblockTime+0x1c>
    198c:	8f ef       	ldi	r24, 0xFF	; 255
    198e:	9f ef       	ldi	r25, 0xFF	; 255
    1990:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1994:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xNextTaskUnblockTime>
    1998:	08 95       	ret
    199a:	e0 91 e0 07 	lds	r30, 0x07E0	; 0x8007e0 <pxDelayedTaskList>
    199e:	f0 91 e1 07 	lds	r31, 0x07E1	; 0x8007e1 <pxDelayedTaskList+0x1>
    19a2:	05 80       	ldd	r0, Z+5	; 0x05
    19a4:	f6 81       	ldd	r31, Z+6	; 0x06
    19a6:	e0 2d       	mov	r30, r0
    19a8:	06 80       	ldd	r0, Z+6	; 0x06
    19aa:	f7 81       	ldd	r31, Z+7	; 0x07
    19ac:	e0 2d       	mov	r30, r0
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	93 81       	ldd	r25, Z+3	; 0x03
    19b2:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    19b6:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xNextTaskUnblockTime>
    19ba:	08 95       	ret

000019bc <prvAddCurrentTaskToDelayedList>:
    19bc:	ff 92       	push	r15
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
    19c8:	f6 2e       	mov	r15, r22
    19ca:	00 91 bf 07 	lds	r16, 0x07BF	; 0x8007bf <xTickCount>
    19ce:	10 91 c0 07 	lds	r17, 0x07C0	; 0x8007c0 <xTickCount+0x1>
    19d2:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <pxCurrentTCB>
    19d6:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    19da:	02 96       	adiw	r24, 0x02	; 2
    19dc:	7c d8       	rcall	.-3848   	; 0xad6 <uxListRemove>
    19de:	cf 3f       	cpi	r28, 0xFF	; 255
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	d8 07       	cpc	r29, r24
    19e4:	61 f4       	brne	.+24     	; 0x19fe <prvAddCurrentTaskToDelayedList+0x42>
    19e6:	ff 20       	and	r15, r15
    19e8:	51 f0       	breq	.+20     	; 0x19fe <prvAddCurrentTaskToDelayedList+0x42>
    19ea:	60 91 18 08 	lds	r22, 0x0818	; 0x800818 <pxCurrentTCB>
    19ee:	70 91 19 08 	lds	r23, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    19f2:	6e 5f       	subi	r22, 0xFE	; 254
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	82 ec       	ldi	r24, 0xC2	; 194
    19f8:	97 e0       	ldi	r25, 0x07	; 7
    19fa:	1b d8       	rcall	.-4042   	; 0xa32 <vListInsertEnd>
    19fc:	2d c0       	rjmp	.+90     	; 0x1a58 <prvAddCurrentTaskToDelayedList+0x9c>
    19fe:	c0 0f       	add	r28, r16
    1a00:	d1 1f       	adc	r29, r17
    1a02:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    1a06:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1a0a:	d3 83       	std	Z+3, r29	; 0x03
    1a0c:	c2 83       	std	Z+2, r28	; 0x02
    1a0e:	c0 17       	cp	r28, r16
    1a10:	d1 07       	cpc	r29, r17
    1a12:	60 f4       	brcc	.+24     	; 0x1a2c <prvAddCurrentTaskToDelayedList+0x70>
    1a14:	60 91 18 08 	lds	r22, 0x0818	; 0x800818 <pxCurrentTCB>
    1a18:	70 91 19 08 	lds	r23, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1a1c:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <pxOverflowDelayedTaskList>
    1a20:	90 91 df 07 	lds	r25, 0x07DF	; 0x8007df <pxOverflowDelayedTaskList+0x1>
    1a24:	6e 5f       	subi	r22, 0xFE	; 254
    1a26:	7f 4f       	sbci	r23, 0xFF	; 255
    1a28:	25 d8       	rcall	.-4022   	; 0xa74 <vListInsert>
    1a2a:	16 c0       	rjmp	.+44     	; 0x1a58 <prvAddCurrentTaskToDelayedList+0x9c>
    1a2c:	60 91 18 08 	lds	r22, 0x0818	; 0x800818 <pxCurrentTCB>
    1a30:	70 91 19 08 	lds	r23, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1a34:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxDelayedTaskList>
    1a38:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <pxDelayedTaskList+0x1>
    1a3c:	6e 5f       	subi	r22, 0xFE	; 254
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a40:	19 d8       	rcall	.-4046   	; 0xa74 <vListInsert>
    1a42:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xNextTaskUnblockTime>
    1a46:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1a4a:	c8 17       	cp	r28, r24
    1a4c:	d9 07       	cpc	r29, r25
    1a4e:	20 f4       	brcc	.+8      	; 0x1a58 <prvAddCurrentTaskToDelayedList+0x9c>
    1a50:	d0 93 b8 07 	sts	0x07B8, r29	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1a54:	c0 93 b7 07 	sts	0x07B7, r28	; 0x8007b7 <xNextTaskUnblockTime>
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	08 95       	ret

00001a64 <xTaskCreate>:
    1a64:	4f 92       	push	r4
    1a66:	5f 92       	push	r5
    1a68:	6f 92       	push	r6
    1a6a:	7f 92       	push	r7
    1a6c:	8f 92       	push	r8
    1a6e:	9f 92       	push	r9
    1a70:	af 92       	push	r10
    1a72:	bf 92       	push	r11
    1a74:	cf 92       	push	r12
    1a76:	df 92       	push	r13
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	4c 01       	movw	r8, r24
    1a84:	6b 01       	movw	r12, r22
    1a86:	5a 01       	movw	r10, r20
    1a88:	29 01       	movw	r4, r18
    1a8a:	ca 01       	movw	r24, r20
    1a8c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <pvPortMalloc>
    1a90:	3c 01       	movw	r6, r24
    1a92:	89 2b       	or	r24, r25
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <xTaskCreate+0x34>
    1a96:	f3 c0       	rjmp	.+486    	; 0x1c7e <xTaskCreate+0x21a>
    1a98:	8c e2       	ldi	r24, 0x2C	; 44
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <pvPortMalloc>
    1aa0:	ec 01       	movw	r28, r24
    1aa2:	89 2b       	or	r24, r25
    1aa4:	99 f0       	breq	.+38     	; 0x1acc <xTaskCreate+0x68>
    1aa6:	78 8e       	std	Y+24, r7	; 0x18
    1aa8:	6f 8a       	std	Y+23, r6	; 0x17
    1aaa:	a5 01       	movw	r20, r10
    1aac:	65 ea       	ldi	r22, 0xA5	; 165
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	c3 01       	movw	r24, r6
    1ab2:	0e 94 d6 26 	call	0x4dac	; 0x4dac <memset>
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	a8 1a       	sub	r10, r24
    1aba:	b1 08       	sbc	r11, r1
    1abc:	8f 89       	ldd	r24, Y+23	; 0x17
    1abe:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac0:	a8 0e       	add	r10, r24
    1ac2:	b9 1e       	adc	r11, r25
    1ac4:	c1 14       	cp	r12, r1
    1ac6:	d1 04       	cpc	r13, r1
    1ac8:	29 f4       	brne	.+10     	; 0x1ad4 <xTaskCreate+0x70>
    1aca:	20 c0       	rjmp	.+64     	; 0x1b0c <xTaskCreate+0xa8>
    1acc:	c3 01       	movw	r24, r6
    1ace:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <vPortFree>
    1ad2:	d5 c0       	rjmp	.+426    	; 0x1c7e <xTaskCreate+0x21a>
    1ad4:	d6 01       	movw	r26, r12
    1ad6:	8c 91       	ld	r24, X
    1ad8:	89 8f       	std	Y+25, r24	; 0x19
    1ada:	8c 91       	ld	r24, X
    1adc:	88 23       	and	r24, r24
    1ade:	a1 f0       	breq	.+40     	; 0x1b08 <xTaskCreate+0xa4>
    1ae0:	ae 01       	movw	r20, r28
    1ae2:	46 5e       	subi	r20, 0xE6	; 230
    1ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae6:	f6 01       	movw	r30, r12
    1ae8:	31 96       	adiw	r30, 0x01	; 1
    1aea:	b8 e0       	ldi	r27, 0x08	; 8
    1aec:	cb 0e       	add	r12, r27
    1aee:	d1 1c       	adc	r13, r1
    1af0:	cf 01       	movw	r24, r30
    1af2:	21 91       	ld	r18, Z+
    1af4:	da 01       	movw	r26, r20
    1af6:	2d 93       	st	X+, r18
    1af8:	ad 01       	movw	r20, r26
    1afa:	dc 01       	movw	r26, r24
    1afc:	8c 91       	ld	r24, X
    1afe:	88 23       	and	r24, r24
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <xTaskCreate+0xa4>
    1b02:	ec 15       	cp	r30, r12
    1b04:	fd 05       	cpc	r31, r13
    1b06:	a1 f7       	brne	.-24     	; 0x1af0 <xTaskCreate+0x8c>
    1b08:	18 a2       	std	Y+32, r1	; 0x20
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <xTaskCreate+0xaa>
    1b0c:	19 8e       	std	Y+25, r1	; 0x19
    1b0e:	04 30       	cpi	r16, 0x04	; 4
    1b10:	08 f0       	brcs	.+2      	; 0x1b14 <xTaskCreate+0xb0>
    1b12:	03 e0       	ldi	r16, 0x03	; 3
    1b14:	0e 8b       	std	Y+22, r16	; 0x16
    1b16:	0b a3       	std	Y+35, r16	; 0x23
    1b18:	1c a2       	std	Y+36, r1	; 0x24
    1b1a:	6e 01       	movw	r12, r28
    1b1c:	b2 e0       	ldi	r27, 0x02	; 2
    1b1e:	cb 0e       	add	r12, r27
    1b20:	d1 1c       	adc	r13, r1
    1b22:	c6 01       	movw	r24, r12
    1b24:	0e 94 15 05 	call	0xa2a	; 0xa2a <vListInitialiseItem>
    1b28:	ce 01       	movw	r24, r28
    1b2a:	0c 96       	adiw	r24, 0x0c	; 12
    1b2c:	0e 94 15 05 	call	0xa2a	; 0xa2a <vListInitialiseItem>
    1b30:	d9 87       	std	Y+9, r29	; 0x09
    1b32:	c8 87       	std	Y+8, r28	; 0x08
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	80 1b       	sub	r24, r16
    1b3a:	91 09       	sbc	r25, r1
    1b3c:	9d 87       	std	Y+13, r25	; 0x0d
    1b3e:	8c 87       	std	Y+12, r24	; 0x0c
    1b40:	db 8b       	std	Y+19, r29	; 0x13
    1b42:	ca 8b       	std	Y+18, r28	; 0x12
    1b44:	1e a2       	std	Y+38, r1	; 0x26
    1b46:	1d a2       	std	Y+37, r1	; 0x25
    1b48:	1f a2       	std	Y+39, r1	; 0x27
    1b4a:	18 a6       	std	Y+40, r1	; 0x28
    1b4c:	19 a6       	std	Y+41, r1	; 0x29
    1b4e:	1a a6       	std	Y+42, r1	; 0x2a
    1b50:	1b a6       	std	Y+43, r1	; 0x2b
    1b52:	a2 01       	movw	r20, r4
    1b54:	b4 01       	movw	r22, r8
    1b56:	c5 01       	movw	r24, r10
    1b58:	0e 94 92 05 	call	0xb24	; 0xb24 <pxPortInitialiseStack>
    1b5c:	99 83       	std	Y+1, r25	; 0x01
    1b5e:	88 83       	st	Y, r24
    1b60:	e1 14       	cp	r14, r1
    1b62:	f1 04       	cpc	r15, r1
    1b64:	19 f0       	breq	.+6      	; 0x1b6c <xTaskCreate+0x108>
    1b66:	f7 01       	movw	r30, r14
    1b68:	d1 83       	std	Z+1, r29	; 0x01
    1b6a:	c0 83       	st	Z, r28
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	0f 92       	push	r0
    1b72:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <uxCurrentNumberOfTasks>
    1b76:	8f 5f       	subi	r24, 0xFF	; 255
    1b78:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <uxCurrentNumberOfTasks>
    1b7c:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <pxCurrentTCB>
    1b80:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1b84:	89 2b       	or	r24, r25
    1b86:	d1 f5       	brne	.+116    	; 0x1bfc <xTaskCreate+0x198>
    1b88:	d0 93 19 08 	sts	0x0819, r29	; 0x800819 <pxCurrentTCB+0x1>
    1b8c:	c0 93 18 08 	sts	0x0818, r28	; 0x800818 <pxCurrentTCB>
    1b90:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <uxCurrentNumberOfTasks>
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <xTaskCreate+0x136>
    1b98:	41 c0       	rjmp	.+130    	; 0x1c1c <xTaskCreate+0x1b8>
    1b9a:	84 ef       	ldi	r24, 0xF4	; 244
    1b9c:	97 e0       	ldi	r25, 0x07	; 7
    1b9e:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    1ba2:	8d ef       	ldi	r24, 0xFD	; 253
    1ba4:	97 e0       	ldi	r25, 0x07	; 7
    1ba6:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    1baa:	86 e0       	ldi	r24, 0x06	; 6
    1bac:	98 e0       	ldi	r25, 0x08	; 8
    1bae:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    1bb2:	8f e0       	ldi	r24, 0x0F	; 15
    1bb4:	98 e0       	ldi	r25, 0x08	; 8
    1bb6:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    1bba:	8b ee       	ldi	r24, 0xEB	; 235
    1bbc:	97 e0       	ldi	r25, 0x07	; 7
    1bbe:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    1bc2:	82 ee       	ldi	r24, 0xE2	; 226
    1bc4:	97 e0       	ldi	r25, 0x07	; 7
    1bc6:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    1bca:	85 ed       	ldi	r24, 0xD5	; 213
    1bcc:	97 e0       	ldi	r25, 0x07	; 7
    1bce:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    1bd2:	8c ec       	ldi	r24, 0xCC	; 204
    1bd4:	97 e0       	ldi	r25, 0x07	; 7
    1bd6:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    1bda:	82 ec       	ldi	r24, 0xC2	; 194
    1bdc:	97 e0       	ldi	r25, 0x07	; 7
    1bde:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    1be2:	8b ee       	ldi	r24, 0xEB	; 235
    1be4:	97 e0       	ldi	r25, 0x07	; 7
    1be6:	90 93 e1 07 	sts	0x07E1, r25	; 0x8007e1 <pxDelayedTaskList+0x1>
    1bea:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <pxDelayedTaskList>
    1bee:	82 ee       	ldi	r24, 0xE2	; 226
    1bf0:	97 e0       	ldi	r25, 0x07	; 7
    1bf2:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <pxOverflowDelayedTaskList+0x1>
    1bf6:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <pxOverflowDelayedTaskList>
    1bfa:	10 c0       	rjmp	.+32     	; 0x1c1c <xTaskCreate+0x1b8>
    1bfc:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <xSchedulerRunning>
    1c00:	81 11       	cpse	r24, r1
    1c02:	0c c0       	rjmp	.+24     	; 0x1c1c <xTaskCreate+0x1b8>
    1c04:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    1c08:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1c0c:	96 89       	ldd	r25, Z+22	; 0x16
    1c0e:	8e 89       	ldd	r24, Y+22	; 0x16
    1c10:	89 17       	cp	r24, r25
    1c12:	20 f0       	brcs	.+8      	; 0x1c1c <xTaskCreate+0x1b8>
    1c14:	d0 93 19 08 	sts	0x0819, r29	; 0x800819 <pxCurrentTCB+0x1>
    1c18:	c0 93 18 08 	sts	0x0818, r28	; 0x800818 <pxCurrentTCB>
    1c1c:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <uxTaskNumber>
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <uxTaskNumber>
    1c26:	89 a3       	std	Y+33, r24	; 0x21
    1c28:	8e 89       	ldd	r24, Y+22	; 0x16
    1c2a:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <uxTopReadyPriority>
    1c2e:	98 17       	cp	r25, r24
    1c30:	10 f4       	brcc	.+4      	; 0x1c36 <xTaskCreate+0x1d2>
    1c32:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxTopReadyPriority>
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 01       	movw	r18, r24
    1c3a:	22 0f       	add	r18, r18
    1c3c:	33 1f       	adc	r19, r19
    1c3e:	22 0f       	add	r18, r18
    1c40:	33 1f       	adc	r19, r19
    1c42:	22 0f       	add	r18, r18
    1c44:	33 1f       	adc	r19, r19
    1c46:	82 0f       	add	r24, r18
    1c48:	93 1f       	adc	r25, r19
    1c4a:	b6 01       	movw	r22, r12
    1c4c:	8c 50       	subi	r24, 0x0C	; 12
    1c4e:	98 4f       	sbci	r25, 0xF8	; 248
    1c50:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <xSchedulerRunning>
    1c5c:	88 23       	and	r24, r24
    1c5e:	59 f0       	breq	.+22     	; 0x1c76 <xTaskCreate+0x212>
    1c60:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    1c64:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1c68:	96 89       	ldd	r25, Z+22	; 0x16
    1c6a:	8e 89       	ldd	r24, Y+22	; 0x16
    1c6c:	98 17       	cp	r25, r24
    1c6e:	28 f4       	brcc	.+10     	; 0x1c7a <xTaskCreate+0x216>
    1c70:	07 d8       	rcall	.-4082   	; 0xc80 <vPortYield>
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <xTaskCreate+0x21c>
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	03 c0       	rjmp	.+6      	; 0x1c80 <xTaskCreate+0x21c>
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	01 c0       	rjmp	.+2      	; 0x1c80 <xTaskCreate+0x21c>
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	0f 91       	pop	r16
    1c86:	ff 90       	pop	r15
    1c88:	ef 90       	pop	r14
    1c8a:	df 90       	pop	r13
    1c8c:	cf 90       	pop	r12
    1c8e:	bf 90       	pop	r11
    1c90:	af 90       	pop	r10
    1c92:	9f 90       	pop	r9
    1c94:	8f 90       	pop	r8
    1c96:	7f 90       	pop	r7
    1c98:	6f 90       	pop	r6
    1c9a:	5f 90       	pop	r5
    1c9c:	4f 90       	pop	r4
    1c9e:	08 95       	ret

00001ca0 <vTaskStartScheduler>:
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	0f 2e       	mov	r0, r31
    1ca8:	f5 eb       	ldi	r31, 0xB5	; 181
    1caa:	ef 2e       	mov	r14, r31
    1cac:	f7 e0       	ldi	r31, 0x07	; 7
    1cae:	ff 2e       	mov	r15, r31
    1cb0:	f0 2d       	mov	r31, r0
    1cb2:	00 e0       	ldi	r16, 0x00	; 0
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 ec       	ldi	r20, 0xC0	; 192
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	68 ec       	ldi	r22, 0xC8	; 200
    1cbe:	74 e0       	ldi	r23, 0x04	; 4
    1cc0:	8d ec       	ldi	r24, 0xCD	; 205
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	cf de       	rcall	.-610    	; 0x1a64 <xTaskCreate>
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	d1 f4       	brne	.+52     	; 0x1cfe <vTaskStartScheduler+0x5e>
    1cca:	dc d5       	rcall	.+3000   	; 0x2884 <xTimerCreateTimerTask>
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	b9 f4       	brne	.+46     	; 0x1cfe <vTaskStartScheduler+0x5e>
    1cd0:	f8 94       	cli
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	9f ef       	ldi	r25, 0xFF	; 255
    1cd6:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1cda:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xNextTaskUnblockTime>
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <xSchedulerRunning>
    1ce4:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <xTickCount+0x1>
    1ce8:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <xTickCount>
    1cec:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    1cf0:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1cf4:	85 a1       	ldd	r24, Z+37	; 0x25
    1cf6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <task_switch_in>
    1cfa:	0e 94 04 06 	call	0xc08	; 0xc08 <xPortStartScheduler>
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	08 95       	ret

00001d06 <vTaskSuspendAll>:
    1d06:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    1d0a:	8f 5f       	subi	r24, 0xFF	; 255
    1d0c:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <uxSchedulerSuspended>
    1d10:	08 95       	ret

00001d12 <xTaskGetTickCount>:
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	0f 92       	push	r0
    1d18:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <xTickCount>
    1d1c:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <xTickCount+0x1>
    1d20:	0f 90       	pop	r0
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	08 95       	ret

00001d26 <xTaskIncrementTick>:
    1d26:	cf 92       	push	r12
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	98 c0       	rjmp	.+304    	; 0x1e6e <xTaskIncrementTick+0x148>
    1d3e:	e0 90 bf 07 	lds	r14, 0x07BF	; 0x8007bf <xTickCount>
    1d42:	f0 90 c0 07 	lds	r15, 0x07C0	; 0x8007c0 <xTickCount+0x1>
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	e8 1a       	sub	r14, r24
    1d4a:	f8 0a       	sbc	r15, r24
    1d4c:	f0 92 c0 07 	sts	0x07C0, r15	; 0x8007c0 <xTickCount+0x1>
    1d50:	e0 92 bf 07 	sts	0x07BF, r14	; 0x8007bf <xTickCount>
    1d54:	e1 14       	cp	r14, r1
    1d56:	f1 04       	cpc	r15, r1
    1d58:	b1 f4       	brne	.+44     	; 0x1d86 <xTaskIncrementTick+0x60>
    1d5a:	80 91 e0 07 	lds	r24, 0x07E0	; 0x8007e0 <pxDelayedTaskList>
    1d5e:	90 91 e1 07 	lds	r25, 0x07E1	; 0x8007e1 <pxDelayedTaskList+0x1>
    1d62:	20 91 de 07 	lds	r18, 0x07DE	; 0x8007de <pxOverflowDelayedTaskList>
    1d66:	30 91 df 07 	lds	r19, 0x07DF	; 0x8007df <pxOverflowDelayedTaskList+0x1>
    1d6a:	30 93 e1 07 	sts	0x07E1, r19	; 0x8007e1 <pxDelayedTaskList+0x1>
    1d6e:	20 93 e0 07 	sts	0x07E0, r18	; 0x8007e0 <pxDelayedTaskList>
    1d72:	90 93 df 07 	sts	0x07DF, r25	; 0x8007df <pxOverflowDelayedTaskList+0x1>
    1d76:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <pxOverflowDelayedTaskList>
    1d7a:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <xNumOfOverflows>
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <xNumOfOverflows>
    1d84:	fc dd       	rcall	.-1032   	; 0x197e <prvResetNextTaskUnblockTime>
    1d86:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xNextTaskUnblockTime>
    1d8a:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1d8e:	e8 16       	cp	r14, r24
    1d90:	f9 06       	cpc	r15, r25
    1d92:	10 f4       	brcc	.+4      	; 0x1d98 <xTaskIncrementTick+0x72>
    1d94:	d1 2c       	mov	r13, r1
    1d96:	53 c0       	rjmp	.+166    	; 0x1e3e <xTaskIncrementTick+0x118>
    1d98:	d1 2c       	mov	r13, r1
    1d9a:	cc 24       	eor	r12, r12
    1d9c:	c3 94       	inc	r12
    1d9e:	e0 91 e0 07 	lds	r30, 0x07E0	; 0x8007e0 <pxDelayedTaskList>
    1da2:	f0 91 e1 07 	lds	r31, 0x07E1	; 0x8007e1 <pxDelayedTaskList+0x1>
    1da6:	80 81       	ld	r24, Z
    1da8:	81 11       	cpse	r24, r1
    1daa:	07 c0       	rjmp	.+14     	; 0x1dba <xTaskIncrementTick+0x94>
    1dac:	8f ef       	ldi	r24, 0xFF	; 255
    1dae:	9f ef       	ldi	r25, 0xFF	; 255
    1db0:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1db4:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xNextTaskUnblockTime>
    1db8:	42 c0       	rjmp	.+132    	; 0x1e3e <xTaskIncrementTick+0x118>
    1dba:	e0 91 e0 07 	lds	r30, 0x07E0	; 0x8007e0 <pxDelayedTaskList>
    1dbe:	f0 91 e1 07 	lds	r31, 0x07E1	; 0x8007e1 <pxDelayedTaskList+0x1>
    1dc2:	05 80       	ldd	r0, Z+5	; 0x05
    1dc4:	f6 81       	ldd	r31, Z+6	; 0x06
    1dc6:	e0 2d       	mov	r30, r0
    1dc8:	c6 81       	ldd	r28, Z+6	; 0x06
    1dca:	d7 81       	ldd	r29, Z+7	; 0x07
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd0:	e8 16       	cp	r14, r24
    1dd2:	f9 06       	cpc	r15, r25
    1dd4:	28 f4       	brcc	.+10     	; 0x1de0 <xTaskIncrementTick+0xba>
    1dd6:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <xNextTaskUnblockTime+0x1>
    1dda:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xNextTaskUnblockTime>
    1dde:	2f c0       	rjmp	.+94     	; 0x1e3e <xTaskIncrementTick+0x118>
    1de0:	8e 01       	movw	r16, r28
    1de2:	0e 5f       	subi	r16, 0xFE	; 254
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	c8 01       	movw	r24, r16
    1de8:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    1dec:	8c 89       	ldd	r24, Y+20	; 0x14
    1dee:	9d 89       	ldd	r25, Y+21	; 0x15
    1df0:	89 2b       	or	r24, r25
    1df2:	21 f0       	breq	.+8      	; 0x1dfc <xTaskIncrementTick+0xd6>
    1df4:	ce 01       	movw	r24, r28
    1df6:	0c 96       	adiw	r24, 0x0c	; 12
    1df8:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    1dfc:	8e 89       	ldd	r24, Y+22	; 0x16
    1dfe:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <uxTopReadyPriority>
    1e02:	98 17       	cp	r25, r24
    1e04:	10 f4       	brcc	.+4      	; 0x1e0a <xTaskIncrementTick+0xe4>
    1e06:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxTopReadyPriority>
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	9c 01       	movw	r18, r24
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	22 0f       	add	r18, r18
    1e18:	33 1f       	adc	r19, r19
    1e1a:	82 0f       	add	r24, r18
    1e1c:	93 1f       	adc	r25, r19
    1e1e:	b8 01       	movw	r22, r16
    1e20:	8c 50       	subi	r24, 0x0C	; 12
    1e22:	98 4f       	sbci	r25, 0xF8	; 248
    1e24:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    1e28:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    1e2c:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1e30:	9e 89       	ldd	r25, Y+22	; 0x16
    1e32:	86 89       	ldd	r24, Z+22	; 0x16
    1e34:	98 17       	cp	r25, r24
    1e36:	08 f4       	brcc	.+2      	; 0x1e3a <xTaskIncrementTick+0x114>
    1e38:	b2 cf       	rjmp	.-156    	; 0x1d9e <xTaskIncrementTick+0x78>
    1e3a:	dc 2c       	mov	r13, r12
    1e3c:	b0 cf       	rjmp	.-160    	; 0x1d9e <xTaskIncrementTick+0x78>
    1e3e:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    1e42:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1e46:	86 89       	ldd	r24, Z+22	; 0x16
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	ee 0f       	add	r30, r30
    1e52:	ff 1f       	adc	r31, r31
    1e54:	ee 0f       	add	r30, r30
    1e56:	ff 1f       	adc	r31, r31
    1e58:	8e 0f       	add	r24, r30
    1e5a:	9f 1f       	adc	r25, r31
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	ec 50       	subi	r30, 0x0C	; 12
    1e60:	f8 4f       	sbci	r31, 0xF8	; 248
    1e62:	80 81       	ld	r24, Z
    1e64:	82 30       	cpi	r24, 0x02	; 2
    1e66:	48 f0       	brcs	.+18     	; 0x1e7a <xTaskIncrementTick+0x154>
    1e68:	dd 24       	eor	r13, r13
    1e6a:	d3 94       	inc	r13
    1e6c:	06 c0       	rjmp	.+12     	; 0x1e7a <xTaskIncrementTick+0x154>
    1e6e:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <uxPendedTicks>
    1e72:	8f 5f       	subi	r24, 0xFF	; 255
    1e74:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <uxPendedTicks>
    1e78:	d1 2c       	mov	r13, r1
    1e7a:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xYieldPending>
    1e7e:	88 23       	and	r24, r24
    1e80:	11 f0       	breq	.+4      	; 0x1e86 <xTaskIncrementTick+0x160>
    1e82:	dd 24       	eor	r13, r13
    1e84:	d3 94       	inc	r13
    1e86:	8d 2d       	mov	r24, r13
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	cf 90       	pop	r12
    1e98:	08 95       	ret

00001e9a <xTaskResumeAll>:
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	0f 92       	push	r0
    1eae:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    1eb2:	81 50       	subi	r24, 0x01	; 1
    1eb4:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <uxSchedulerSuspended>
    1eb8:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	5d c0       	rjmp	.+186    	; 0x1f7a <xTaskResumeAll+0xe0>
    1ec0:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <uxCurrentNumberOfTasks>
    1ec4:	81 11       	cpse	r24, r1
    1ec6:	33 c0       	rjmp	.+102    	; 0x1f2e <xTaskResumeAll+0x94>
    1ec8:	5b c0       	rjmp	.+182    	; 0x1f80 <xTaskResumeAll+0xe6>
    1eca:	d7 01       	movw	r26, r14
    1ecc:	15 96       	adiw	r26, 0x05	; 5
    1ece:	ed 91       	ld	r30, X+
    1ed0:	fc 91       	ld	r31, X
    1ed2:	16 97       	sbiw	r26, 0x06	; 6
    1ed4:	c6 81       	ldd	r28, Z+6	; 0x06
    1ed6:	d7 81       	ldd	r29, Z+7	; 0x07
    1ed8:	ce 01       	movw	r24, r28
    1eda:	0c 96       	adiw	r24, 0x0c	; 12
    1edc:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    1ee0:	8e 01       	movw	r16, r28
    1ee2:	0e 5f       	subi	r16, 0xFE	; 254
    1ee4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee6:	c8 01       	movw	r24, r16
    1ee8:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    1eec:	8e 89       	ldd	r24, Y+22	; 0x16
    1eee:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <uxTopReadyPriority>
    1ef2:	98 17       	cp	r25, r24
    1ef4:	10 f4       	brcc	.+4      	; 0x1efa <xTaskResumeAll+0x60>
    1ef6:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxTopReadyPriority>
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 01       	movw	r18, r24
    1efe:	22 0f       	add	r18, r18
    1f00:	33 1f       	adc	r19, r19
    1f02:	22 0f       	add	r18, r18
    1f04:	33 1f       	adc	r19, r19
    1f06:	22 0f       	add	r18, r18
    1f08:	33 1f       	adc	r19, r19
    1f0a:	82 0f       	add	r24, r18
    1f0c:	93 1f       	adc	r25, r19
    1f0e:	b8 01       	movw	r22, r16
    1f10:	8c 50       	subi	r24, 0x0C	; 12
    1f12:	98 4f       	sbci	r25, 0xF8	; 248
    1f14:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    1f18:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    1f1c:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1f20:	9e 89       	ldd	r25, Y+22	; 0x16
    1f22:	86 89       	ldd	r24, Z+22	; 0x16
    1f24:	98 17       	cp	r25, r24
    1f26:	68 f0       	brcs	.+26     	; 0x1f42 <xTaskResumeAll+0xa8>
    1f28:	d0 92 bb 07 	sts	0x07BB, r13	; 0x8007bb <xYieldPending>
    1f2c:	0a c0       	rjmp	.+20     	; 0x1f42 <xTaskResumeAll+0xa8>
    1f2e:	c0 e0       	ldi	r28, 0x00	; 0
    1f30:	d0 e0       	ldi	r29, 0x00	; 0
    1f32:	0f 2e       	mov	r0, r31
    1f34:	f5 ed       	ldi	r31, 0xD5	; 213
    1f36:	ef 2e       	mov	r14, r31
    1f38:	f7 e0       	ldi	r31, 0x07	; 7
    1f3a:	ff 2e       	mov	r15, r31
    1f3c:	f0 2d       	mov	r31, r0
    1f3e:	dd 24       	eor	r13, r13
    1f40:	d3 94       	inc	r13
    1f42:	f7 01       	movw	r30, r14
    1f44:	80 81       	ld	r24, Z
    1f46:	81 11       	cpse	r24, r1
    1f48:	c0 cf       	rjmp	.-128    	; 0x1eca <xTaskResumeAll+0x30>
    1f4a:	cd 2b       	or	r28, r29
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <xTaskResumeAll+0xb6>
    1f4e:	17 dd       	rcall	.-1490   	; 0x197e <prvResetNextTaskUnblockTime>
    1f50:	c0 91 bc 07 	lds	r28, 0x07BC	; 0x8007bc <uxPendedTicks>
    1f54:	cc 23       	and	r28, r28
    1f56:	49 f0       	breq	.+18     	; 0x1f6a <xTaskResumeAll+0xd0>
    1f58:	d1 e0       	ldi	r29, 0x01	; 1
    1f5a:	e5 de       	rcall	.-566    	; 0x1d26 <xTaskIncrementTick>
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	d0 93 bb 07 	sts	0x07BB, r29	; 0x8007bb <xYieldPending>
    1f62:	c1 50       	subi	r28, 0x01	; 1
    1f64:	d1 f7       	brne	.-12     	; 0x1f5a <xTaskResumeAll+0xc0>
    1f66:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <uxPendedTicks>
    1f6a:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xYieldPending>
    1f6e:	88 23       	and	r24, r24
    1f70:	31 f0       	breq	.+12     	; 0x1f7e <xTaskResumeAll+0xe4>
    1f72:	0e 94 40 06 	call	0xc80	; 0xc80 <vPortYield>
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <xTaskResumeAll+0xe6>
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <xTaskResumeAll+0xe6>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	ff 90       	pop	r15
    1f8e:	ef 90       	pop	r14
    1f90:	df 90       	pop	r13
    1f92:	08 95       	ret

00001f94 <vTaskDelay>:
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	ec 01       	movw	r28, r24
    1f9a:	89 2b       	or	r24, r25
    1f9c:	39 f0       	breq	.+14     	; 0x1fac <vTaskDelay+0x18>
    1f9e:	b3 de       	rcall	.-666    	; 0x1d06 <vTaskSuspendAll>
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	0b dd       	rcall	.-1514   	; 0x19bc <prvAddCurrentTaskToDelayedList>
    1fa6:	79 df       	rcall	.-270    	; 0x1e9a <xTaskResumeAll>
    1fa8:	81 11       	cpse	r24, r1
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <vTaskDelay+0x1c>
    1fac:	0e 94 40 06 	call	0xc80	; 0xc80 <vPortYield>
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	08 95       	ret

00001fb6 <vTaskSwitchContext>:
    1fb6:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    1fba:	88 23       	and	r24, r24
    1fbc:	21 f0       	breq	.+8      	; 0x1fc6 <vTaskSwitchContext+0x10>
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xYieldPending>
    1fc4:	08 95       	ret
    1fc6:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <xYieldPending>
    1fca:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    1fce:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1fd2:	85 a1       	ldd	r24, Z+37	; 0x25
    1fd4:	0e 94 df 04 	call	0x9be	; 0x9be <task_switch_out>
    1fd8:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <pxCurrentTCB>
    1fdc:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1fe0:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    1fe4:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1fe8:	2d 91       	ld	r18, X+
    1fea:	3c 91       	ld	r19, X
    1fec:	87 89       	ldd	r24, Z+23	; 0x17
    1fee:	90 8d       	ldd	r25, Z+24	; 0x18
    1ff0:	82 17       	cp	r24, r18
    1ff2:	93 07       	cpc	r25, r19
    1ff4:	58 f0       	brcs	.+22     	; 0x200c <vTaskSwitchContext+0x56>
    1ff6:	60 91 18 08 	lds	r22, 0x0818	; 0x800818 <pxCurrentTCB>
    1ffa:	70 91 19 08 	lds	r23, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    1ffe:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <pxCurrentTCB>
    2002:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2006:	67 5e       	subi	r22, 0xE7	; 231
    2008:	7f 4f       	sbci	r23, 0xFF	; 255
    200a:	1f d5       	rcall	.+2622   	; 0x2a4a <vApplicationStackOverflowHook>
    200c:	20 91 be 07 	lds	r18, 0x07BE	; 0x8007be <uxTopReadyPriority>
    2010:	82 2f       	mov	r24, r18
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	fc 01       	movw	r30, r24
    2016:	ee 0f       	add	r30, r30
    2018:	ff 1f       	adc	r31, r31
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	e8 0f       	add	r30, r24
    2024:	f9 1f       	adc	r31, r25
    2026:	ec 50       	subi	r30, 0x0C	; 12
    2028:	f8 4f       	sbci	r31, 0xF8	; 248
    202a:	30 81       	ld	r19, Z
    202c:	31 11       	cpse	r19, r1
    202e:	11 c0       	rjmp	.+34     	; 0x2052 <vTaskSwitchContext+0x9c>
    2030:	21 50       	subi	r18, 0x01	; 1
    2032:	82 2f       	mov	r24, r18
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	fc 01       	movw	r30, r24
    2038:	ee 0f       	add	r30, r30
    203a:	ff 1f       	adc	r31, r31
    203c:	ee 0f       	add	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	e8 0f       	add	r30, r24
    2046:	f9 1f       	adc	r31, r25
    2048:	ec 50       	subi	r30, 0x0C	; 12
    204a:	f8 4f       	sbci	r31, 0xF8	; 248
    204c:	30 81       	ld	r19, Z
    204e:	33 23       	and	r19, r19
    2050:	79 f3       	breq	.-34     	; 0x2030 <vTaskSwitchContext+0x7a>
    2052:	ac 01       	movw	r20, r24
    2054:	44 0f       	add	r20, r20
    2056:	55 1f       	adc	r21, r21
    2058:	44 0f       	add	r20, r20
    205a:	55 1f       	adc	r21, r21
    205c:	44 0f       	add	r20, r20
    205e:	55 1f       	adc	r21, r21
    2060:	48 0f       	add	r20, r24
    2062:	59 1f       	adc	r21, r25
    2064:	da 01       	movw	r26, r20
    2066:	ac 50       	subi	r26, 0x0C	; 12
    2068:	b8 4f       	sbci	r27, 0xF8	; 248
    206a:	11 96       	adiw	r26, 0x01	; 1
    206c:	ed 91       	ld	r30, X+
    206e:	fc 91       	ld	r31, X
    2070:	12 97       	sbiw	r26, 0x02	; 2
    2072:	02 80       	ldd	r0, Z+2	; 0x02
    2074:	f3 81       	ldd	r31, Z+3	; 0x03
    2076:	e0 2d       	mov	r30, r0
    2078:	12 96       	adiw	r26, 0x02	; 2
    207a:	fc 93       	st	X, r31
    207c:	ee 93       	st	-X, r30
    207e:	11 97       	sbiw	r26, 0x01	; 1
    2080:	49 50       	subi	r20, 0x09	; 9
    2082:	58 4f       	sbci	r21, 0xF8	; 248
    2084:	e4 17       	cp	r30, r20
    2086:	f5 07       	cpc	r31, r21
    2088:	29 f4       	brne	.+10     	; 0x2094 <vTaskSwitchContext+0xde>
    208a:	42 81       	ldd	r20, Z+2	; 0x02
    208c:	53 81       	ldd	r21, Z+3	; 0x03
    208e:	fd 01       	movw	r30, r26
    2090:	52 83       	std	Z+2, r21	; 0x02
    2092:	41 83       	std	Z+1, r20	; 0x01
    2094:	fc 01       	movw	r30, r24
    2096:	ee 0f       	add	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	8e 0f       	add	r24, r30
    20a4:	9f 1f       	adc	r25, r31
    20a6:	fc 01       	movw	r30, r24
    20a8:	ec 50       	subi	r30, 0x0C	; 12
    20aa:	f8 4f       	sbci	r31, 0xF8	; 248
    20ac:	01 80       	ldd	r0, Z+1	; 0x01
    20ae:	f2 81       	ldd	r31, Z+2	; 0x02
    20b0:	e0 2d       	mov	r30, r0
    20b2:	86 81       	ldd	r24, Z+6	; 0x06
    20b4:	97 81       	ldd	r25, Z+7	; 0x07
    20b6:	90 93 19 08 	sts	0x0819, r25	; 0x800819 <pxCurrentTCB+0x1>
    20ba:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <pxCurrentTCB>
    20be:	20 93 be 07 	sts	0x07BE, r18	; 0x8007be <uxTopReadyPriority>
    20c2:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    20c6:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    20ca:	85 a1       	ldd	r24, Z+37	; 0x25
    20cc:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <task_switch_in>
    20d0:	08 95       	ret

000020d2 <vTaskPlaceOnEventList>:
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	eb 01       	movw	r28, r22
    20d8:	60 91 18 08 	lds	r22, 0x0818	; 0x800818 <pxCurrentTCB>
    20dc:	70 91 19 08 	lds	r23, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    20e0:	64 5f       	subi	r22, 0xF4	; 244
    20e2:	7f 4f       	sbci	r23, 0xFF	; 255
    20e4:	0e 94 3a 05 	call	0xa74	; 0xa74 <vListInsert>
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	ce 01       	movw	r24, r28
    20ec:	67 dc       	rcall	.-1842   	; 0x19bc <prvAddCurrentTaskToDelayedList>
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <vTaskPlaceOnEventListRestricted>:
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	8b 01       	movw	r16, r22
    20fc:	c4 2f       	mov	r28, r20
    20fe:	60 91 18 08 	lds	r22, 0x0818	; 0x800818 <pxCurrentTCB>
    2102:	70 91 19 08 	lds	r23, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2106:	64 5f       	subi	r22, 0xF4	; 244
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    210e:	cc 23       	and	r28, r28
    2110:	11 f0       	breq	.+4      	; 0x2116 <vTaskPlaceOnEventListRestricted+0x22>
    2112:	0f ef       	ldi	r16, 0xFF	; 255
    2114:	1f ef       	ldi	r17, 0xFF	; 255
    2116:	6c 2f       	mov	r22, r28
    2118:	c8 01       	movw	r24, r16
    211a:	50 dc       	rcall	.-1888   	; 0x19bc <prvAddCurrentTaskToDelayedList>
    211c:	cf 91       	pop	r28
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	08 95       	ret

00002124 <xTaskRemoveFromEventList>:
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	dc 01       	movw	r26, r24
    212e:	15 96       	adiw	r26, 0x05	; 5
    2130:	ed 91       	ld	r30, X+
    2132:	fc 91       	ld	r31, X
    2134:	16 97       	sbiw	r26, 0x06	; 6
    2136:	c6 81       	ldd	r28, Z+6	; 0x06
    2138:	d7 81       	ldd	r29, Z+7	; 0x07
    213a:	8e 01       	movw	r16, r28
    213c:	04 5f       	subi	r16, 0xF4	; 244
    213e:	1f 4f       	sbci	r17, 0xFF	; 255
    2140:	c8 01       	movw	r24, r16
    2142:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    2146:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    214a:	81 11       	cpse	r24, r1
    214c:	1c c0       	rjmp	.+56     	; 0x2186 <xTaskRemoveFromEventList+0x62>
    214e:	0a 50       	subi	r16, 0x0A	; 10
    2150:	11 09       	sbc	r17, r1
    2152:	c8 01       	movw	r24, r16
    2154:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    2158:	8e 89       	ldd	r24, Y+22	; 0x16
    215a:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <uxTopReadyPriority>
    215e:	98 17       	cp	r25, r24
    2160:	10 f4       	brcc	.+4      	; 0x2166 <xTaskRemoveFromEventList+0x42>
    2162:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxTopReadyPriority>
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	9c 01       	movw	r18, r24
    216a:	22 0f       	add	r18, r18
    216c:	33 1f       	adc	r19, r19
    216e:	22 0f       	add	r18, r18
    2170:	33 1f       	adc	r19, r19
    2172:	22 0f       	add	r18, r18
    2174:	33 1f       	adc	r19, r19
    2176:	82 0f       	add	r24, r18
    2178:	93 1f       	adc	r25, r19
    217a:	b8 01       	movw	r22, r16
    217c:	8c 50       	subi	r24, 0x0C	; 12
    217e:	98 4f       	sbci	r25, 0xF8	; 248
    2180:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    2184:	05 c0       	rjmp	.+10     	; 0x2190 <xTaskRemoveFromEventList+0x6c>
    2186:	b8 01       	movw	r22, r16
    2188:	85 ed       	ldi	r24, 0xD5	; 213
    218a:	97 e0       	ldi	r25, 0x07	; 7
    218c:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    2190:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    2194:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2198:	9e 89       	ldd	r25, Y+22	; 0x16
    219a:	86 89       	ldd	r24, Z+22	; 0x16
    219c:	89 17       	cp	r24, r25
    219e:	20 f4       	brcc	.+8      	; 0x21a8 <xTaskRemoveFromEventList+0x84>
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xYieldPending>
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <xTaskRemoveFromEventList+0x86>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	08 95       	ret

000021b4 <vTaskInternalSetTimeOutState>:
    21b4:	20 91 ba 07 	lds	r18, 0x07BA	; 0x8007ba <xNumOfOverflows>
    21b8:	fc 01       	movw	r30, r24
    21ba:	20 83       	st	Z, r18
    21bc:	20 91 bf 07 	lds	r18, 0x07BF	; 0x8007bf <xTickCount>
    21c0:	30 91 c0 07 	lds	r19, 0x07C0	; 0x8007c0 <xTickCount+0x1>
    21c4:	32 83       	std	Z+2, r19	; 0x02
    21c6:	21 83       	std	Z+1, r18	; 0x01
    21c8:	08 95       	ret

000021ca <xTaskCheckForTimeOut>:
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	0f 92       	push	r0
    21d4:	20 91 bf 07 	lds	r18, 0x07BF	; 0x8007bf <xTickCount>
    21d8:	30 91 c0 07 	lds	r19, 0x07C0	; 0x8007c0 <xTickCount+0x1>
    21dc:	db 01       	movw	r26, r22
    21de:	4d 91       	ld	r20, X+
    21e0:	5c 91       	ld	r21, X
    21e2:	4f 3f       	cpi	r20, 0xFF	; 255
    21e4:	bf ef       	ldi	r27, 0xFF	; 255
    21e6:	5b 07       	cpc	r21, r27
    21e8:	e9 f0       	breq	.+58     	; 0x2224 <__stack+0x25>
    21ea:	ec 01       	movw	r28, r24
    21ec:	e9 81       	ldd	r30, Y+1	; 0x01
    21ee:	fa 81       	ldd	r31, Y+2	; 0x02
    21f0:	a0 91 ba 07 	lds	r26, 0x07BA	; 0x8007ba <xNumOfOverflows>
    21f4:	b8 81       	ld	r27, Y
    21f6:	ba 17       	cp	r27, r26
    21f8:	19 f0       	breq	.+6      	; 0x2200 <__stack+0x1>
    21fa:	2e 17       	cp	r18, r30
    21fc:	3f 07       	cpc	r19, r31
    21fe:	a0 f4       	brcc	.+40     	; 0x2228 <__stack+0x29>
    2200:	2e 1b       	sub	r18, r30
    2202:	3f 0b       	sbc	r19, r31
    2204:	24 17       	cp	r18, r20
    2206:	35 07       	cpc	r19, r21
    2208:	40 f4       	brcc	.+16     	; 0x221a <__stack+0x1b>
    220a:	fb 01       	movw	r30, r22
    220c:	42 1b       	sub	r20, r18
    220e:	53 0b       	sbc	r21, r19
    2210:	51 83       	std	Z+1, r21	; 0x01
    2212:	40 83       	st	Z, r20
    2214:	cf df       	rcall	.-98     	; 0x21b4 <vTaskInternalSetTimeOutState>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	08 c0       	rjmp	.+16     	; 0x222a <__stack+0x2b>
    221a:	fb 01       	movw	r30, r22
    221c:	11 82       	std	Z+1, r1	; 0x01
    221e:	10 82       	st	Z, r1
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	03 c0       	rjmp	.+6      	; 0x222a <__stack+0x2b>
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	01 c0       	rjmp	.+2      	; 0x222a <__stack+0x2b>
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	0f 90       	pop	r0
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	08 95       	ret

00002234 <vTaskMissedYield>:
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xYieldPending>
    223a:	08 95       	ret

0000223c <xTaskGetCurrentTaskHandle>:
    223c:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <pxCurrentTCB>
    2240:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2244:	08 95       	ret

00002246 <xTaskGetSchedulerState>:
    2246:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <xSchedulerRunning>
    224a:	88 23       	and	r24, r24
    224c:	31 f0       	breq	.+12     	; 0x225a <xTaskGetSchedulerState+0x14>
    224e:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    2252:	88 23       	and	r24, r24
    2254:	21 f0       	breq	.+8      	; 0x225e <xTaskGetSchedulerState+0x18>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	08 95       	ret
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	08 95       	ret
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	08 95       	ret

00002262 <xTaskPriorityInherit>:
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	fc 01       	movw	r30, r24
    226c:	89 2b       	or	r24, r25
    226e:	09 f4       	brne	.+2      	; 0x2272 <xTaskPriorityInherit+0x10>
    2270:	64 c0       	rjmp	.+200    	; 0x233a <xTaskPriorityInherit+0xd8>
    2272:	26 89       	ldd	r18, Z+22	; 0x16
    2274:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <pxCurrentTCB>
    2278:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    227c:	56 96       	adiw	r26, 0x16	; 22
    227e:	8c 91       	ld	r24, X
    2280:	28 17       	cp	r18, r24
    2282:	08 f0       	brcs	.+2      	; 0x2286 <xTaskPriorityInherit+0x24>
    2284:	4e c0       	rjmp	.+156    	; 0x2322 <xTaskPriorityInherit+0xc0>
    2286:	84 85       	ldd	r24, Z+12	; 0x0c
    2288:	95 85       	ldd	r25, Z+13	; 0x0d
    228a:	99 23       	and	r25, r25
    228c:	64 f0       	brlt	.+24     	; 0x22a6 <xTaskPriorityInherit+0x44>
    228e:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <pxCurrentTCB>
    2292:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2296:	56 96       	adiw	r26, 0x16	; 22
    2298:	3c 91       	ld	r19, X
    229a:	84 e0       	ldi	r24, 0x04	; 4
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	83 1b       	sub	r24, r19
    22a0:	91 09       	sbc	r25, r1
    22a2:	95 87       	std	Z+13, r25	; 0x0d
    22a4:	84 87       	std	Z+12, r24	; 0x0c
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	c9 01       	movw	r24, r18
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	28 0f       	add	r18, r24
    22b8:	39 1f       	adc	r19, r25
    22ba:	2c 50       	subi	r18, 0x0C	; 12
    22bc:	38 4f       	sbci	r19, 0xF8	; 248
    22be:	82 85       	ldd	r24, Z+10	; 0x0a
    22c0:	93 85       	ldd	r25, Z+11	; 0x0b
    22c2:	82 17       	cp	r24, r18
    22c4:	93 07       	cpc	r25, r19
    22c6:	21 f5       	brne	.+72     	; 0x2310 <xTaskPriorityInherit+0xae>
    22c8:	8f 01       	movw	r16, r30
    22ca:	ef 01       	movw	r28, r30
    22cc:	22 96       	adiw	r28, 0x02	; 2
    22ce:	ce 01       	movw	r24, r28
    22d0:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    22d4:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    22d8:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    22dc:	86 89       	ldd	r24, Z+22	; 0x16
    22de:	f8 01       	movw	r30, r16
    22e0:	86 8b       	std	Z+22, r24	; 0x16
    22e2:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <uxTopReadyPriority>
    22e6:	98 17       	cp	r25, r24
    22e8:	10 f4       	brcc	.+4      	; 0x22ee <xTaskPriorityInherit+0x8c>
    22ea:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxTopReadyPriority>
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9c 01       	movw	r18, r24
    22f2:	22 0f       	add	r18, r18
    22f4:	33 1f       	adc	r19, r19
    22f6:	22 0f       	add	r18, r18
    22f8:	33 1f       	adc	r19, r19
    22fa:	22 0f       	add	r18, r18
    22fc:	33 1f       	adc	r19, r19
    22fe:	82 0f       	add	r24, r18
    2300:	93 1f       	adc	r25, r19
    2302:	be 01       	movw	r22, r28
    2304:	8c 50       	subi	r24, 0x0C	; 12
    2306:	98 4f       	sbci	r25, 0xF8	; 248
    2308:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	16 c0       	rjmp	.+44     	; 0x233c <xTaskPriorityInherit+0xda>
    2310:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <pxCurrentTCB>
    2314:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2318:	56 96       	adiw	r26, 0x16	; 22
    231a:	8c 91       	ld	r24, X
    231c:	86 8b       	std	Z+22, r24	; 0x16
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	0d c0       	rjmp	.+26     	; 0x233c <xTaskPriorityInherit+0xda>
    2322:	a0 91 18 08 	lds	r26, 0x0818	; 0x800818 <pxCurrentTCB>
    2326:	b0 91 19 08 	lds	r27, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	23 a1       	ldd	r18, Z+35	; 0x23
    232e:	56 96       	adiw	r26, 0x16	; 22
    2330:	9c 91       	ld	r25, X
    2332:	29 17       	cp	r18, r25
    2334:	18 f0       	brcs	.+6      	; 0x233c <xTaskPriorityInherit+0xda>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	01 c0       	rjmp	.+2      	; 0x233c <xTaskPriorityInherit+0xda>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	08 95       	ret

00002346 <xTaskPriorityDisinherit>:
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	fc 01       	movw	r30, r24
    2350:	89 2b       	or	r24, r25
    2352:	79 f1       	breq	.+94     	; 0x23b2 <xTaskPriorityDisinherit+0x6c>
    2354:	84 a1       	ldd	r24, Z+36	; 0x24
    2356:	81 50       	subi	r24, 0x01	; 1
    2358:	84 a3       	std	Z+36, r24	; 0x24
    235a:	26 89       	ldd	r18, Z+22	; 0x16
    235c:	93 a1       	ldd	r25, Z+35	; 0x23
    235e:	29 17       	cp	r18, r25
    2360:	51 f1       	breq	.+84     	; 0x23b6 <xTaskPriorityDisinherit+0x70>
    2362:	81 11       	cpse	r24, r1
    2364:	2a c0       	rjmp	.+84     	; 0x23ba <xTaskPriorityDisinherit+0x74>
    2366:	ef 01       	movw	r28, r30
    2368:	8f 01       	movw	r16, r30
    236a:	0e 5f       	subi	r16, 0xFE	; 254
    236c:	1f 4f       	sbci	r17, 0xFF	; 255
    236e:	c8 01       	movw	r24, r16
    2370:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    2374:	8b a1       	ldd	r24, Y+35	; 0x23
    2376:	8e 8b       	std	Y+22, r24	; 0x16
    2378:	24 e0       	ldi	r18, 0x04	; 4
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	28 1b       	sub	r18, r24
    237e:	31 09       	sbc	r19, r1
    2380:	3d 87       	std	Y+13, r19	; 0x0d
    2382:	2c 87       	std	Y+12, r18	; 0x0c
    2384:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <uxTopReadyPriority>
    2388:	98 17       	cp	r25, r24
    238a:	10 f4       	brcc	.+4      	; 0x2390 <xTaskPriorityDisinherit+0x4a>
    238c:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxTopReadyPriority>
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9c 01       	movw	r18, r24
    2394:	22 0f       	add	r18, r18
    2396:	33 1f       	adc	r19, r19
    2398:	22 0f       	add	r18, r18
    239a:	33 1f       	adc	r19, r19
    239c:	22 0f       	add	r18, r18
    239e:	33 1f       	adc	r19, r19
    23a0:	82 0f       	add	r24, r18
    23a2:	93 1f       	adc	r25, r19
    23a4:	b8 01       	movw	r22, r16
    23a6:	8c 50       	subi	r24, 0x0C	; 12
    23a8:	98 4f       	sbci	r25, 0xF8	; 248
    23aa:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	05 c0       	rjmp	.+10     	; 0x23bc <xTaskPriorityDisinherit+0x76>
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	03 c0       	rjmp	.+6      	; 0x23bc <xTaskPriorityDisinherit+0x76>
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	01 c0       	rjmp	.+2      	; 0x23bc <xTaskPriorityDisinherit+0x76>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	08 95       	ret

000023c6 <vTaskPriorityDisinheritAfterTimeout>:
    23c6:	0f 93       	push	r16
    23c8:	1f 93       	push	r17
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	fc 01       	movw	r30, r24
    23d0:	89 2b       	or	r24, r25
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    23d4:	43 c0       	rjmp	.+134    	; 0x245c <vTaskPriorityDisinheritAfterTimeout+0x96>
    23d6:	93 a1       	ldd	r25, Z+35	; 0x23
    23d8:	96 17       	cp	r25, r22
    23da:	08 f4       	brcc	.+2      	; 0x23de <vTaskPriorityDisinheritAfterTimeout+0x18>
    23dc:	96 2f       	mov	r25, r22
    23de:	86 89       	ldd	r24, Z+22	; 0x16
    23e0:	89 17       	cp	r24, r25
    23e2:	e1 f1       	breq	.+120    	; 0x245c <vTaskPriorityDisinheritAfterTimeout+0x96>
    23e4:	24 a1       	ldd	r18, Z+36	; 0x24
    23e6:	21 30       	cpi	r18, 0x01	; 1
    23e8:	c9 f5       	brne	.+114    	; 0x245c <vTaskPriorityDisinheritAfterTimeout+0x96>
    23ea:	96 8b       	std	Z+22, r25	; 0x16
    23ec:	24 85       	ldd	r18, Z+12	; 0x0c
    23ee:	35 85       	ldd	r19, Z+13	; 0x0d
    23f0:	33 23       	and	r19, r19
    23f2:	34 f0       	brlt	.+12     	; 0x2400 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    23f4:	24 e0       	ldi	r18, 0x04	; 4
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	29 1b       	sub	r18, r25
    23fa:	31 09       	sbc	r19, r1
    23fc:	35 87       	std	Z+13, r19	; 0x0d
    23fe:	24 87       	std	Z+12, r18	; 0x0c
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9c 01       	movw	r18, r24
    2404:	22 0f       	add	r18, r18
    2406:	33 1f       	adc	r19, r19
    2408:	22 0f       	add	r18, r18
    240a:	33 1f       	adc	r19, r19
    240c:	22 0f       	add	r18, r18
    240e:	33 1f       	adc	r19, r19
    2410:	82 0f       	add	r24, r18
    2412:	93 1f       	adc	r25, r19
    2414:	8c 50       	subi	r24, 0x0C	; 12
    2416:	98 4f       	sbci	r25, 0xF8	; 248
    2418:	22 85       	ldd	r18, Z+10	; 0x0a
    241a:	33 85       	ldd	r19, Z+11	; 0x0b
    241c:	28 17       	cp	r18, r24
    241e:	39 07       	cpc	r19, r25
    2420:	e9 f4       	brne	.+58     	; 0x245c <vTaskPriorityDisinheritAfterTimeout+0x96>
    2422:	ef 01       	movw	r28, r30
    2424:	8f 01       	movw	r16, r30
    2426:	0e 5f       	subi	r16, 0xFE	; 254
    2428:	1f 4f       	sbci	r17, 0xFF	; 255
    242a:	c8 01       	movw	r24, r16
    242c:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    2430:	8e 89       	ldd	r24, Y+22	; 0x16
    2432:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <uxTopReadyPriority>
    2436:	98 17       	cp	r25, r24
    2438:	10 f4       	brcc	.+4      	; 0x243e <vTaskPriorityDisinheritAfterTimeout+0x78>
    243a:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxTopReadyPriority>
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9c 01       	movw	r18, r24
    2442:	22 0f       	add	r18, r18
    2444:	33 1f       	adc	r19, r19
    2446:	22 0f       	add	r18, r18
    2448:	33 1f       	adc	r19, r19
    244a:	22 0f       	add	r18, r18
    244c:	33 1f       	adc	r19, r19
    244e:	82 0f       	add	r24, r18
    2450:	93 1f       	adc	r25, r19
    2452:	b8 01       	movw	r22, r16
    2454:	8c 50       	subi	r24, 0x0C	; 12
    2456:	98 4f       	sbci	r25, 0xF8	; 248
    2458:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	08 95       	ret

00002466 <pvTaskIncrementMutexHeldCount>:
    2466:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <pxCurrentTCB>
    246a:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    246e:	89 2b       	or	r24, r25
    2470:	39 f0       	breq	.+14     	; 0x2480 <pvTaskIncrementMutexHeldCount+0x1a>
    2472:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    2476:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    247a:	84 a1       	ldd	r24, Z+36	; 0x24
    247c:	8f 5f       	subi	r24, 0xFF	; 255
    247e:	84 a3       	std	Z+36, r24	; 0x24
    2480:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <pxCurrentTCB>
    2484:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2488:	08 95       	ret

0000248a <xTaskNotifyWait>:
    248a:	4f 92       	push	r4
    248c:	5f 92       	push	r5
    248e:	6f 92       	push	r6
    2490:	7f 92       	push	r7
    2492:	8f 92       	push	r8
    2494:	9f 92       	push	r9
    2496:	af 92       	push	r10
    2498:	bf 92       	push	r11
    249a:	ef 92       	push	r14
    249c:	ff 92       	push	r15
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	49 01       	movw	r8, r18
    24a4:	5a 01       	movw	r10, r20
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	0f 92       	push	r0
    24ac:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    24b0:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    24b4:	23 a5       	ldd	r18, Z+43	; 0x2b
    24b6:	22 30       	cpi	r18, 0x02	; 2
    24b8:	21 f1       	breq	.+72     	; 0x2502 <xTaskNotifyWait+0x78>
    24ba:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    24be:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    24c2:	47 a0       	ldd	r4, Z+39	; 0x27
    24c4:	50 a4       	ldd	r5, Z+40	; 0x28
    24c6:	61 a4       	ldd	r6, Z+41	; 0x29
    24c8:	72 a4       	ldd	r7, Z+42	; 0x2a
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	80 95       	com	r24
    24d0:	90 95       	com	r25
    24d2:	a0 95       	com	r26
    24d4:	b0 95       	com	r27
    24d6:	84 21       	and	r24, r4
    24d8:	95 21       	and	r25, r5
    24da:	a6 21       	and	r26, r6
    24dc:	b7 21       	and	r27, r7
    24de:	87 a3       	std	Z+39, r24	; 0x27
    24e0:	90 a7       	std	Z+40, r25	; 0x28
    24e2:	a1 a7       	std	Z+41, r26	; 0x29
    24e4:	b2 a7       	std	Z+42, r27	; 0x2a
    24e6:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    24ea:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	83 a7       	std	Z+43, r24	; 0x2b
    24f2:	e1 14       	cp	r14, r1
    24f4:	f1 04       	cpc	r15, r1
    24f6:	29 f0       	breq	.+10     	; 0x2502 <xTaskNotifyWait+0x78>
    24f8:	61 e0       	ldi	r22, 0x01	; 1
    24fa:	c7 01       	movw	r24, r14
    24fc:	5f da       	rcall	.-2882   	; 0x19bc <prvAddCurrentTaskToDelayedList>
    24fe:	0e 94 40 06 	call	0xc80	; 0xc80 <vPortYield>
    2502:	0f 90       	pop	r0
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	0f 92       	push	r0
    250c:	01 15       	cp	r16, r1
    250e:	11 05       	cpc	r17, r1
    2510:	69 f0       	breq	.+26     	; 0x252c <xTaskNotifyWait+0xa2>
    2512:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    2516:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    251a:	87 a1       	ldd	r24, Z+39	; 0x27
    251c:	90 a5       	ldd	r25, Z+40	; 0x28
    251e:	a1 a5       	ldd	r26, Z+41	; 0x29
    2520:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2522:	f8 01       	movw	r30, r16
    2524:	80 83       	st	Z, r24
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	a2 83       	std	Z+2, r26	; 0x02
    252a:	b3 83       	std	Z+3, r27	; 0x03
    252c:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    2530:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2534:	83 a5       	ldd	r24, Z+43	; 0x2b
    2536:	82 30       	cpi	r24, 0x02	; 2
    2538:	b1 f4       	brne	.+44     	; 0x2566 <xTaskNotifyWait+0xdc>
    253a:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    253e:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2542:	87 a1       	ldd	r24, Z+39	; 0x27
    2544:	90 a5       	ldd	r25, Z+40	; 0x28
    2546:	a1 a5       	ldd	r26, Z+41	; 0x29
    2548:	b2 a5       	ldd	r27, Z+42	; 0x2a
    254a:	80 94       	com	r8
    254c:	90 94       	com	r9
    254e:	a0 94       	com	r10
    2550:	b0 94       	com	r11
    2552:	88 22       	and	r8, r24
    2554:	99 22       	and	r9, r25
    2556:	aa 22       	and	r10, r26
    2558:	bb 22       	and	r11, r27
    255a:	87 a2       	std	Z+39, r8	; 0x27
    255c:	90 a6       	std	Z+40, r9	; 0x28
    255e:	a1 a6       	std	Z+41, r10	; 0x29
    2560:	b2 a6       	std	Z+42, r11	; 0x2a
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <xTaskNotifyWait+0xde>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    256c:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2570:	13 a6       	std	Z+43, r1	; 0x2b
    2572:	0f 90       	pop	r0
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	ff 90       	pop	r15
    257c:	ef 90       	pop	r14
    257e:	bf 90       	pop	r11
    2580:	af 90       	pop	r10
    2582:	9f 90       	pop	r9
    2584:	8f 90       	pop	r8
    2586:	7f 90       	pop	r7
    2588:	6f 90       	pop	r6
    258a:	5f 90       	pop	r5
    258c:	4f 90       	pop	r4
    258e:	08 95       	ret

00002590 <xTaskGenericNotify>:
    2590:	0f 93       	push	r16
    2592:	1f 93       	push	r17
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
    2598:	fc 01       	movw	r30, r24
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	0f 92       	push	r0
    25a0:	01 15       	cp	r16, r1
    25a2:	11 05       	cpc	r17, r1
    25a4:	49 f0       	breq	.+18     	; 0x25b8 <xTaskGenericNotify+0x28>
    25a6:	87 a1       	ldd	r24, Z+39	; 0x27
    25a8:	90 a5       	ldd	r25, Z+40	; 0x28
    25aa:	a1 a5       	ldd	r26, Z+41	; 0x29
    25ac:	b2 a5       	ldd	r27, Z+42	; 0x2a
    25ae:	e8 01       	movw	r28, r16
    25b0:	88 83       	st	Y, r24
    25b2:	99 83       	std	Y+1, r25	; 0x01
    25b4:	aa 83       	std	Y+2, r26	; 0x02
    25b6:	bb 83       	std	Y+3, r27	; 0x03
    25b8:	83 a5       	ldd	r24, Z+43	; 0x2b
    25ba:	92 e0       	ldi	r25, 0x02	; 2
    25bc:	93 a7       	std	Z+43, r25	; 0x2b
    25be:	22 30       	cpi	r18, 0x02	; 2
    25c0:	b1 f0       	breq	.+44     	; 0x25ee <xTaskGenericNotify+0x5e>
    25c2:	18 f4       	brcc	.+6      	; 0x25ca <xTaskGenericNotify+0x3a>
    25c4:	21 30       	cpi	r18, 0x01	; 1
    25c6:	31 f0       	breq	.+12     	; 0x25d4 <xTaskGenericNotify+0x44>
    25c8:	2a c0       	rjmp	.+84     	; 0x261e <xTaskGenericNotify+0x8e>
    25ca:	23 30       	cpi	r18, 0x03	; 3
    25cc:	e9 f0       	breq	.+58     	; 0x2608 <xTaskGenericNotify+0x78>
    25ce:	24 30       	cpi	r18, 0x04	; 4
    25d0:	01 f1       	breq	.+64     	; 0x2612 <xTaskGenericNotify+0x82>
    25d2:	25 c0       	rjmp	.+74     	; 0x261e <xTaskGenericNotify+0x8e>
    25d4:	07 a1       	ldd	r16, Z+39	; 0x27
    25d6:	10 a5       	ldd	r17, Z+40	; 0x28
    25d8:	21 a5       	ldd	r18, Z+41	; 0x29
    25da:	32 a5       	ldd	r19, Z+42	; 0x2a
    25dc:	40 2b       	or	r20, r16
    25de:	51 2b       	or	r21, r17
    25e0:	62 2b       	or	r22, r18
    25e2:	73 2b       	or	r23, r19
    25e4:	47 a3       	std	Z+39, r20	; 0x27
    25e6:	50 a7       	std	Z+40, r21	; 0x28
    25e8:	61 a7       	std	Z+41, r22	; 0x29
    25ea:	72 a7       	std	Z+42, r23	; 0x2a
    25ec:	18 c0       	rjmp	.+48     	; 0x261e <xTaskGenericNotify+0x8e>
    25ee:	47 a1       	ldd	r20, Z+39	; 0x27
    25f0:	50 a5       	ldd	r21, Z+40	; 0x28
    25f2:	61 a5       	ldd	r22, Z+41	; 0x29
    25f4:	72 a5       	ldd	r23, Z+42	; 0x2a
    25f6:	4f 5f       	subi	r20, 0xFF	; 255
    25f8:	5f 4f       	sbci	r21, 0xFF	; 255
    25fa:	6f 4f       	sbci	r22, 0xFF	; 255
    25fc:	7f 4f       	sbci	r23, 0xFF	; 255
    25fe:	47 a3       	std	Z+39, r20	; 0x27
    2600:	50 a7       	std	Z+40, r21	; 0x28
    2602:	61 a7       	std	Z+41, r22	; 0x29
    2604:	72 a7       	std	Z+42, r23	; 0x2a
    2606:	0b c0       	rjmp	.+22     	; 0x261e <xTaskGenericNotify+0x8e>
    2608:	47 a3       	std	Z+39, r20	; 0x27
    260a:	50 a7       	std	Z+40, r21	; 0x28
    260c:	61 a7       	std	Z+41, r22	; 0x29
    260e:	72 a7       	std	Z+42, r23	; 0x2a
    2610:	06 c0       	rjmp	.+12     	; 0x261e <xTaskGenericNotify+0x8e>
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	79 f1       	breq	.+94     	; 0x2674 <xTaskGenericNotify+0xe4>
    2616:	47 a3       	std	Z+39, r20	; 0x27
    2618:	50 a7       	std	Z+40, r21	; 0x28
    261a:	61 a7       	std	Z+41, r22	; 0x29
    261c:	72 a7       	std	Z+42, r23	; 0x2a
    261e:	81 30       	cpi	r24, 0x01	; 1
    2620:	59 f5       	brne	.+86     	; 0x2678 <xTaskGenericNotify+0xe8>
    2622:	ef 01       	movw	r28, r30
    2624:	8f 01       	movw	r16, r30
    2626:	0e 5f       	subi	r16, 0xFE	; 254
    2628:	1f 4f       	sbci	r17, 0xFF	; 255
    262a:	c8 01       	movw	r24, r16
    262c:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    2630:	8e 89       	ldd	r24, Y+22	; 0x16
    2632:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <uxTopReadyPriority>
    2636:	98 17       	cp	r25, r24
    2638:	10 f4       	brcc	.+4      	; 0x263e <xTaskGenericNotify+0xae>
    263a:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxTopReadyPriority>
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	9c 01       	movw	r18, r24
    2642:	22 0f       	add	r18, r18
    2644:	33 1f       	adc	r19, r19
    2646:	22 0f       	add	r18, r18
    2648:	33 1f       	adc	r19, r19
    264a:	22 0f       	add	r18, r18
    264c:	33 1f       	adc	r19, r19
    264e:	82 0f       	add	r24, r18
    2650:	93 1f       	adc	r25, r19
    2652:	b8 01       	movw	r22, r16
    2654:	8c 50       	subi	r24, 0x0C	; 12
    2656:	98 4f       	sbci	r25, 0xF8	; 248
    2658:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    265c:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    2660:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2664:	9e 89       	ldd	r25, Y+22	; 0x16
    2666:	86 89       	ldd	r24, Z+22	; 0x16
    2668:	89 17       	cp	r24, r25
    266a:	40 f4       	brcc	.+16     	; 0x267c <xTaskGenericNotify+0xec>
    266c:	0e 94 40 06 	call	0xc80	; 0xc80 <vPortYield>
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	05 c0       	rjmp	.+10     	; 0x267e <xTaskGenericNotify+0xee>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	03 c0       	rjmp	.+6      	; 0x267e <xTaskGenericNotify+0xee>
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	01 c0       	rjmp	.+2      	; 0x267e <xTaskGenericNotify+0xee>
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	0f 90       	pop	r0
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	df 91       	pop	r29
    2684:	cf 91       	pop	r28
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	08 95       	ret

0000268c <xTaskGenericNotifyFromISR>:
    268c:	ef 92       	push	r14
    268e:	ff 92       	push	r15
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	fc 01       	movw	r30, r24
    269a:	01 15       	cp	r16, r1
    269c:	11 05       	cpc	r17, r1
    269e:	49 f0       	breq	.+18     	; 0x26b2 <xTaskGenericNotifyFromISR+0x26>
    26a0:	87 a1       	ldd	r24, Z+39	; 0x27
    26a2:	90 a5       	ldd	r25, Z+40	; 0x28
    26a4:	a1 a5       	ldd	r26, Z+41	; 0x29
    26a6:	b2 a5       	ldd	r27, Z+42	; 0x2a
    26a8:	e8 01       	movw	r28, r16
    26aa:	88 83       	st	Y, r24
    26ac:	99 83       	std	Y+1, r25	; 0x01
    26ae:	aa 83       	std	Y+2, r26	; 0x02
    26b0:	bb 83       	std	Y+3, r27	; 0x03
    26b2:	83 a5       	ldd	r24, Z+43	; 0x2b
    26b4:	92 e0       	ldi	r25, 0x02	; 2
    26b6:	93 a7       	std	Z+43, r25	; 0x2b
    26b8:	22 30       	cpi	r18, 0x02	; 2
    26ba:	b1 f0       	breq	.+44     	; 0x26e8 <xTaskGenericNotifyFromISR+0x5c>
    26bc:	18 f4       	brcc	.+6      	; 0x26c4 <xTaskGenericNotifyFromISR+0x38>
    26be:	21 30       	cpi	r18, 0x01	; 1
    26c0:	31 f0       	breq	.+12     	; 0x26ce <xTaskGenericNotifyFromISR+0x42>
    26c2:	2b c0       	rjmp	.+86     	; 0x271a <xTaskGenericNotifyFromISR+0x8e>
    26c4:	23 30       	cpi	r18, 0x03	; 3
    26c6:	e9 f0       	breq	.+58     	; 0x2702 <xTaskGenericNotifyFromISR+0x76>
    26c8:	24 30       	cpi	r18, 0x04	; 4
    26ca:	01 f1       	breq	.+64     	; 0x270c <xTaskGenericNotifyFromISR+0x80>
    26cc:	26 c0       	rjmp	.+76     	; 0x271a <xTaskGenericNotifyFromISR+0x8e>
    26ce:	07 a1       	ldd	r16, Z+39	; 0x27
    26d0:	10 a5       	ldd	r17, Z+40	; 0x28
    26d2:	21 a5       	ldd	r18, Z+41	; 0x29
    26d4:	32 a5       	ldd	r19, Z+42	; 0x2a
    26d6:	40 2b       	or	r20, r16
    26d8:	51 2b       	or	r21, r17
    26da:	62 2b       	or	r22, r18
    26dc:	73 2b       	or	r23, r19
    26de:	47 a3       	std	Z+39, r20	; 0x27
    26e0:	50 a7       	std	Z+40, r21	; 0x28
    26e2:	61 a7       	std	Z+41, r22	; 0x29
    26e4:	72 a7       	std	Z+42, r23	; 0x2a
    26e6:	19 c0       	rjmp	.+50     	; 0x271a <xTaskGenericNotifyFromISR+0x8e>
    26e8:	47 a1       	ldd	r20, Z+39	; 0x27
    26ea:	50 a5       	ldd	r21, Z+40	; 0x28
    26ec:	61 a5       	ldd	r22, Z+41	; 0x29
    26ee:	72 a5       	ldd	r23, Z+42	; 0x2a
    26f0:	4f 5f       	subi	r20, 0xFF	; 255
    26f2:	5f 4f       	sbci	r21, 0xFF	; 255
    26f4:	6f 4f       	sbci	r22, 0xFF	; 255
    26f6:	7f 4f       	sbci	r23, 0xFF	; 255
    26f8:	47 a3       	std	Z+39, r20	; 0x27
    26fa:	50 a7       	std	Z+40, r21	; 0x28
    26fc:	61 a7       	std	Z+41, r22	; 0x29
    26fe:	72 a7       	std	Z+42, r23	; 0x2a
    2700:	0c c0       	rjmp	.+24     	; 0x271a <xTaskGenericNotifyFromISR+0x8e>
    2702:	47 a3       	std	Z+39, r20	; 0x27
    2704:	50 a7       	std	Z+40, r21	; 0x28
    2706:	61 a7       	std	Z+41, r22	; 0x29
    2708:	72 a7       	std	Z+42, r23	; 0x2a
    270a:	07 c0       	rjmp	.+14     	; 0x271a <xTaskGenericNotifyFromISR+0x8e>
    270c:	82 30       	cpi	r24, 0x02	; 2
    270e:	09 f4       	brne	.+2      	; 0x2712 <xTaskGenericNotifyFromISR+0x86>
    2710:	41 c0       	rjmp	.+130    	; 0x2794 <xTaskGenericNotifyFromISR+0x108>
    2712:	47 a3       	std	Z+39, r20	; 0x27
    2714:	50 a7       	std	Z+40, r21	; 0x28
    2716:	61 a7       	std	Z+41, r22	; 0x29
    2718:	72 a7       	std	Z+42, r23	; 0x2a
    271a:	81 30       	cpi	r24, 0x01	; 1
    271c:	e9 f5       	brne	.+122    	; 0x2798 <xTaskGenericNotifyFromISR+0x10c>
    271e:	ef 01       	movw	r28, r30
    2720:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxSchedulerSuspended>
    2724:	81 11       	cpse	r24, r1
    2726:	1d c0       	rjmp	.+58     	; 0x2762 <xTaskGenericNotifyFromISR+0xd6>
    2728:	8f 01       	movw	r16, r30
    272a:	0e 5f       	subi	r16, 0xFE	; 254
    272c:	1f 4f       	sbci	r17, 0xFF	; 255
    272e:	c8 01       	movw	r24, r16
    2730:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
    2734:	8e 89       	ldd	r24, Y+22	; 0x16
    2736:	90 91 be 07 	lds	r25, 0x07BE	; 0x8007be <uxTopReadyPriority>
    273a:	98 17       	cp	r25, r24
    273c:	10 f4       	brcc	.+4      	; 0x2742 <xTaskGenericNotifyFromISR+0xb6>
    273e:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxTopReadyPriority>
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9c 01       	movw	r18, r24
    2746:	22 0f       	add	r18, r18
    2748:	33 1f       	adc	r19, r19
    274a:	22 0f       	add	r18, r18
    274c:	33 1f       	adc	r19, r19
    274e:	22 0f       	add	r18, r18
    2750:	33 1f       	adc	r19, r19
    2752:	82 0f       	add	r24, r18
    2754:	93 1f       	adc	r25, r19
    2756:	b8 01       	movw	r22, r16
    2758:	8c 50       	subi	r24, 0x0C	; 12
    275a:	98 4f       	sbci	r25, 0xF8	; 248
    275c:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    2760:	07 c0       	rjmp	.+14     	; 0x2770 <xTaskGenericNotifyFromISR+0xe4>
    2762:	bf 01       	movw	r22, r30
    2764:	64 5f       	subi	r22, 0xF4	; 244
    2766:	7f 4f       	sbci	r23, 0xFF	; 255
    2768:	85 ed       	ldi	r24, 0xD5	; 213
    276a:	97 e0       	ldi	r25, 0x07	; 7
    276c:	0e 94 19 05 	call	0xa32	; 0xa32 <vListInsertEnd>
    2770:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <pxCurrentTCB>
    2774:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <pxCurrentTCB+0x1>
    2778:	9e 89       	ldd	r25, Y+22	; 0x16
    277a:	86 89       	ldd	r24, Z+22	; 0x16
    277c:	89 17       	cp	r24, r25
    277e:	70 f4       	brcc	.+28     	; 0x279c <xTaskGenericNotifyFromISR+0x110>
    2780:	e1 14       	cp	r14, r1
    2782:	f1 04       	cpc	r15, r1
    2784:	19 f0       	breq	.+6      	; 0x278c <xTaskGenericNotifyFromISR+0x100>
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	f7 01       	movw	r30, r14
    278a:	80 83       	st	Z, r24
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xYieldPending>
    2792:	05 c0       	rjmp	.+10     	; 0x279e <xTaskGenericNotifyFromISR+0x112>
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	03 c0       	rjmp	.+6      	; 0x279e <xTaskGenericNotifyFromISR+0x112>
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	01 c0       	rjmp	.+2      	; 0x279e <xTaskGenericNotifyFromISR+0x112>
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	1f 91       	pop	r17
    27a4:	0f 91       	pop	r16
    27a6:	ff 90       	pop	r15
    27a8:	ef 90       	pop	r14
    27aa:	08 95       	ret

000027ac <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	21 f4       	brne	.+8      	; 0x27b8 <xTaskNotifyStateClear+0xc>
    27b0:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <pxCurrentTCB>
    27b4:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    27be:	fc 01       	movw	r30, r24
    27c0:	23 a5       	ldd	r18, Z+43	; 0x2b
    27c2:	22 30       	cpi	r18, 0x02	; 2
    27c4:	19 f4       	brne	.+6      	; 0x27cc <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    27c6:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    27cc:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    27ce:	0f 90       	pop	r0
    27d0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    27d2:	08 95       	ret

000027d4 <prvInsertTimerInActiveList>:
    27d4:	fc 01       	movw	r30, r24
    27d6:	73 83       	std	Z+3, r23	; 0x03
    27d8:	62 83       	std	Z+2, r22	; 0x02
    27da:	91 87       	std	Z+9, r25	; 0x09
    27dc:	80 87       	std	Z+8, r24	; 0x08
    27de:	46 17       	cp	r20, r22
    27e0:	57 07       	cpc	r21, r23
    27e2:	90 f0       	brcs	.+36     	; 0x2808 <prvInsertTimerInActiveList+0x34>
    27e4:	42 1b       	sub	r20, r18
    27e6:	53 0b       	sbc	r21, r19
    27e8:	84 85       	ldd	r24, Z+12	; 0x0c
    27ea:	95 85       	ldd	r25, Z+13	; 0x0d
    27ec:	48 17       	cp	r20, r24
    27ee:	59 07       	cpc	r21, r25
    27f0:	e0 f4       	brcc	.+56     	; 0x282a <prvInsertTimerInActiveList+0x56>
    27f2:	bf 01       	movw	r22, r30
    27f4:	6e 5f       	subi	r22, 0xFE	; 254
    27f6:	7f 4f       	sbci	r23, 0xFF	; 255
    27f8:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <pxOverflowTimerList>
    27fc:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <pxOverflowTimerList+0x1>
    2800:	0e 94 3a 05 	call	0xa74	; 0xa74 <vListInsert>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	08 95       	ret
    2808:	42 17       	cp	r20, r18
    280a:	53 07       	cpc	r21, r19
    280c:	18 f4       	brcc	.+6      	; 0x2814 <prvInsertTimerInActiveList+0x40>
    280e:	62 17       	cp	r22, r18
    2810:	73 07       	cpc	r23, r19
    2812:	68 f4       	brcc	.+26     	; 0x282e <prvInsertTimerInActiveList+0x5a>
    2814:	bf 01       	movw	r22, r30
    2816:	6e 5f       	subi	r22, 0xFE	; 254
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <pxCurrentTimerList>
    281e:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <pxCurrentTimerList+0x1>
    2822:	0e 94 3a 05 	call	0xa74	; 0xa74 <vListInsert>
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	08 95       	ret
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	08 95       	ret
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	08 95       	ret

00002832 <prvCheckForValidListAndQueue>:
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	0f 92       	push	r0
    2838:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xTimerQueue>
    283c:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xTimerQueue+0x1>
    2840:	89 2b       	or	r24, r25
    2842:	e9 f4       	brne	.+58     	; 0x287e <prvCheckForValidListAndQueue+0x4c>
    2844:	8d e2       	ldi	r24, 0x2D	; 45
    2846:	98 e0       	ldi	r25, 0x08	; 8
    2848:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    284c:	84 e2       	ldi	r24, 0x24	; 36
    284e:	98 e0       	ldi	r25, 0x08	; 8
    2850:	0e 94 07 05 	call	0xa0e	; 0xa0e <vListInitialise>
    2854:	8d e2       	ldi	r24, 0x2D	; 45
    2856:	98 e0       	ldi	r25, 0x08	; 8
    2858:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <pxCurrentTimerList+0x1>
    285c:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <pxCurrentTimerList>
    2860:	84 e2       	ldi	r24, 0x24	; 36
    2862:	98 e0       	ldi	r25, 0x08	; 8
    2864:	90 93 21 08 	sts	0x0821, r25	; 0x800821 <pxOverflowTimerList+0x1>
    2868:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <pxOverflowTimerList>
    286c:	40 e0       	ldi	r20, 0x00	; 0
    286e:	65 e0       	ldi	r22, 0x05	; 5
    2870:	8a e0       	ldi	r24, 0x0A	; 10
    2872:	0e 94 1b 08 	call	0x1036	; 0x1036 <xQueueGenericCreate>
    2876:	90 93 1f 08 	sts	0x081F, r25	; 0x80081f <xTimerQueue+0x1>
    287a:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <xTimerQueue>
    287e:	0f 90       	pop	r0
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	08 95       	ret

00002884 <xTimerCreateTimerTask>:
    2884:	ef 92       	push	r14
    2886:	ff 92       	push	r15
    2888:	0f 93       	push	r16
    288a:	d3 df       	rcall	.-90     	; 0x2832 <prvCheckForValidListAndQueue>
    288c:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xTimerQueue>
    2890:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xTimerQueue+0x1>
    2894:	89 2b       	or	r24, r25
    2896:	89 f0       	breq	.+34     	; 0x28ba <xTimerCreateTimerTask+0x36>
    2898:	0f 2e       	mov	r0, r31
    289a:	fc e1       	ldi	r31, 0x1C	; 28
    289c:	ef 2e       	mov	r14, r31
    289e:	f8 e0       	ldi	r31, 0x08	; 8
    28a0:	ff 2e       	mov	r15, r31
    28a2:	f0 2d       	mov	r31, r0
    28a4:	06 e0       	ldi	r16, 0x06	; 6
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	45 e5       	ldi	r20, 0x55	; 85
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	6d ec       	ldi	r22, 0xCD	; 205
    28b0:	74 e0       	ldi	r23, 0x04	; 4
    28b2:	83 e0       	ldi	r24, 0x03	; 3
    28b4:	91 e0       	ldi	r25, 0x01	; 1
    28b6:	d6 d8       	rcall	.-3668   	; 0x1a64 <xTaskCreate>
    28b8:	01 c0       	rjmp	.+2      	; 0x28bc <xTimerCreateTimerTask+0x38>
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	0f 91       	pop	r16
    28be:	ff 90       	pop	r15
    28c0:	ef 90       	pop	r14
    28c2:	08 95       	ret

000028c4 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    28c4:	0f 93       	push	r16
    28c6:	1f 93       	push	r17
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <xTimerGenericCommand+0xa>
    28ce:	1f 92       	push	r1
    28d0:	1f 92       	push	r1
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    28d6:	e0 91 1e 08 	lds	r30, 0x081E	; 0x80081e <xTimerQueue>
    28da:	f0 91 1f 08 	lds	r31, 0x081F	; 0x80081f <xTimerQueue+0x1>
    28de:	30 97       	sbiw	r30, 0x00	; 0
    28e0:	69 f1       	breq	.+90     	; 0x293c <xTimerGenericCommand+0x78>
    28e2:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    28e4:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    28e6:	5b 83       	std	Y+3, r21	; 0x03
    28e8:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    28ea:	9d 83       	std	Y+5, r25	; 0x05
    28ec:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    28ee:	66 30       	cpi	r22, 0x06	; 6
    28f0:	e4 f4       	brge	.+56     	; 0x292a <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    28f2:	a9 dc       	rcall	.-1710   	; 0x2246 <xTaskGetSchedulerState>
    28f4:	82 30       	cpi	r24, 0x02	; 2
    28f6:	61 f4       	brne	.+24     	; 0x2910 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	a8 01       	movw	r20, r16
    28fc:	be 01       	movw	r22, r28
    28fe:	6f 5f       	subi	r22, 0xFF	; 255
    2900:	7f 4f       	sbci	r23, 0xFF	; 255
    2902:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xTimerQueue>
    2906:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xTimerQueue+0x1>
    290a:	0e 94 49 08 	call	0x1092	; 0x1092 <xQueueGenericSend>
    290e:	17 c0       	rjmp	.+46     	; 0x293e <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	be 01       	movw	r22, r28
    2918:	6f 5f       	subi	r22, 0xFF	; 255
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <xTimerQueue>
    2920:	90 91 1f 08 	lds	r25, 0x081F	; 0x80081f <xTimerQueue+0x1>
    2924:	0e 94 49 08 	call	0x1092	; 0x1092 <xQueueGenericSend>
    2928:	0a c0       	rjmp	.+20     	; 0x293e <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	ad 01       	movw	r20, r26
    292e:	be 01       	movw	r22, r28
    2930:	6f 5f       	subi	r22, 0xFF	; 255
    2932:	7f 4f       	sbci	r23, 0xFF	; 255
    2934:	cf 01       	movw	r24, r30
    2936:	0e 94 f6 08 	call	0x11ec	; 0x11ec <xQueueGenericSendFromISR>
    293a:	01 c0       	rjmp	.+2      	; 0x293e <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    293c:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	08 95       	ret

00002952 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2952:	af 92       	push	r10
    2954:	bf 92       	push	r11
    2956:	cf 92       	push	r12
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2968:	d4 d9       	rcall	.-3160   	; 0x1d12 <xTaskGetTickCount>
    296a:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    296c:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <xLastTime.2432>
    2970:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <xLastTime.2432+0x1>
    2974:	e8 16       	cp	r14, r24
    2976:	f9 06       	cpc	r15, r25
    2978:	08 f0       	brcs	.+2      	; 0x297c <prvSampleTimeNow+0x2a>
    297a:	47 c0       	rjmp	.+142    	; 0x2a0a <prvSampleTimeNow+0xb8>
    297c:	2f c0       	rjmp	.+94     	; 0x29dc <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    297e:	05 80       	ldd	r0, Z+5	; 0x05
    2980:	f6 81       	ldd	r31, Z+6	; 0x06
    2982:	e0 2d       	mov	r30, r0
    2984:	a0 80       	ld	r10, Z
    2986:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2988:	c6 81       	ldd	r28, Z+6	; 0x06
    298a:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    298c:	8e 01       	movw	r16, r28
    298e:	0e 5f       	subi	r16, 0xFE	; 254
    2990:	1f 4f       	sbci	r17, 0xFF	; 255
    2992:	c8 01       	movw	r24, r16
    2994:	0e 94 6b 05 	call	0xad6	; 0xad6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2998:	e8 89       	ldd	r30, Y+16	; 0x10
    299a:	f9 89       	ldd	r31, Y+17	; 0x11
    299c:	ce 01       	movw	r24, r28
    299e:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    29a0:	8b 89       	ldd	r24, Y+19	; 0x13
    29a2:	82 ff       	sbrs	r24, 2
    29a4:	1b c0       	rjmp	.+54     	; 0x29dc <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    29a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    29a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    29aa:	8a 0d       	add	r24, r10
    29ac:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    29ae:	a8 16       	cp	r10, r24
    29b0:	b9 06       	cpc	r11, r25
    29b2:	60 f4       	brcc	.+24     	; 0x29cc <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    29b4:	9b 83       	std	Y+3, r25	; 0x03
    29b6:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    29b8:	d9 87       	std	Y+9, r29	; 0x09
    29ba:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    29bc:	b8 01       	movw	r22, r16
    29be:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <pxCurrentTimerList>
    29c2:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <pxCurrentTimerList+0x1>
    29c6:	0e 94 3a 05 	call	0xa74	; 0xa74 <vListInsert>
    29ca:	08 c0       	rjmp	.+16     	; 0x29dc <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    29cc:	00 e0       	ldi	r16, 0x00	; 0
    29ce:	10 e0       	ldi	r17, 0x00	; 0
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	a5 01       	movw	r20, r10
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	ce 01       	movw	r24, r28
    29da:	74 df       	rcall	.-280    	; 0x28c4 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    29dc:	e0 91 22 08 	lds	r30, 0x0822	; 0x800822 <pxCurrentTimerList>
    29e0:	f0 91 23 08 	lds	r31, 0x0823	; 0x800823 <pxCurrentTimerList+0x1>
    29e4:	80 81       	ld	r24, Z
    29e6:	81 11       	cpse	r24, r1
    29e8:	ca cf       	rjmp	.-108    	; 0x297e <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    29ea:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <pxOverflowTimerList>
    29ee:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <pxOverflowTimerList+0x1>
    29f2:	90 93 23 08 	sts	0x0823, r25	; 0x800823 <pxCurrentTimerList+0x1>
    29f6:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    29fa:	f0 93 21 08 	sts	0x0821, r31	; 0x800821 <pxOverflowTimerList+0x1>
    29fe:	e0 93 20 08 	sts	0x0820, r30	; 0x800820 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	f6 01       	movw	r30, r12
    2a06:	80 83       	st	Z, r24
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2a0a:	f6 01       	movw	r30, r12
    2a0c:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2a0e:	f0 92 1b 08 	sts	0x081B, r15	; 0x80081b <xLastTime.2432+0x1>
    2a12:	e0 92 1a 08 	sts	0x081A, r14	; 0x80081a <xLastTime.2432>

    return xTimeNow;
}
    2a16:	c7 01       	movw	r24, r14
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	df 90       	pop	r13
    2a26:	cf 90       	pop	r12
    2a28:	bf 90       	pop	r11
    2a2a:	af 90       	pop	r10
    2a2c:	08 95       	ret

00002a2e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2a2e:	08 95       	ret

00002a30 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2a30:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2a32:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a34:	2f ef       	ldi	r18, 0xFF	; 255
    2a36:	80 e7       	ldi	r24, 0x70	; 112
    2a38:	92 e0       	ldi	r25, 0x02	; 2
    2a3a:	21 50       	subi	r18, 0x01	; 1
    2a3c:	80 40       	sbci	r24, 0x00	; 0
    2a3e:	90 40       	sbci	r25, 0x00	; 0
    2a40:	e1 f7       	brne	.-8      	; 0x2a3a <vApplicationMallocFailedHook+0xa>
    2a42:	00 c0       	rjmp	.+0      	; 0x2a44 <vApplicationMallocFailedHook+0x14>
    2a44:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2a46:	1f 9a       	sbi	0x03, 7	; 3
    2a48:	f5 cf       	rjmp	.-22     	; 0x2a34 <vApplicationMallocFailedHook+0x4>

00002a4a <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2a4a:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2a4c:	2f 9a       	sbi	0x05, 7	; 5
    2a4e:	2f ef       	ldi	r18, 0xFF	; 255
    2a50:	87 ea       	ldi	r24, 0xA7	; 167
    2a52:	91 e6       	ldi	r25, 0x61	; 97
    2a54:	21 50       	subi	r18, 0x01	; 1
    2a56:	80 40       	sbci	r24, 0x00	; 0
    2a58:	90 40       	sbci	r25, 0x00	; 0
    2a5a:	e1 f7       	brne	.-8      	; 0x2a54 <vApplicationStackOverflowHook+0xa>
    2a5c:	00 c0       	rjmp	.+0      	; 0x2a5e <vApplicationStackOverflowHook+0x14>
    2a5e:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2a60:	1f 9a       	sbi	0x03, 7	; 3
    2a62:	f5 cf       	rjmp	.-22     	; 0x2a4e <vApplicationStackOverflowHook+0x4>

00002a64 <__fixsfsi>:
    2a64:	04 d0       	rcall	.+8      	; 0x2a6e <__fixunssfsi>
    2a66:	68 94       	set
    2a68:	b1 11       	cpse	r27, r1
    2a6a:	50 c0       	rjmp	.+160    	; 0x2b0c <__fp_szero>
    2a6c:	08 95       	ret

00002a6e <__fixunssfsi>:
    2a6e:	33 d0       	rcall	.+102    	; 0x2ad6 <__fp_splitA>
    2a70:	88 f0       	brcs	.+34     	; 0x2a94 <__fixunssfsi+0x26>
    2a72:	9f 57       	subi	r25, 0x7F	; 127
    2a74:	90 f0       	brcs	.+36     	; 0x2a9a <__fixunssfsi+0x2c>
    2a76:	b9 2f       	mov	r27, r25
    2a78:	99 27       	eor	r25, r25
    2a7a:	b7 51       	subi	r27, 0x17	; 23
    2a7c:	a0 f0       	brcs	.+40     	; 0x2aa6 <__fixunssfsi+0x38>
    2a7e:	d1 f0       	breq	.+52     	; 0x2ab4 <__fixunssfsi+0x46>
    2a80:	66 0f       	add	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	88 1f       	adc	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	1a f0       	brmi	.+6      	; 0x2a90 <__fixunssfsi+0x22>
    2a8a:	ba 95       	dec	r27
    2a8c:	c9 f7       	brne	.-14     	; 0x2a80 <__fixunssfsi+0x12>
    2a8e:	12 c0       	rjmp	.+36     	; 0x2ab4 <__fixunssfsi+0x46>
    2a90:	b1 30       	cpi	r27, 0x01	; 1
    2a92:	81 f0       	breq	.+32     	; 0x2ab4 <__fixunssfsi+0x46>
    2a94:	3a d0       	rcall	.+116    	; 0x2b0a <__fp_zero>
    2a96:	b1 e0       	ldi	r27, 0x01	; 1
    2a98:	08 95       	ret
    2a9a:	37 c0       	rjmp	.+110    	; 0x2b0a <__fp_zero>
    2a9c:	67 2f       	mov	r22, r23
    2a9e:	78 2f       	mov	r23, r24
    2aa0:	88 27       	eor	r24, r24
    2aa2:	b8 5f       	subi	r27, 0xF8	; 248
    2aa4:	39 f0       	breq	.+14     	; 0x2ab4 <__fixunssfsi+0x46>
    2aa6:	b9 3f       	cpi	r27, 0xF9	; 249
    2aa8:	cc f3       	brlt	.-14     	; 0x2a9c <__fixunssfsi+0x2e>
    2aaa:	86 95       	lsr	r24
    2aac:	77 95       	ror	r23
    2aae:	67 95       	ror	r22
    2ab0:	b3 95       	inc	r27
    2ab2:	d9 f7       	brne	.-10     	; 0x2aaa <__fixunssfsi+0x3c>
    2ab4:	3e f4       	brtc	.+14     	; 0x2ac4 <__fixunssfsi+0x56>
    2ab6:	90 95       	com	r25
    2ab8:	80 95       	com	r24
    2aba:	70 95       	com	r23
    2abc:	61 95       	neg	r22
    2abe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac4:	08 95       	ret

00002ac6 <__fp_split3>:
    2ac6:	57 fd       	sbrc	r21, 7
    2ac8:	90 58       	subi	r25, 0x80	; 128
    2aca:	44 0f       	add	r20, r20
    2acc:	55 1f       	adc	r21, r21
    2ace:	59 f0       	breq	.+22     	; 0x2ae6 <__fp_splitA+0x10>
    2ad0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ad2:	71 f0       	breq	.+28     	; 0x2af0 <__fp_splitA+0x1a>
    2ad4:	47 95       	ror	r20

00002ad6 <__fp_splitA>:
    2ad6:	88 0f       	add	r24, r24
    2ad8:	97 fb       	bst	r25, 7
    2ada:	99 1f       	adc	r25, r25
    2adc:	61 f0       	breq	.+24     	; 0x2af6 <__fp_splitA+0x20>
    2ade:	9f 3f       	cpi	r25, 0xFF	; 255
    2ae0:	79 f0       	breq	.+30     	; 0x2b00 <__fp_splitA+0x2a>
    2ae2:	87 95       	ror	r24
    2ae4:	08 95       	ret
    2ae6:	12 16       	cp	r1, r18
    2ae8:	13 06       	cpc	r1, r19
    2aea:	14 06       	cpc	r1, r20
    2aec:	55 1f       	adc	r21, r21
    2aee:	f2 cf       	rjmp	.-28     	; 0x2ad4 <__fp_split3+0xe>
    2af0:	46 95       	lsr	r20
    2af2:	f1 df       	rcall	.-30     	; 0x2ad6 <__fp_splitA>
    2af4:	08 c0       	rjmp	.+16     	; 0x2b06 <__fp_splitA+0x30>
    2af6:	16 16       	cp	r1, r22
    2af8:	17 06       	cpc	r1, r23
    2afa:	18 06       	cpc	r1, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	f1 cf       	rjmp	.-30     	; 0x2ae2 <__fp_splitA+0xc>
    2b00:	86 95       	lsr	r24
    2b02:	71 05       	cpc	r23, r1
    2b04:	61 05       	cpc	r22, r1
    2b06:	08 94       	sec
    2b08:	08 95       	ret

00002b0a <__fp_zero>:
    2b0a:	e8 94       	clt

00002b0c <__fp_szero>:
    2b0c:	bb 27       	eor	r27, r27
    2b0e:	66 27       	eor	r22, r22
    2b10:	77 27       	eor	r23, r23
    2b12:	cb 01       	movw	r24, r22
    2b14:	97 f9       	bld	r25, 7
    2b16:	08 95       	ret

00002b18 <usart_getchar>:
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	1f 92       	push	r1
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	be 01       	movw	r22, r28
    2b24:	6f 5f       	subi	r22, 0xFF	; 255
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255
    2b28:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <_com_serial_instance>
    2b2c:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <_com_serial_instance+0x1>
    2b30:	4e d1       	rcall	.+668    	; 0x2dce <serial_get_byte>
    2b32:	81 11       	cpse	r24, r1
    2b34:	f6 cf       	rjmp	.-20     	; 0x2b22 <usart_getchar+0xa>
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0f 90       	pop	r0
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	08 95       	ret

00002b42 <usart_putchar>:
    2b42:	68 2f       	mov	r22, r24
    2b44:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <_com_serial_instance>
    2b48:	90 91 37 08 	lds	r25, 0x0837	; 0x800837 <_com_serial_instance+0x1>
    2b4c:	cb d0       	rcall	.+406    	; 0x2ce4 <serial_send_byte>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	08 95       	ret

00002b54 <stdioCreate>:
    2b54:	8f 92       	push	r8
    2b56:	9f 92       	push	r9
    2b58:	af 92       	push	r10
    2b5a:	cf 92       	push	r12
    2b5c:	ef 92       	push	r14
    2b5e:	0f 93       	push	r16
    2b60:	81 2c       	mov	r8, r1
    2b62:	91 2c       	mov	r9, r1
    2b64:	68 94       	set
    2b66:	aa 24       	eor	r10, r10
    2b68:	a7 f8       	bld	r10, 7
    2b6a:	68 94       	set
    2b6c:	cc 24       	eor	r12, r12
    2b6e:	c7 f8       	bld	r12, 7
    2b70:	e1 2c       	mov	r14, r1
    2b72:	00 e0       	ldi	r16, 0x00	; 0
    2b74:	23 e0       	ldi	r18, 0x03	; 3
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	51 ee       	ldi	r21, 0xE1	; 225
    2b7a:	60 e0       	ldi	r22, 0x00	; 0
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	13 d0       	rcall	.+38     	; 0x2ba6 <serial_new_instance>
    2b80:	90 93 37 08 	sts	0x0837, r25	; 0x800837 <_com_serial_instance+0x1>
    2b84:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <_com_serial_instance>
    2b88:	e8 e2       	ldi	r30, 0x28	; 40
    2b8a:	fa e0       	ldi	r31, 0x0A	; 10
    2b8c:	86 e0       	ldi	r24, 0x06	; 6
    2b8e:	92 e0       	ldi	r25, 0x02	; 2
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	93 83       	std	Z+3, r25	; 0x03
    2b96:	82 83       	std	Z+2, r24	; 0x02
    2b98:	0f 91       	pop	r16
    2b9a:	ef 90       	pop	r14
    2b9c:	cf 90       	pop	r12
    2b9e:	af 90       	pop	r10
    2ba0:	9f 90       	pop	r9
    2ba2:	8f 90       	pop	r8
    2ba4:	08 95       	ret

00002ba6 <serial_new_instance>:
    2ba6:	2f 92       	push	r2
    2ba8:	3f 92       	push	r3
    2baa:	4f 92       	push	r4
    2bac:	5f 92       	push	r5
    2bae:	6f 92       	push	r6
    2bb0:	7f 92       	push	r7
    2bb2:	8f 92       	push	r8
    2bb4:	9f 92       	push	r9
    2bb6:	af 92       	push	r10
    2bb8:	cf 92       	push	r12
    2bba:	ef 92       	push	r14
    2bbc:	ff 92       	push	r15
    2bbe:	0f 93       	push	r16
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	f8 2e       	mov	r15, r24
    2bcc:	2a 01       	movw	r4, r20
    2bce:	3b 01       	movw	r6, r22
    2bd0:	88 e0       	ldi	r24, 0x08	; 8
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 a8 25 	call	0x4b50	; 0x4b50 <malloc>
    2bd8:	8c 01       	movw	r16, r24
    2bda:	8f 2d       	mov	r24, r15
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	fc 01       	movw	r30, r24
    2be4:	e8 5c       	subi	r30, 0xC8	; 200
    2be6:	f7 4f       	sbci	r31, 0xF7	; 247
    2be8:	11 83       	std	Z+1, r17	; 0x01
    2bea:	00 83       	st	Z, r16
    2bec:	fc 01       	movw	r30, r24
    2bee:	ec 5e       	subi	r30, 0xEC	; 236
    2bf0:	fd 4f       	sbci	r31, 0xFD	; 253
    2bf2:	80 81       	ld	r24, Z
    2bf4:	91 81       	ldd	r25, Z+1	; 0x01
    2bf6:	d8 01       	movw	r26, r16
    2bf8:	8d 93       	st	X+, r24
    2bfa:	9c 93       	st	X, r25
    2bfc:	6c 2d       	mov	r22, r12
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	84 e0       	ldi	r24, 0x04	; 4
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <calloc>
    2c08:	1c 01       	movw	r2, r24
    2c0a:	61 e0       	ldi	r22, 0x01	; 1
    2c0c:	70 e0       	ldi	r23, 0x00	; 0
    2c0e:	86 e0       	ldi	r24, 0x06	; 6
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <calloc>
    2c16:	7c 01       	movw	r14, r24
    2c18:	4c 2d       	mov	r20, r12
    2c1a:	b1 01       	movw	r22, r2
    2c1c:	4c d3       	rcall	.+1688   	; 0x32b6 <fifo_init>
    2c1e:	f8 01       	movw	r30, r16
    2c20:	f5 82       	std	Z+5, r15	; 0x05
    2c22:	e4 82       	std	Z+4, r14	; 0x04
    2c24:	6a 2d       	mov	r22, r10
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	84 e0       	ldi	r24, 0x04	; 4
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <calloc>
    2c30:	1c 01       	movw	r2, r24
    2c32:	61 e0       	ldi	r22, 0x01	; 1
    2c34:	70 e0       	ldi	r23, 0x00	; 0
    2c36:	86 e0       	ldi	r24, 0x06	; 6
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <calloc>
    2c3e:	7c 01       	movw	r14, r24
    2c40:	4a 2d       	mov	r20, r10
    2c42:	b1 01       	movw	r22, r2
    2c44:	38 d3       	rcall	.+1648   	; 0x32b6 <fifo_init>
    2c46:	d8 01       	movw	r26, r16
    2c48:	13 96       	adiw	r26, 0x03	; 3
    2c4a:	fc 92       	st	X, r15
    2c4c:	ee 92       	st	-X, r14
    2c4e:	12 97       	sbiw	r26, 0x02	; 2
    2c50:	17 96       	adiw	r26, 0x07	; 7
    2c52:	9c 92       	st	X, r9
    2c54:	8e 92       	st	-X, r8
    2c56:	16 97       	sbiw	r26, 0x06	; 6
    2c58:	ff b6       	in	r15, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	ed 91       	ld	r30, X+
    2c5e:	fc 91       	ld	r31, X
    2c60:	11 97       	sbiw	r26, 0x01	; 1
    2c62:	36 97       	sbiw	r30, 0x06	; 6
    2c64:	80 81       	ld	r24, Z
    2c66:	82 60       	ori	r24, 0x02	; 2
    2c68:	80 83       	st	Z, r24
    2c6a:	8d 90       	ld	r8, X+
    2c6c:	9c 90       	ld	r9, X
    2c6e:	c3 01       	movw	r24, r6
    2c70:	b2 01       	movw	r22, r4
    2c72:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__floatunsisf>
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	51 e4       	ldi	r21, 0x41	; 65
    2c7e:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__mulsf3>
    2c82:	9b 01       	movw	r18, r22
    2c84:	ac 01       	movw	r20, r24
    2c86:	60 e0       	ldi	r22, 0x00	; 0
    2c88:	74 e2       	ldi	r23, 0x24	; 36
    2c8a:	84 e7       	ldi	r24, 0x74	; 116
    2c8c:	9b e4       	ldi	r25, 0x4B	; 75
    2c8e:	0e 94 06 24 	call	0x480c	; 0x480c <__divsf3>
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e8       	ldi	r20, 0x80	; 128
    2c98:	5f e3       	ldi	r21, 0x3F	; 63
    2c9a:	0e 94 9f 23 	call	0x473e	; 0x473e <__subsf3>
    2c9e:	e7 de       	rcall	.-562    	; 0x2a6e <__fixunssfsi>
    2ca0:	f4 01       	movw	r30, r8
    2ca2:	32 97       	sbiw	r30, 0x02	; 2
    2ca4:	60 83       	st	Z, r22
    2ca6:	d8 01       	movw	r26, r16
    2ca8:	ed 91       	ld	r30, X+
    2caa:	fc 91       	ld	r31, X
    2cac:	11 97       	sbiw	r26, 0x01	; 1
    2cae:	35 97       	sbiw	r30, 0x05	; 5
    2cb0:	88 e9       	ldi	r24, 0x98	; 152
    2cb2:	80 83       	st	Z, r24
    2cb4:	ed 91       	ld	r30, X+
    2cb6:	fc 91       	ld	r31, X
    2cb8:	34 97       	sbiw	r30, 0x04	; 4
    2cba:	86 e0       	ldi	r24, 0x06	; 6
    2cbc:	80 83       	st	Z, r24
    2cbe:	ff be       	out	0x3f, r15	; 63
    2cc0:	c8 01       	movw	r24, r16
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	1f 91       	pop	r17
    2cc8:	0f 91       	pop	r16
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	cf 90       	pop	r12
    2cd0:	af 90       	pop	r10
    2cd2:	9f 90       	pop	r9
    2cd4:	8f 90       	pop	r8
    2cd6:	7f 90       	pop	r7
    2cd8:	6f 90       	pop	r6
    2cda:	5f 90       	pop	r5
    2cdc:	4f 90       	pop	r4
    2cde:	3f 90       	pop	r3
    2ce0:	2f 90       	pop	r2
    2ce2:	08 95       	ret

00002ce4 <serial_send_byte>:
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	ec 01       	movw	r28, r24
    2cea:	ea 81       	ldd	r30, Y+2	; 0x02
    2cec:	fb 81       	ldd	r31, Y+3	; 0x03
    2cee:	93 81       	ldd	r25, Z+3	; 0x03
    2cf0:	82 81       	ldd	r24, Z+2	; 0x02
    2cf2:	25 81       	ldd	r18, Z+5	; 0x05
    2cf4:	98 1b       	sub	r25, r24
    2cf6:	92 23       	and	r25, r18
    2cf8:	84 81       	ldd	r24, Z+4	; 0x04
    2cfa:	98 17       	cp	r25, r24
    2cfc:	a1 f0       	breq	.+40     	; 0x2d26 <serial_send_byte+0x42>
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	26 95       	lsr	r18
    2d02:	29 23       	and	r18, r25
    2d04:	a0 81       	ld	r26, Z
    2d06:	b1 81       	ldd	r27, Z+1	; 0x01
    2d08:	a2 0f       	add	r26, r18
    2d0a:	b1 1d       	adc	r27, r1
    2d0c:	6c 93       	st	X, r22
    2d0e:	9f 5f       	subi	r25, 0xFF	; 255
    2d10:	25 81       	ldd	r18, Z+5	; 0x05
    2d12:	92 23       	and	r25, r18
    2d14:	93 83       	std	Z+3, r25	; 0x03
    2d16:	e8 81       	ld	r30, Y
    2d18:	f9 81       	ldd	r31, Y+1	; 0x01
    2d1a:	35 97       	sbiw	r30, 0x05	; 5
    2d1c:	80 81       	ld	r24, Z
    2d1e:	80 62       	ori	r24, 0x20	; 32
    2d20:	80 83       	st	Z, r24
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	01 c0       	rjmp	.+2      	; 0x2d28 <serial_send_byte+0x44>
    2d26:	82 e0       	ldi	r24, 0x02	; 2
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	08 95       	ret

00002d2e <serial_send_bytes>:
    2d2e:	ef 92       	push	r14
    2d30:	ff 92       	push	r15
    2d32:	0f 93       	push	r16
    2d34:	1f 93       	push	r17
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	7c 01       	movw	r14, r24
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	12 96       	adiw	r26, 0x02	; 2
    2d40:	ed 91       	ld	r30, X+
    2d42:	fc 91       	ld	r31, X
    2d44:	13 97       	sbiw	r26, 0x03	; 3
    2d46:	93 81       	ldd	r25, Z+3	; 0x03
    2d48:	82 81       	ldd	r24, Z+2	; 0x02
    2d4a:	98 1b       	sub	r25, r24
    2d4c:	85 81       	ldd	r24, Z+5	; 0x05
    2d4e:	98 23       	and	r25, r24
    2d50:	84 81       	ldd	r24, Z+4	; 0x04
    2d52:	89 1b       	sub	r24, r25
    2d54:	86 17       	cp	r24, r22
    2d56:	98 f1       	brcs	.+102    	; 0x2dbe <serial_send_bytes+0x90>
    2d58:	66 23       	and	r22, r22
    2d5a:	41 f1       	breq	.+80     	; 0x2dac <serial_send_bytes+0x7e>
    2d5c:	84 2f       	mov	r24, r20
    2d5e:	95 2f       	mov	r25, r21
    2d60:	dc 01       	movw	r26, r24
    2d62:	61 50       	subi	r22, 0x01	; 1
    2d64:	46 2f       	mov	r20, r22
    2d66:	50 e0       	ldi	r21, 0x00	; 0
    2d68:	4f 5f       	subi	r20, 0xFF	; 255
    2d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6c:	48 0f       	add	r20, r24
    2d6e:	59 1f       	adc	r21, r25
    2d70:	e7 01       	movw	r28, r14
    2d72:	ea 81       	ldd	r30, Y+2	; 0x02
    2d74:	fb 81       	ldd	r31, Y+3	; 0x03
    2d76:	93 81       	ldd	r25, Z+3	; 0x03
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	25 81       	ldd	r18, Z+5	; 0x05
    2d7c:	98 1b       	sub	r25, r24
    2d7e:	92 23       	and	r25, r18
    2d80:	84 81       	ldd	r24, Z+4	; 0x04
    2d82:	98 17       	cp	r25, r24
    2d84:	79 f0       	breq	.+30     	; 0x2da4 <serial_send_bytes+0x76>
    2d86:	8c 91       	ld	r24, X
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	26 95       	lsr	r18
    2d8c:	29 23       	and	r18, r25
    2d8e:	60 81       	ld	r22, Z
    2d90:	71 81       	ldd	r23, Z+1	; 0x01
    2d92:	8b 01       	movw	r16, r22
    2d94:	02 0f       	add	r16, r18
    2d96:	11 1d       	adc	r17, r1
    2d98:	e8 01       	movw	r28, r16
    2d9a:	88 83       	st	Y, r24
    2d9c:	9f 5f       	subi	r25, 0xFF	; 255
    2d9e:	85 81       	ldd	r24, Z+5	; 0x05
    2da0:	98 23       	and	r25, r24
    2da2:	93 83       	std	Z+3, r25	; 0x03
    2da4:	11 96       	adiw	r26, 0x01	; 1
    2da6:	a4 17       	cp	r26, r20
    2da8:	b5 07       	cpc	r27, r21
    2daa:	11 f7       	brne	.-60     	; 0x2d70 <serial_send_bytes+0x42>
    2dac:	d7 01       	movw	r26, r14
    2dae:	ed 91       	ld	r30, X+
    2db0:	fc 91       	ld	r31, X
    2db2:	35 97       	sbiw	r30, 0x05	; 5
    2db4:	80 81       	ld	r24, Z
    2db6:	80 62       	ori	r24, 0x20	; 32
    2db8:	80 83       	st	Z, r24
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	01 c0       	rjmp	.+2      	; 0x2dc0 <serial_send_bytes+0x92>
    2dbe:	82 e0       	ldi	r24, 0x02	; 2
    2dc0:	df 91       	pop	r29
    2dc2:	cf 91       	pop	r28
    2dc4:	1f 91       	pop	r17
    2dc6:	0f 91       	pop	r16
    2dc8:	ff 90       	pop	r15
    2dca:	ef 90       	pop	r14
    2dcc:	08 95       	ret

00002dce <serial_get_byte>:
    2dce:	dc 01       	movw	r26, r24
    2dd0:	14 96       	adiw	r26, 0x04	; 4
    2dd2:	ed 91       	ld	r30, X+
    2dd4:	fc 91       	ld	r31, X
    2dd6:	15 97       	sbiw	r26, 0x05	; 5
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	82 81       	ldd	r24, Z+2	; 0x02
    2ddc:	98 17       	cp	r25, r24
    2dde:	89 f0       	breq	.+34     	; 0x2e02 <serial_get_byte+0x34>
    2de0:	92 81       	ldd	r25, Z+2	; 0x02
    2de2:	85 81       	ldd	r24, Z+5	; 0x05
    2de4:	86 95       	lsr	r24
    2de6:	89 23       	and	r24, r25
    2de8:	a0 81       	ld	r26, Z
    2dea:	b1 81       	ldd	r27, Z+1	; 0x01
    2dec:	a8 0f       	add	r26, r24
    2dee:	b1 1d       	adc	r27, r1
    2df0:	8c 91       	ld	r24, X
    2df2:	db 01       	movw	r26, r22
    2df4:	8c 93       	st	X, r24
    2df6:	9f 5f       	subi	r25, 0xFF	; 255
    2df8:	85 81       	ldd	r24, Z+5	; 0x05
    2dfa:	98 23       	and	r25, r24
    2dfc:	92 83       	std	Z+2, r25	; 0x02
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	08 95       	ret
    2e02:	83 e0       	ldi	r24, 0x03	; 3
    2e04:	08 95       	ret

00002e06 <__vector_25>:
    2e06:	1f 92       	push	r1
    2e08:	0f 92       	push	r0
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	0f 92       	push	r0
    2e0e:	11 24       	eor	r1, r1
    2e10:	0b b6       	in	r0, 0x3b	; 59
    2e12:	0f 92       	push	r0
    2e14:	2f 93       	push	r18
    2e16:	3f 93       	push	r19
    2e18:	4f 93       	push	r20
    2e1a:	5f 93       	push	r21
    2e1c:	6f 93       	push	r22
    2e1e:	7f 93       	push	r23
    2e20:	8f 93       	push	r24
    2e22:	9f 93       	push	r25
    2e24:	af 93       	push	r26
    2e26:	bf 93       	push	r27
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	ef 93       	push	r30
    2e2e:	ff 93       	push	r31
    2e30:	a0 91 38 08 	lds	r26, 0x0838	; 0x800838 <_ser_handle>
    2e34:	b0 91 39 08 	lds	r27, 0x0839	; 0x800839 <_ser_handle+0x1>
    2e38:	10 97       	sbiw	r26, 0x00	; 0
    2e3a:	11 f1       	breq	.+68     	; 0x2e80 <__vector_25+0x7a>
    2e3c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2e40:	14 96       	adiw	r26, 0x04	; 4
    2e42:	ed 91       	ld	r30, X+
    2e44:	fc 91       	ld	r31, X
    2e46:	15 97       	sbiw	r26, 0x05	; 5
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	25 81       	ldd	r18, Z+5	; 0x05
    2e4e:	98 1b       	sub	r25, r24
    2e50:	92 23       	and	r25, r18
    2e52:	84 81       	ldd	r24, Z+4	; 0x04
    2e54:	98 17       	cp	r25, r24
    2e56:	61 f0       	breq	.+24     	; 0x2e70 <__vector_25+0x6a>
    2e58:	83 81       	ldd	r24, Z+3	; 0x03
    2e5a:	26 95       	lsr	r18
    2e5c:	28 23       	and	r18, r24
    2e5e:	c0 81       	ld	r28, Z
    2e60:	d1 81       	ldd	r29, Z+1	; 0x01
    2e62:	c2 0f       	add	r28, r18
    2e64:	d1 1d       	adc	r29, r1
    2e66:	68 83       	st	Y, r22
    2e68:	8f 5f       	subi	r24, 0xFF	; 255
    2e6a:	95 81       	ldd	r25, Z+5	; 0x05
    2e6c:	89 23       	and	r24, r25
    2e6e:	83 83       	std	Z+3, r24	; 0x03
    2e70:	16 96       	adiw	r26, 0x06	; 6
    2e72:	ed 91       	ld	r30, X+
    2e74:	fc 91       	ld	r31, X
    2e76:	17 97       	sbiw	r26, 0x07	; 7
    2e78:	30 97       	sbiw	r30, 0x00	; 0
    2e7a:	11 f0       	breq	.+4      	; 0x2e80 <__vector_25+0x7a>
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	19 95       	eicall
    2e80:	ff 91       	pop	r31
    2e82:	ef 91       	pop	r30
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	bf 91       	pop	r27
    2e8a:	af 91       	pop	r26
    2e8c:	9f 91       	pop	r25
    2e8e:	8f 91       	pop	r24
    2e90:	7f 91       	pop	r23
    2e92:	6f 91       	pop	r22
    2e94:	5f 91       	pop	r21
    2e96:	4f 91       	pop	r20
    2e98:	3f 91       	pop	r19
    2e9a:	2f 91       	pop	r18
    2e9c:	0f 90       	pop	r0
    2e9e:	0b be       	out	0x3b, r0	; 59
    2ea0:	0f 90       	pop	r0
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	0f 90       	pop	r0
    2ea6:	1f 90       	pop	r1
    2ea8:	18 95       	reti

00002eaa <__vector_26>:
    2eaa:	1f 92       	push	r1
    2eac:	0f 92       	push	r0
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	0f 92       	push	r0
    2eb2:	11 24       	eor	r1, r1
    2eb4:	0b b6       	in	r0, 0x3b	; 59
    2eb6:	0f 92       	push	r0
    2eb8:	2f 93       	push	r18
    2eba:	8f 93       	push	r24
    2ebc:	9f 93       	push	r25
    2ebe:	af 93       	push	r26
    2ec0:	bf 93       	push	r27
    2ec2:	ef 93       	push	r30
    2ec4:	ff 93       	push	r31
    2ec6:	e0 91 38 08 	lds	r30, 0x0838	; 0x800838 <_ser_handle>
    2eca:	f0 91 39 08 	lds	r31, 0x0839	; 0x800839 <_ser_handle+0x1>
    2ece:	30 97       	sbiw	r30, 0x00	; 0
    2ed0:	b9 f0       	breq	.+46     	; 0x2f00 <__vector_26+0x56>
    2ed2:	02 80       	ldd	r0, Z+2	; 0x02
    2ed4:	f3 81       	ldd	r31, Z+3	; 0x03
    2ed6:	e0 2d       	mov	r30, r0
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	98 17       	cp	r25, r24
    2ede:	b1 f0       	breq	.+44     	; 0x2f0c <__vector_26+0x62>
    2ee0:	92 81       	ldd	r25, Z+2	; 0x02
    2ee2:	85 81       	ldd	r24, Z+5	; 0x05
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	26 95       	lsr	r18
    2ee8:	29 23       	and	r18, r25
    2eea:	a0 81       	ld	r26, Z
    2eec:	b1 81       	ldd	r27, Z+1	; 0x01
    2eee:	a2 0f       	add	r26, r18
    2ef0:	b1 1d       	adc	r27, r1
    2ef2:	2c 91       	ld	r18, X
    2ef4:	9f 5f       	subi	r25, 0xFF	; 255
    2ef6:	89 23       	and	r24, r25
    2ef8:	82 83       	std	Z+2, r24	; 0x02
    2efa:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    2efe:	0b c0       	rjmp	.+22     	; 0x2f16 <__vector_26+0x6c>
    2f00:	e1 ec       	ldi	r30, 0xC1	; 193
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	8f 7d       	andi	r24, 0xDF	; 223
    2f08:	80 83       	st	Z, r24
    2f0a:	05 c0       	rjmp	.+10     	; 0x2f16 <__vector_26+0x6c>
    2f0c:	e1 ec       	ldi	r30, 0xC1	; 193
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	8f 7d       	andi	r24, 0xDF	; 223
    2f14:	80 83       	st	Z, r24
    2f16:	ff 91       	pop	r31
    2f18:	ef 91       	pop	r30
    2f1a:	bf 91       	pop	r27
    2f1c:	af 91       	pop	r26
    2f1e:	9f 91       	pop	r25
    2f20:	8f 91       	pop	r24
    2f22:	2f 91       	pop	r18
    2f24:	0f 90       	pop	r0
    2f26:	0b be       	out	0x3b, r0	; 59
    2f28:	0f 90       	pop	r0
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	0f 90       	pop	r0
    2f2e:	1f 90       	pop	r1
    2f30:	18 95       	reti

00002f32 <__vector_36>:
    2f32:	1f 92       	push	r1
    2f34:	0f 92       	push	r0
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	0f 92       	push	r0
    2f3a:	11 24       	eor	r1, r1
    2f3c:	0b b6       	in	r0, 0x3b	; 59
    2f3e:	0f 92       	push	r0
    2f40:	2f 93       	push	r18
    2f42:	3f 93       	push	r19
    2f44:	4f 93       	push	r20
    2f46:	5f 93       	push	r21
    2f48:	6f 93       	push	r22
    2f4a:	7f 93       	push	r23
    2f4c:	8f 93       	push	r24
    2f4e:	9f 93       	push	r25
    2f50:	af 93       	push	r26
    2f52:	bf 93       	push	r27
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	ef 93       	push	r30
    2f5a:	ff 93       	push	r31
    2f5c:	a0 91 3a 08 	lds	r26, 0x083A	; 0x80083a <_ser_handle+0x2>
    2f60:	b0 91 3b 08 	lds	r27, 0x083B	; 0x80083b <_ser_handle+0x3>
    2f64:	10 97       	sbiw	r26, 0x00	; 0
    2f66:	11 f1       	breq	.+68     	; 0x2fac <__vector_36+0x7a>
    2f68:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2f6c:	14 96       	adiw	r26, 0x04	; 4
    2f6e:	ed 91       	ld	r30, X+
    2f70:	fc 91       	ld	r31, X
    2f72:	15 97       	sbiw	r26, 0x05	; 5
    2f74:	93 81       	ldd	r25, Z+3	; 0x03
    2f76:	82 81       	ldd	r24, Z+2	; 0x02
    2f78:	25 81       	ldd	r18, Z+5	; 0x05
    2f7a:	98 1b       	sub	r25, r24
    2f7c:	92 23       	and	r25, r18
    2f7e:	84 81       	ldd	r24, Z+4	; 0x04
    2f80:	98 17       	cp	r25, r24
    2f82:	61 f0       	breq	.+24     	; 0x2f9c <__vector_36+0x6a>
    2f84:	83 81       	ldd	r24, Z+3	; 0x03
    2f86:	26 95       	lsr	r18
    2f88:	28 23       	and	r18, r24
    2f8a:	c0 81       	ld	r28, Z
    2f8c:	d1 81       	ldd	r29, Z+1	; 0x01
    2f8e:	c2 0f       	add	r28, r18
    2f90:	d1 1d       	adc	r29, r1
    2f92:	68 83       	st	Y, r22
    2f94:	8f 5f       	subi	r24, 0xFF	; 255
    2f96:	95 81       	ldd	r25, Z+5	; 0x05
    2f98:	89 23       	and	r24, r25
    2f9a:	83 83       	std	Z+3, r24	; 0x03
    2f9c:	16 96       	adiw	r26, 0x06	; 6
    2f9e:	ed 91       	ld	r30, X+
    2fa0:	fc 91       	ld	r31, X
    2fa2:	17 97       	sbiw	r26, 0x07	; 7
    2fa4:	30 97       	sbiw	r30, 0x00	; 0
    2fa6:	11 f0       	breq	.+4      	; 0x2fac <__vector_36+0x7a>
    2fa8:	cd 01       	movw	r24, r26
    2faa:	19 95       	eicall
    2fac:	ff 91       	pop	r31
    2fae:	ef 91       	pop	r30
    2fb0:	df 91       	pop	r29
    2fb2:	cf 91       	pop	r28
    2fb4:	bf 91       	pop	r27
    2fb6:	af 91       	pop	r26
    2fb8:	9f 91       	pop	r25
    2fba:	8f 91       	pop	r24
    2fbc:	7f 91       	pop	r23
    2fbe:	6f 91       	pop	r22
    2fc0:	5f 91       	pop	r21
    2fc2:	4f 91       	pop	r20
    2fc4:	3f 91       	pop	r19
    2fc6:	2f 91       	pop	r18
    2fc8:	0f 90       	pop	r0
    2fca:	0b be       	out	0x3b, r0	; 59
    2fcc:	0f 90       	pop	r0
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	0f 90       	pop	r0
    2fd2:	1f 90       	pop	r1
    2fd4:	18 95       	reti

00002fd6 <__vector_37>:
    2fd6:	1f 92       	push	r1
    2fd8:	0f 92       	push	r0
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	0f 92       	push	r0
    2fde:	11 24       	eor	r1, r1
    2fe0:	0b b6       	in	r0, 0x3b	; 59
    2fe2:	0f 92       	push	r0
    2fe4:	2f 93       	push	r18
    2fe6:	8f 93       	push	r24
    2fe8:	9f 93       	push	r25
    2fea:	af 93       	push	r26
    2fec:	bf 93       	push	r27
    2fee:	ef 93       	push	r30
    2ff0:	ff 93       	push	r31
    2ff2:	e0 91 3a 08 	lds	r30, 0x083A	; 0x80083a <_ser_handle+0x2>
    2ff6:	f0 91 3b 08 	lds	r31, 0x083B	; 0x80083b <_ser_handle+0x3>
    2ffa:	30 97       	sbiw	r30, 0x00	; 0
    2ffc:	b9 f0       	breq	.+46     	; 0x302c <__vector_37+0x56>
    2ffe:	02 80       	ldd	r0, Z+2	; 0x02
    3000:	f3 81       	ldd	r31, Z+3	; 0x03
    3002:	e0 2d       	mov	r30, r0
    3004:	93 81       	ldd	r25, Z+3	; 0x03
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	98 17       	cp	r25, r24
    300a:	b1 f0       	breq	.+44     	; 0x3038 <__vector_37+0x62>
    300c:	92 81       	ldd	r25, Z+2	; 0x02
    300e:	85 81       	ldd	r24, Z+5	; 0x05
    3010:	28 2f       	mov	r18, r24
    3012:	26 95       	lsr	r18
    3014:	29 23       	and	r18, r25
    3016:	a0 81       	ld	r26, Z
    3018:	b1 81       	ldd	r27, Z+1	; 0x01
    301a:	a2 0f       	add	r26, r18
    301c:	b1 1d       	adc	r27, r1
    301e:	2c 91       	ld	r18, X
    3020:	9f 5f       	subi	r25, 0xFF	; 255
    3022:	89 23       	and	r24, r25
    3024:	82 83       	std	Z+2, r24	; 0x02
    3026:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    302a:	0b c0       	rjmp	.+22     	; 0x3042 <__vector_37+0x6c>
    302c:	e9 ec       	ldi	r30, 0xC9	; 201
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	8f 7d       	andi	r24, 0xDF	; 223
    3034:	80 83       	st	Z, r24
    3036:	05 c0       	rjmp	.+10     	; 0x3042 <__vector_37+0x6c>
    3038:	e9 ec       	ldi	r30, 0xC9	; 201
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	8f 7d       	andi	r24, 0xDF	; 223
    3040:	80 83       	st	Z, r24
    3042:	ff 91       	pop	r31
    3044:	ef 91       	pop	r30
    3046:	bf 91       	pop	r27
    3048:	af 91       	pop	r26
    304a:	9f 91       	pop	r25
    304c:	8f 91       	pop	r24
    304e:	2f 91       	pop	r18
    3050:	0f 90       	pop	r0
    3052:	0b be       	out	0x3b, r0	; 59
    3054:	0f 90       	pop	r0
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	0f 90       	pop	r0
    305a:	1f 90       	pop	r1
    305c:	18 95       	reti

0000305e <__vector_51>:
    305e:	1f 92       	push	r1
    3060:	0f 92       	push	r0
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	0f 92       	push	r0
    3066:	11 24       	eor	r1, r1
    3068:	0b b6       	in	r0, 0x3b	; 59
    306a:	0f 92       	push	r0
    306c:	2f 93       	push	r18
    306e:	3f 93       	push	r19
    3070:	4f 93       	push	r20
    3072:	5f 93       	push	r21
    3074:	6f 93       	push	r22
    3076:	7f 93       	push	r23
    3078:	8f 93       	push	r24
    307a:	9f 93       	push	r25
    307c:	af 93       	push	r26
    307e:	bf 93       	push	r27
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	ef 93       	push	r30
    3086:	ff 93       	push	r31
    3088:	a0 91 3c 08 	lds	r26, 0x083C	; 0x80083c <_ser_handle+0x4>
    308c:	b0 91 3d 08 	lds	r27, 0x083D	; 0x80083d <_ser_handle+0x5>
    3090:	10 97       	sbiw	r26, 0x00	; 0
    3092:	11 f1       	breq	.+68     	; 0x30d8 <__vector_51+0x7a>
    3094:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3098:	14 96       	adiw	r26, 0x04	; 4
    309a:	ed 91       	ld	r30, X+
    309c:	fc 91       	ld	r31, X
    309e:	15 97       	sbiw	r26, 0x05	; 5
    30a0:	93 81       	ldd	r25, Z+3	; 0x03
    30a2:	82 81       	ldd	r24, Z+2	; 0x02
    30a4:	25 81       	ldd	r18, Z+5	; 0x05
    30a6:	98 1b       	sub	r25, r24
    30a8:	92 23       	and	r25, r18
    30aa:	84 81       	ldd	r24, Z+4	; 0x04
    30ac:	98 17       	cp	r25, r24
    30ae:	61 f0       	breq	.+24     	; 0x30c8 <__vector_51+0x6a>
    30b0:	83 81       	ldd	r24, Z+3	; 0x03
    30b2:	26 95       	lsr	r18
    30b4:	28 23       	and	r18, r24
    30b6:	c0 81       	ld	r28, Z
    30b8:	d1 81       	ldd	r29, Z+1	; 0x01
    30ba:	c2 0f       	add	r28, r18
    30bc:	d1 1d       	adc	r29, r1
    30be:	68 83       	st	Y, r22
    30c0:	8f 5f       	subi	r24, 0xFF	; 255
    30c2:	95 81       	ldd	r25, Z+5	; 0x05
    30c4:	89 23       	and	r24, r25
    30c6:	83 83       	std	Z+3, r24	; 0x03
    30c8:	16 96       	adiw	r26, 0x06	; 6
    30ca:	ed 91       	ld	r30, X+
    30cc:	fc 91       	ld	r31, X
    30ce:	17 97       	sbiw	r26, 0x07	; 7
    30d0:	30 97       	sbiw	r30, 0x00	; 0
    30d2:	11 f0       	breq	.+4      	; 0x30d8 <__vector_51+0x7a>
    30d4:	cd 01       	movw	r24, r26
    30d6:	19 95       	eicall
    30d8:	ff 91       	pop	r31
    30da:	ef 91       	pop	r30
    30dc:	df 91       	pop	r29
    30de:	cf 91       	pop	r28
    30e0:	bf 91       	pop	r27
    30e2:	af 91       	pop	r26
    30e4:	9f 91       	pop	r25
    30e6:	8f 91       	pop	r24
    30e8:	7f 91       	pop	r23
    30ea:	6f 91       	pop	r22
    30ec:	5f 91       	pop	r21
    30ee:	4f 91       	pop	r20
    30f0:	3f 91       	pop	r19
    30f2:	2f 91       	pop	r18
    30f4:	0f 90       	pop	r0
    30f6:	0b be       	out	0x3b, r0	; 59
    30f8:	0f 90       	pop	r0
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	0f 90       	pop	r0
    30fe:	1f 90       	pop	r1
    3100:	18 95       	reti

00003102 <__vector_52>:
    3102:	1f 92       	push	r1
    3104:	0f 92       	push	r0
    3106:	0f b6       	in	r0, 0x3f	; 63
    3108:	0f 92       	push	r0
    310a:	11 24       	eor	r1, r1
    310c:	0b b6       	in	r0, 0x3b	; 59
    310e:	0f 92       	push	r0
    3110:	2f 93       	push	r18
    3112:	8f 93       	push	r24
    3114:	9f 93       	push	r25
    3116:	af 93       	push	r26
    3118:	bf 93       	push	r27
    311a:	ef 93       	push	r30
    311c:	ff 93       	push	r31
    311e:	e0 91 3c 08 	lds	r30, 0x083C	; 0x80083c <_ser_handle+0x4>
    3122:	f0 91 3d 08 	lds	r31, 0x083D	; 0x80083d <_ser_handle+0x5>
    3126:	30 97       	sbiw	r30, 0x00	; 0
    3128:	b9 f0       	breq	.+46     	; 0x3158 <__vector_52+0x56>
    312a:	02 80       	ldd	r0, Z+2	; 0x02
    312c:	f3 81       	ldd	r31, Z+3	; 0x03
    312e:	e0 2d       	mov	r30, r0
    3130:	93 81       	ldd	r25, Z+3	; 0x03
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	98 17       	cp	r25, r24
    3136:	b1 f0       	breq	.+44     	; 0x3164 <__vector_52+0x62>
    3138:	92 81       	ldd	r25, Z+2	; 0x02
    313a:	85 81       	ldd	r24, Z+5	; 0x05
    313c:	28 2f       	mov	r18, r24
    313e:	26 95       	lsr	r18
    3140:	29 23       	and	r18, r25
    3142:	a0 81       	ld	r26, Z
    3144:	b1 81       	ldd	r27, Z+1	; 0x01
    3146:	a2 0f       	add	r26, r18
    3148:	b1 1d       	adc	r27, r1
    314a:	2c 91       	ld	r18, X
    314c:	9f 5f       	subi	r25, 0xFF	; 255
    314e:	89 23       	and	r24, r25
    3150:	82 83       	std	Z+2, r24	; 0x02
    3152:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3156:	0b c0       	rjmp	.+22     	; 0x316e <__vector_52+0x6c>
    3158:	e1 ed       	ldi	r30, 0xD1	; 209
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	8f 7d       	andi	r24, 0xDF	; 223
    3160:	80 83       	st	Z, r24
    3162:	05 c0       	rjmp	.+10     	; 0x316e <__vector_52+0x6c>
    3164:	e1 ed       	ldi	r30, 0xD1	; 209
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	8f 7d       	andi	r24, 0xDF	; 223
    316c:	80 83       	st	Z, r24
    316e:	ff 91       	pop	r31
    3170:	ef 91       	pop	r30
    3172:	bf 91       	pop	r27
    3174:	af 91       	pop	r26
    3176:	9f 91       	pop	r25
    3178:	8f 91       	pop	r24
    317a:	2f 91       	pop	r18
    317c:	0f 90       	pop	r0
    317e:	0b be       	out	0x3b, r0	; 59
    3180:	0f 90       	pop	r0
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	0f 90       	pop	r0
    3186:	1f 90       	pop	r1
    3188:	18 95       	reti

0000318a <__vector_54>:
    318a:	1f 92       	push	r1
    318c:	0f 92       	push	r0
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	0f 92       	push	r0
    3192:	11 24       	eor	r1, r1
    3194:	0b b6       	in	r0, 0x3b	; 59
    3196:	0f 92       	push	r0
    3198:	2f 93       	push	r18
    319a:	3f 93       	push	r19
    319c:	4f 93       	push	r20
    319e:	5f 93       	push	r21
    31a0:	6f 93       	push	r22
    31a2:	7f 93       	push	r23
    31a4:	8f 93       	push	r24
    31a6:	9f 93       	push	r25
    31a8:	af 93       	push	r26
    31aa:	bf 93       	push	r27
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	ef 93       	push	r30
    31b2:	ff 93       	push	r31
    31b4:	a0 91 3e 08 	lds	r26, 0x083E	; 0x80083e <_ser_handle+0x6>
    31b8:	b0 91 3f 08 	lds	r27, 0x083F	; 0x80083f <_ser_handle+0x7>
    31bc:	10 97       	sbiw	r26, 0x00	; 0
    31be:	11 f1       	breq	.+68     	; 0x3204 <__vector_54+0x7a>
    31c0:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    31c4:	14 96       	adiw	r26, 0x04	; 4
    31c6:	ed 91       	ld	r30, X+
    31c8:	fc 91       	ld	r31, X
    31ca:	15 97       	sbiw	r26, 0x05	; 5
    31cc:	93 81       	ldd	r25, Z+3	; 0x03
    31ce:	82 81       	ldd	r24, Z+2	; 0x02
    31d0:	25 81       	ldd	r18, Z+5	; 0x05
    31d2:	98 1b       	sub	r25, r24
    31d4:	92 23       	and	r25, r18
    31d6:	84 81       	ldd	r24, Z+4	; 0x04
    31d8:	98 17       	cp	r25, r24
    31da:	61 f0       	breq	.+24     	; 0x31f4 <__vector_54+0x6a>
    31dc:	83 81       	ldd	r24, Z+3	; 0x03
    31de:	26 95       	lsr	r18
    31e0:	28 23       	and	r18, r24
    31e2:	c0 81       	ld	r28, Z
    31e4:	d1 81       	ldd	r29, Z+1	; 0x01
    31e6:	c2 0f       	add	r28, r18
    31e8:	d1 1d       	adc	r29, r1
    31ea:	68 83       	st	Y, r22
    31ec:	8f 5f       	subi	r24, 0xFF	; 255
    31ee:	95 81       	ldd	r25, Z+5	; 0x05
    31f0:	89 23       	and	r24, r25
    31f2:	83 83       	std	Z+3, r24	; 0x03
    31f4:	16 96       	adiw	r26, 0x06	; 6
    31f6:	ed 91       	ld	r30, X+
    31f8:	fc 91       	ld	r31, X
    31fa:	17 97       	sbiw	r26, 0x07	; 7
    31fc:	30 97       	sbiw	r30, 0x00	; 0
    31fe:	11 f0       	breq	.+4      	; 0x3204 <__vector_54+0x7a>
    3200:	cd 01       	movw	r24, r26
    3202:	19 95       	eicall
    3204:	ff 91       	pop	r31
    3206:	ef 91       	pop	r30
    3208:	df 91       	pop	r29
    320a:	cf 91       	pop	r28
    320c:	bf 91       	pop	r27
    320e:	af 91       	pop	r26
    3210:	9f 91       	pop	r25
    3212:	8f 91       	pop	r24
    3214:	7f 91       	pop	r23
    3216:	6f 91       	pop	r22
    3218:	5f 91       	pop	r21
    321a:	4f 91       	pop	r20
    321c:	3f 91       	pop	r19
    321e:	2f 91       	pop	r18
    3220:	0f 90       	pop	r0
    3222:	0b be       	out	0x3b, r0	; 59
    3224:	0f 90       	pop	r0
    3226:	0f be       	out	0x3f, r0	; 63
    3228:	0f 90       	pop	r0
    322a:	1f 90       	pop	r1
    322c:	18 95       	reti

0000322e <__vector_55>:
    322e:	1f 92       	push	r1
    3230:	0f 92       	push	r0
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	0f 92       	push	r0
    3236:	11 24       	eor	r1, r1
    3238:	0b b6       	in	r0, 0x3b	; 59
    323a:	0f 92       	push	r0
    323c:	2f 93       	push	r18
    323e:	8f 93       	push	r24
    3240:	9f 93       	push	r25
    3242:	af 93       	push	r26
    3244:	bf 93       	push	r27
    3246:	ef 93       	push	r30
    3248:	ff 93       	push	r31
    324a:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <_ser_handle+0x6>
    324e:	f0 91 3f 08 	lds	r31, 0x083F	; 0x80083f <_ser_handle+0x7>
    3252:	30 97       	sbiw	r30, 0x00	; 0
    3254:	b9 f0       	breq	.+46     	; 0x3284 <__vector_55+0x56>
    3256:	02 80       	ldd	r0, Z+2	; 0x02
    3258:	f3 81       	ldd	r31, Z+3	; 0x03
    325a:	e0 2d       	mov	r30, r0
    325c:	93 81       	ldd	r25, Z+3	; 0x03
    325e:	82 81       	ldd	r24, Z+2	; 0x02
    3260:	98 17       	cp	r25, r24
    3262:	b1 f0       	breq	.+44     	; 0x3290 <__vector_55+0x62>
    3264:	92 81       	ldd	r25, Z+2	; 0x02
    3266:	85 81       	ldd	r24, Z+5	; 0x05
    3268:	28 2f       	mov	r18, r24
    326a:	26 95       	lsr	r18
    326c:	29 23       	and	r18, r25
    326e:	a0 81       	ld	r26, Z
    3270:	b1 81       	ldd	r27, Z+1	; 0x01
    3272:	a2 0f       	add	r26, r18
    3274:	b1 1d       	adc	r27, r1
    3276:	2c 91       	ld	r18, X
    3278:	9f 5f       	subi	r25, 0xFF	; 255
    327a:	89 23       	and	r24, r25
    327c:	82 83       	std	Z+2, r24	; 0x02
    327e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3282:	0b c0       	rjmp	.+22     	; 0x329a <__vector_55+0x6c>
    3284:	e1 e3       	ldi	r30, 0x31	; 49
    3286:	f1 e0       	ldi	r31, 0x01	; 1
    3288:	80 81       	ld	r24, Z
    328a:	8f 7d       	andi	r24, 0xDF	; 223
    328c:	80 83       	st	Z, r24
    328e:	05 c0       	rjmp	.+10     	; 0x329a <__vector_55+0x6c>
    3290:	e1 e3       	ldi	r30, 0x31	; 49
    3292:	f1 e0       	ldi	r31, 0x01	; 1
    3294:	80 81       	ld	r24, Z
    3296:	8f 7d       	andi	r24, 0xDF	; 223
    3298:	80 83       	st	Z, r24
    329a:	ff 91       	pop	r31
    329c:	ef 91       	pop	r30
    329e:	bf 91       	pop	r27
    32a0:	af 91       	pop	r26
    32a2:	9f 91       	pop	r25
    32a4:	8f 91       	pop	r24
    32a6:	2f 91       	pop	r18
    32a8:	0f 90       	pop	r0
    32aa:	0b be       	out	0x3b, r0	; 59
    32ac:	0f 90       	pop	r0
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	0f 90       	pop	r0
    32b2:	1f 90       	pop	r1
    32b4:	18 95       	reti

000032b6 <fifo_init>:
    32b6:	fc 01       	movw	r30, r24
    32b8:	41 11       	cpse	r20, r1
    32ba:	02 c0       	rjmp	.+4      	; 0x32c0 <fifo_init+0xa>
    32bc:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <abort>
    32c0:	84 2f       	mov	r24, r20
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	9c 01       	movw	r18, r24
    32c6:	21 50       	subi	r18, 0x01	; 1
    32c8:	31 09       	sbc	r19, r1
    32ca:	82 23       	and	r24, r18
    32cc:	93 23       	and	r25, r19
    32ce:	89 2b       	or	r24, r25
    32d0:	11 f0       	breq	.+4      	; 0x32d6 <fifo_init+0x20>
    32d2:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <abort>
    32d6:	41 38       	cpi	r20, 0x81	; 129
    32d8:	10 f0       	brcs	.+4      	; 0x32de <fifo_init+0x28>
    32da:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <abort>
    32de:	12 82       	std	Z+2, r1	; 0x02
    32e0:	13 82       	std	Z+3, r1	; 0x03
    32e2:	44 83       	std	Z+4, r20	; 0x04
    32e4:	44 0f       	add	r20, r20
    32e6:	41 50       	subi	r20, 0x01	; 1
    32e8:	45 83       	std	Z+5, r20	; 0x05
    32ea:	71 83       	std	Z+1, r23	; 0x01
    32ec:	60 83       	st	Z, r22
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	08 95       	ret

000032f4 <hal_create>:
    32f4:	ee e0       	ldi	r30, 0x0E	; 14
    32f6:	fa e0       	ldi	r31, 0x0A	; 10
    32f8:	2c e4       	ldi	r18, 0x4C	; 76
    32fa:	3f e1       	ldi	r19, 0x1F	; 31
    32fc:	31 83       	std	Z+1, r19	; 0x01
    32fe:	20 83       	st	Z, r18
    3300:	2f e4       	ldi	r18, 0x4F	; 79
    3302:	3f e1       	ldi	r19, 0x1F	; 31
    3304:	33 83       	std	Z+3, r19	; 0x03
    3306:	22 83       	std	Z+2, r18	; 0x02
    3308:	2a e5       	ldi	r18, 0x5A	; 90
    330a:	3f e1       	ldi	r19, 0x1F	; 31
    330c:	35 83       	std	Z+5, r19	; 0x05
    330e:	24 83       	std	Z+4, r18	; 0x04
    3310:	2e e5       	ldi	r18, 0x5E	; 94
    3312:	3f e1       	ldi	r19, 0x1F	; 31
    3314:	37 83       	std	Z+7, r19	; 0x07
    3316:	26 83       	std	Z+6, r18	; 0x06
    3318:	24 e6       	ldi	r18, 0x64	; 100
    331a:	3f e1       	ldi	r19, 0x1F	; 31
    331c:	31 87       	std	Z+9, r19	; 0x09
    331e:	20 87       	std	Z+8, r18	; 0x08
    3320:	20 e7       	ldi	r18, 0x70	; 112
    3322:	3f e1       	ldi	r19, 0x1F	; 31
    3324:	33 87       	std	Z+11, r19	; 0x0b
    3326:	22 87       	std	Z+10, r18	; 0x0a
    3328:	25 e7       	ldi	r18, 0x75	; 117
    332a:	3f e1       	ldi	r19, 0x1F	; 31
    332c:	35 87       	std	Z+13, r19	; 0x0d
    332e:	24 87       	std	Z+12, r18	; 0x0c
    3330:	21 e8       	ldi	r18, 0x81	; 129
    3332:	3f e1       	ldi	r19, 0x1F	; 31
    3334:	37 87       	std	Z+15, r19	; 0x0f
    3336:	26 87       	std	Z+14, r18	; 0x0e
    3338:	21 e6       	ldi	r18, 0x61	; 97
    333a:	3f e1       	ldi	r19, 0x1F	; 31
    333c:	31 8b       	std	Z+17, r19	; 0x11
    333e:	20 8b       	std	Z+16, r18	; 0x10
    3340:	26 e8       	ldi	r18, 0x86	; 134
    3342:	3f e1       	ldi	r19, 0x1F	; 31
    3344:	33 8b       	std	Z+19, r19	; 0x13
    3346:	22 8b       	std	Z+18, r18	; 0x12
    3348:	23 e9       	ldi	r18, 0x93	; 147
    334a:	3f e1       	ldi	r19, 0x1F	; 31
    334c:	35 8b       	std	Z+21, r19	; 0x15
    334e:	24 8b       	std	Z+20, r18	; 0x14
    3350:	68 2f       	mov	r22, r24
    3352:	cf 01       	movw	r24, r30
    3354:	3c c1       	rjmp	.+632    	; 0x35ce <led_create>
    3356:	08 95       	ret

00003358 <_hihTwiCallback>:
    3358:	65 30       	cpi	r22, 0x05	; 5
    335a:	f1 f4       	brne	.+60     	; 0x3398 <_hihTwiCallback+0x40>
    335c:	fa 01       	movw	r30, r20
    335e:	80 81       	ld	r24, Z
    3360:	8f 73       	andi	r24, 0x3F	; 63
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	98 2f       	mov	r25, r24
    3366:	88 27       	eor	r24, r24
    3368:	21 81       	ldd	r18, Z+1	; 0x01
    336a:	82 2b       	or	r24, r18
    336c:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    3370:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	f0 e4       	ldi	r31, 0x40	; 64
    3378:	8f 9f       	mul	r24, r31
    337a:	c0 01       	movw	r24, r0
    337c:	11 24       	eor	r1, r1
    337e:	fa 01       	movw	r30, r20
    3380:	23 81       	ldd	r18, Z+3	; 0x03
    3382:	26 95       	lsr	r18
    3384:	26 95       	lsr	r18
    3386:	82 2b       	or	r24, r18
    3388:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    338c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <_measuringIsReady>
    3396:	08 95       	ret
    3398:	64 30       	cpi	r22, 0x04	; 4
    339a:	51 f0       	breq	.+20     	; 0x33b0 <_hihTwiCallback+0x58>
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	90 e4       	ldi	r25, 0x40	; 64
    33a0:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    33a4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    33a8:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    33ac:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    33b0:	08 95       	ret

000033b2 <hih8120Create>:
    33b2:	0f 93       	push	r16
    33b4:	1f 93       	push	r17
    33b6:	0c ea       	ldi	r16, 0xAC	; 172
    33b8:	19 e1       	ldi	r17, 0x19	; 25
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	34 e2       	ldi	r19, 0x24	; 36
    33be:	44 ef       	ldi	r20, 0xF4	; 244
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	87 e2       	ldi	r24, 0x27	; 39
    33c6:	0e 94 12 22 	call	0x4424	; 0x4424 <twiCreate>
    33ca:	90 93 42 08 	sts	0x0842, r25	; 0x800842 <_hih8120Handler+0x1>
    33ce:	80 93 41 08 	sts	0x0841, r24	; 0x800841 <_hih8120Handler>
    33d2:	21 e0       	ldi	r18, 0x01	; 1
    33d4:	89 2b       	or	r24, r25
    33d6:	09 f0       	breq	.+2      	; 0x33da <hih8120Create+0x28>
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	82 2f       	mov	r24, r18
    33dc:	1f 91       	pop	r17
    33de:	0f 91       	pop	r16
    33e0:	08 95       	ret

000033e2 <hih8120Wakeup>:
    33e2:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <_hih8120Handler>
    33e6:	90 91 42 08 	lds	r25, 0x0842	; 0x800842 <_hih8120Handler+0x1>
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	59 f0       	breq	.+22     	; 0x3404 <hih8120Wakeup+0x22>
    33ee:	40 e0       	ldi	r20, 0x00	; 0
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	70 e0       	ldi	r23, 0x00	; 0
    33f4:	0e 94 63 22 	call	0x44c6	; 0x44c6 <twiTransmit>
    33f8:	84 30       	cpi	r24, 0x04	; 4
    33fa:	31 f4       	brne	.+12     	; 0x3408 <hih8120Wakeup+0x26>
    33fc:	10 92 40 08 	sts	0x0840, r1	; 0x800840 <_measuringIsReady>
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	08 95       	ret
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	08 95       	ret
    3408:	83 e0       	ldi	r24, 0x03	; 3
    340a:	08 95       	ret

0000340c <hih8120Meassure>:
    340c:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <_hih8120Handler>
    3410:	90 91 42 08 	lds	r25, 0x0842	; 0x800842 <_hih8120Handler+0x1>
    3414:	00 97       	sbiw	r24, 0x00	; 0
    3416:	39 f0       	breq	.+14     	; 0x3426 <hih8120Meassure+0x1a>
    3418:	64 e0       	ldi	r22, 0x04	; 4
    341a:	0e 94 af 22 	call	0x455e	; 0x455e <twiReceive>
    341e:	85 30       	cpi	r24, 0x05	; 5
    3420:	21 f0       	breq	.+8      	; 0x342a <hih8120Meassure+0x1e>
    3422:	83 e0       	ldi	r24, 0x03	; 3
    3424:	08 95       	ret
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	08 95       	ret
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	08 95       	ret

0000342e <hih8120GetHumidity>:
    342e:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <_hum>
    3432:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <_hum+0x1>
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__floatunsisf>
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	48 ec       	ldi	r20, 0xC8	; 200
    3444:	52 e4       	ldi	r21, 0x42	; 66
    3446:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__mulsf3>
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	38 ef       	ldi	r19, 0xF8	; 248
    344e:	4f e7       	ldi	r20, 0x7F	; 127
    3450:	56 e4       	ldi	r21, 0x46	; 70
    3452:	0c 94 06 24 	jmp	0x480c	; 0x480c <__divsf3>
    3456:	08 95       	ret

00003458 <hih8120GetTemperature>:
    3458:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    345c:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    3460:	80 e0       	ldi	r24, 0x00	; 0
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__floatunsisf>
    3468:	20 e0       	ldi	r18, 0x00	; 0
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	45 e2       	ldi	r20, 0x25	; 37
    346e:	53 e4       	ldi	r21, 0x43	; 67
    3470:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__mulsf3>
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	38 ef       	ldi	r19, 0xF8	; 248
    3478:	4f e7       	ldi	r20, 0x7F	; 127
    347a:	56 e4       	ldi	r21, 0x46	; 70
    347c:	0e 94 06 24 	call	0x480c	; 0x480c <__divsf3>
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	40 e2       	ldi	r20, 0x20	; 32
    3486:	52 e4       	ldi	r21, 0x42	; 66
    3488:	0c 94 9f 23 	jmp	0x473e	; 0x473e <__subsf3>
    348c:	08 95       	ret

0000348e <_turn_off>:
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	fc 01       	movw	r30, r24
    3496:	ee 0f       	add	r30, r30
    3498:	ff 1f       	adc	r31, r31
    349a:	e8 0f       	add	r30, r24
    349c:	f9 1f       	adc	r31, r25
    349e:	ee 0f       	add	r30, r30
    34a0:	ff 1f       	adc	r31, r31
    34a2:	ed 5b       	subi	r30, 0xBD	; 189
    34a4:	f7 4f       	sbci	r31, 0xF7	; 247
    34a6:	23 81       	ldd	r18, Z+3	; 0x03
    34a8:	21 11       	cpse	r18, r1
    34aa:	0a c0       	rjmp	.+20     	; 0x34c0 <_turn_off+0x32>
    34ac:	ef 01       	movw	r28, r30
    34ae:	e0 91 16 0a 	lds	r30, 0x0A16	; 0x800a16 <register_access+0x8>
    34b2:	f0 91 17 0a 	lds	r31, 0x0A17	; 0x800a17 <register_access+0x9>
    34b6:	6a 81       	ldd	r22, Y+2	; 0x02
    34b8:	88 81       	ld	r24, Y
    34ba:	99 81       	ldd	r25, Y+1	; 0x01
    34bc:	19 95       	eicall
    34be:	12 c0       	rjmp	.+36     	; 0x34e4 <_turn_off+0x56>
    34c0:	dc 01       	movw	r26, r24
    34c2:	aa 0f       	add	r26, r26
    34c4:	bb 1f       	adc	r27, r27
    34c6:	ed 01       	movw	r28, r26
    34c8:	c8 0f       	add	r28, r24
    34ca:	d9 1f       	adc	r29, r25
    34cc:	cc 0f       	add	r28, r28
    34ce:	dd 1f       	adc	r29, r29
    34d0:	cd 5b       	subi	r28, 0xBD	; 189
    34d2:	d7 4f       	sbci	r29, 0xF7	; 247
    34d4:	e0 91 20 0a 	lds	r30, 0x0A20	; 0x800a20 <register_access+0x12>
    34d8:	f0 91 21 0a 	lds	r31, 0x0A21	; 0x800a21 <register_access+0x13>
    34dc:	6a 81       	ldd	r22, Y+2	; 0x02
    34de:	88 81       	ld	r24, Y
    34e0:	99 81       	ldd	r25, Y+1	; 0x01
    34e2:	19 95       	eicall
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	08 95       	ret

000034ea <_turn_on>:
    34ea:	cf 93       	push	r28
    34ec:	df 93       	push	r29
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	fc 01       	movw	r30, r24
    34f2:	ee 0f       	add	r30, r30
    34f4:	ff 1f       	adc	r31, r31
    34f6:	e8 0f       	add	r30, r24
    34f8:	f9 1f       	adc	r31, r25
    34fa:	ee 0f       	add	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	ed 5b       	subi	r30, 0xBD	; 189
    3500:	f7 4f       	sbci	r31, 0xF7	; 247
    3502:	23 81       	ldd	r18, Z+3	; 0x03
    3504:	21 11       	cpse	r18, r1
    3506:	0a c0       	rjmp	.+20     	; 0x351c <_turn_on+0x32>
    3508:	ef 01       	movw	r28, r30
    350a:	e0 91 20 0a 	lds	r30, 0x0A20	; 0x800a20 <register_access+0x12>
    350e:	f0 91 21 0a 	lds	r31, 0x0A21	; 0x800a21 <register_access+0x13>
    3512:	6a 81       	ldd	r22, Y+2	; 0x02
    3514:	88 81       	ld	r24, Y
    3516:	99 81       	ldd	r25, Y+1	; 0x01
    3518:	19 95       	eicall
    351a:	12 c0       	rjmp	.+36     	; 0x3540 <_turn_on+0x56>
    351c:	dc 01       	movw	r26, r24
    351e:	aa 0f       	add	r26, r26
    3520:	bb 1f       	adc	r27, r27
    3522:	ed 01       	movw	r28, r26
    3524:	c8 0f       	add	r28, r24
    3526:	d9 1f       	adc	r29, r25
    3528:	cc 0f       	add	r28, r28
    352a:	dd 1f       	adc	r29, r29
    352c:	cd 5b       	subi	r28, 0xBD	; 189
    352e:	d7 4f       	sbci	r29, 0xF7	; 247
    3530:	e0 91 16 0a 	lds	r30, 0x0A16	; 0x800a16 <register_access+0x8>
    3534:	f0 91 17 0a 	lds	r31, 0x0A17	; 0x800a17 <register_access+0x9>
    3538:	6a 81       	ldd	r22, Y+2	; 0x02
    353a:	88 81       	ld	r24, Y
    353c:	99 81       	ldd	r25, Y+1	; 0x01
    353e:	19 95       	eicall
    3540:	df 91       	pop	r29
    3542:	cf 91       	pop	r28
    3544:	08 95       	ret

00003546 <_hal_led_task>:
    3546:	85 ed       	ldi	r24, 0xD5	; 213
    3548:	94 e0       	ldi	r25, 0x04	; 4
    354a:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <puts>
    354e:	0f 2e       	mov	r0, r31
    3550:	fe e0       	ldi	r31, 0x0E	; 14
    3552:	cf 2e       	mov	r12, r31
    3554:	fa e0       	ldi	r31, 0x0A	; 10
    3556:	df 2e       	mov	r13, r31
    3558:	f0 2d       	mov	r31, r0
    355a:	04 e0       	ldi	r16, 0x04	; 4
    355c:	c3 e4       	ldi	r28, 0x43	; 67
    355e:	d8 e0       	ldi	r29, 0x08	; 8
    3560:	10 e0       	ldi	r17, 0x00	; 0
    3562:	8c 81       	ldd	r24, Y+4	; 0x04
    3564:	81 30       	cpi	r24, 0x01	; 1
    3566:	69 f0       	breq	.+26     	; 0x3582 <_hal_led_task+0x3c>
    3568:	e8 f0       	brcs	.+58     	; 0x35a4 <_hal_led_task+0x5e>
    356a:	82 30       	cpi	r24, 0x02	; 2
    356c:	39 f5       	brne	.+78     	; 0x35bc <_hal_led_task+0x76>
    356e:	d6 01       	movw	r26, r12
    3570:	1c 96       	adiw	r26, 0x0c	; 12
    3572:	ed 91       	ld	r30, X+
    3574:	fc 91       	ld	r31, X
    3576:	1d 97       	sbiw	r26, 0x0d	; 13
    3578:	6a 81       	ldd	r22, Y+2	; 0x02
    357a:	88 81       	ld	r24, Y
    357c:	99 81       	ldd	r25, Y+1	; 0x01
    357e:	19 95       	eicall
    3580:	1d c0       	rjmp	.+58     	; 0x35bc <_hal_led_task+0x76>
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	8f 5f       	subi	r24, 0xFF	; 255
    3586:	8a 30       	cpi	r24, 0x0A	; 10
    3588:	10 f4       	brcc	.+4      	; 0x358e <_hal_led_task+0x48>
    358a:	8d 83       	std	Y+5, r24	; 0x05
    358c:	17 c0       	rjmp	.+46     	; 0x35bc <_hal_led_task+0x76>
    358e:	1d 82       	std	Y+5, r1	; 0x05
    3590:	d6 01       	movw	r26, r12
    3592:	1c 96       	adiw	r26, 0x0c	; 12
    3594:	ed 91       	ld	r30, X+
    3596:	fc 91       	ld	r31, X
    3598:	1d 97       	sbiw	r26, 0x0d	; 13
    359a:	6a 81       	ldd	r22, Y+2	; 0x02
    359c:	88 81       	ld	r24, Y
    359e:	99 81       	ldd	r25, Y+1	; 0x01
    35a0:	19 95       	eicall
    35a2:	0c c0       	rjmp	.+24     	; 0x35bc <_hal_led_task+0x76>
    35a4:	8d 81       	ldd	r24, Y+5	; 0x05
    35a6:	88 23       	and	r24, r24
    35a8:	31 f0       	breq	.+12     	; 0x35b6 <_hal_led_task+0x70>
    35aa:	81 2f       	mov	r24, r17
    35ac:	9e df       	rcall	.-196    	; 0x34ea <_turn_on>
    35ae:	8d 81       	ldd	r24, Y+5	; 0x05
    35b0:	81 50       	subi	r24, 0x01	; 1
    35b2:	8d 83       	std	Y+5, r24	; 0x05
    35b4:	03 c0       	rjmp	.+6      	; 0x35bc <_hal_led_task+0x76>
    35b6:	0c 83       	std	Y+4, r16	; 0x04
    35b8:	81 2f       	mov	r24, r17
    35ba:	69 df       	rcall	.-302    	; 0x348e <_turn_off>
    35bc:	1f 5f       	subi	r17, 0xFF	; 255
    35be:	26 96       	adiw	r28, 0x06	; 6
    35c0:	14 30       	cpi	r17, 0x04	; 4
    35c2:	79 f6       	brne	.-98     	; 0x3562 <_hal_led_task+0x1c>
    35c4:	85 e0       	ldi	r24, 0x05	; 5
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <vTaskDelay>
    35cc:	c7 cf       	rjmp	.-114    	; 0x355c <_hal_led_task+0x16>

000035ce <led_create>:
    35ce:	cf 92       	push	r12
    35d0:	df 92       	push	r13
    35d2:	ef 92       	push	r14
    35d4:	ff 92       	push	r15
    35d6:	0f 93       	push	r16
    35d8:	1f 93       	push	r17
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
    35de:	06 2f       	mov	r16, r22
    35e0:	0f 2e       	mov	r0, r31
    35e2:	fe e0       	ldi	r31, 0x0E	; 14
    35e4:	ef 2e       	mov	r14, r31
    35e6:	fa e0       	ldi	r31, 0x0A	; 10
    35e8:	ff 2e       	mov	r15, r31
    35ea:	f0 2d       	mov	r31, r0
    35ec:	d7 01       	movw	r26, r14
    35ee:	18 96       	adiw	r26, 0x08	; 8
    35f0:	ed 91       	ld	r30, X+
    35f2:	fc 91       	ld	r31, X
    35f4:	19 97       	sbiw	r26, 0x09	; 9
    35f6:	66 e0       	ldi	r22, 0x06	; 6
    35f8:	87 e2       	ldi	r24, 0x27	; 39
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	19 95       	eicall
    35fe:	c3 e4       	ldi	r28, 0x43	; 67
    3600:	d8 e0       	ldi	r29, 0x08	; 8
    3602:	0f 2e       	mov	r0, r31
    3604:	f8 e2       	ldi	r31, 0x28	; 40
    3606:	cf 2e       	mov	r12, r31
    3608:	d1 2c       	mov	r13, r1
    360a:	f0 2d       	mov	r31, r0
    360c:	d9 82       	std	Y+1, r13	; 0x01
    360e:	c8 82       	st	Y, r12
    3610:	86 e0       	ldi	r24, 0x06	; 6
    3612:	8a 83       	std	Y+2, r24	; 0x02
    3614:	1b 82       	std	Y+3, r1	; 0x03
    3616:	14 e0       	ldi	r17, 0x04	; 4
    3618:	1c 83       	std	Y+4, r17	; 0x04
    361a:	80 e0       	ldi	r24, 0x00	; 0
    361c:	38 df       	rcall	.-400    	; 0x348e <_turn_off>
    361e:	d7 01       	movw	r26, r14
    3620:	18 96       	adiw	r26, 0x08	; 8
    3622:	ed 91       	ld	r30, X+
    3624:	fc 91       	ld	r31, X
    3626:	19 97       	sbiw	r26, 0x09	; 9
    3628:	67 e0       	ldi	r22, 0x07	; 7
    362a:	87 e2       	ldi	r24, 0x27	; 39
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	19 95       	eicall
    3630:	df 82       	std	Y+7, r13	; 0x07
    3632:	ce 82       	std	Y+6, r12	; 0x06
    3634:	87 e0       	ldi	r24, 0x07	; 7
    3636:	88 87       	std	Y+8, r24	; 0x08
    3638:	19 86       	std	Y+9, r1	; 0x09
    363a:	1a 87       	std	Y+10, r17	; 0x0a
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	27 df       	rcall	.-434    	; 0x348e <_turn_off>
    3640:	d7 01       	movw	r26, r14
    3642:	18 96       	adiw	r26, 0x08	; 8
    3644:	ed 91       	ld	r30, X+
    3646:	fc 91       	ld	r31, X
    3648:	19 97       	sbiw	r26, 0x09	; 9
    364a:	65 e0       	ldi	r22, 0x05	; 5
    364c:	83 e3       	ldi	r24, 0x33	; 51
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	19 95       	eicall
    3652:	d7 01       	movw	r26, r14
    3654:	18 96       	adiw	r26, 0x08	; 8
    3656:	ed 91       	ld	r30, X+
    3658:	fc 91       	ld	r31, X
    365a:	19 97       	sbiw	r26, 0x09	; 9
    365c:	61 e0       	ldi	r22, 0x01	; 1
    365e:	84 e3       	ldi	r24, 0x34	; 52
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	19 95       	eicall
    3664:	84 e3       	ldi	r24, 0x34	; 52
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	9d 87       	std	Y+13, r25	; 0x0d
    366a:	8c 87       	std	Y+12, r24	; 0x0c
    366c:	85 e0       	ldi	r24, 0x05	; 5
    366e:	8e 87       	std	Y+14, r24	; 0x0e
    3670:	1f 86       	std	Y+15, r1	; 0x0f
    3672:	18 8b       	std	Y+16, r17	; 0x10
    3674:	82 e0       	ldi	r24, 0x02	; 2
    3676:	0b df       	rcall	.-490    	; 0x348e <_turn_off>
    3678:	d7 01       	movw	r26, r14
    367a:	18 96       	adiw	r26, 0x08	; 8
    367c:	ed 91       	ld	r30, X+
    367e:	fc 91       	ld	r31, X
    3680:	19 97       	sbiw	r26, 0x09	; 9
    3682:	64 e0       	ldi	r22, 0x04	; 4
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	91 e0       	ldi	r25, 0x01	; 1
    3688:	19 95       	eicall
    368a:	d7 01       	movw	r26, r14
    368c:	18 96       	adiw	r26, 0x08	; 8
    368e:	ed 91       	ld	r30, X+
    3690:	fc 91       	ld	r31, X
    3692:	19 97       	sbiw	r26, 0x09	; 9
    3694:	61 e0       	ldi	r22, 0x01	; 1
    3696:	82 e0       	ldi	r24, 0x02	; 2
    3698:	91 e0       	ldi	r25, 0x01	; 1
    369a:	19 95       	eicall
    369c:	82 e0       	ldi	r24, 0x02	; 2
    369e:	91 e0       	ldi	r25, 0x01	; 1
    36a0:	9b 8b       	std	Y+19, r25	; 0x13
    36a2:	8a 8b       	std	Y+18, r24	; 0x12
    36a4:	1c 8b       	std	Y+20, r17	; 0x14
    36a6:	1d 8a       	std	Y+21, r1	; 0x15
    36a8:	1e 8b       	std	Y+22, r17	; 0x16
    36aa:	83 e0       	ldi	r24, 0x03	; 3
    36ac:	f0 de       	rcall	.-544    	; 0x348e <_turn_off>
    36ae:	e1 2c       	mov	r14, r1
    36b0:	f1 2c       	mov	r15, r1
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	40 ec       	ldi	r20, 0xC0	; 192
    36b8:	50 e0       	ldi	r21, 0x00	; 0
    36ba:	6c ee       	ldi	r22, 0xEC	; 236
    36bc:	74 e0       	ldi	r23, 0x04	; 4
    36be:	83 ea       	ldi	r24, 0xA3	; 163
    36c0:	9a e1       	ldi	r25, 0x1A	; 26
    36c2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <xTaskCreate>
    36c6:	df 91       	pop	r29
    36c8:	cf 91       	pop	r28
    36ca:	1f 91       	pop	r17
    36cc:	0f 91       	pop	r16
    36ce:	ff 90       	pop	r15
    36d0:	ef 90       	pop	r14
    36d2:	df 90       	pop	r13
    36d4:	cf 90       	pop	r12
    36d6:	08 95       	ret

000036d8 <_serial_call_back>:
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	cf 93       	push	r28
    36de:	df 93       	push	r29
    36e0:	1f 92       	push	r1
    36e2:	1f 92       	push	r1
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
    36e8:	8c 01       	movw	r16, r24
    36ea:	19 82       	std	Y+1, r1	; 0x01
    36ec:	2d c0       	rjmp	.+90     	; 0x3748 <_serial_call_back+0x70>
    36ee:	e0 91 bf 08 	lds	r30, 0x08BF	; 0x8008bf <rec_buf_inp.2926>
    36f2:	ec 32       	cpi	r30, 0x2C	; 44
    36f4:	50 f4       	brcc	.+20     	; 0x370a <_serial_call_back+0x32>
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	8e 0f       	add	r24, r30
    36fa:	80 93 bf 08 	sts	0x08BF, r24	; 0x8008bf <rec_buf_inp.2926>
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	e1 51       	subi	r30, 0x11	; 17
    3702:	f7 4f       	sbci	r31, 0xF7	; 247
    3704:	8a 81       	ldd	r24, Y+2	; 0x02
    3706:	80 83       	st	Z, r24
    3708:	02 c0       	rjmp	.+4      	; 0x370e <_serial_call_back+0x36>
    370a:	10 92 bf 08 	sts	0x08BF, r1	; 0x8008bf <rec_buf_inp.2926>
    370e:	8a 81       	ldd	r24, Y+2	; 0x02
    3710:	8a 30       	cpi	r24, 0x0A	; 10
    3712:	d1 f4       	brne	.+52     	; 0x3748 <_serial_call_back+0x70>
    3714:	40 91 bf 08 	lds	r20, 0x08BF	; 0x8008bf <rec_buf_inp.2926>
    3718:	50 e0       	ldi	r21, 0x00	; 0
    371a:	fa 01       	movw	r30, r20
    371c:	e3 51       	subi	r30, 0x13	; 19
    371e:	f7 4f       	sbci	r31, 0xF7	; 247
    3720:	10 82       	st	Z, r1
    3722:	41 50       	subi	r20, 0x01	; 1
    3724:	51 09       	sbc	r21, r1
    3726:	9e 01       	movw	r18, r28
    3728:	2f 5f       	subi	r18, 0xFF	; 255
    372a:	3f 4f       	sbci	r19, 0xFF	; 255
    372c:	6f ee       	ldi	r22, 0xEF	; 239
    372e:	78 e0       	ldi	r23, 0x08	; 8
    3730:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <_reply_buffer_handle>
    3734:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <_reply_buffer_handle+0x1>
    3738:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <xStreamBufferSendFromISR>
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	81 11       	cpse	r24, r1
    3740:	0e 94 40 06 	call	0xc80	; 0xc80 <vPortYield>
    3744:	10 92 bf 08 	sts	0x08BF, r1	; 0x8008bf <rec_buf_inp.2926>
    3748:	be 01       	movw	r22, r28
    374a:	6e 5f       	subi	r22, 0xFE	; 254
    374c:	7f 4f       	sbci	r23, 0xFF	; 255
    374e:	c8 01       	movw	r24, r16
    3750:	3e db       	rcall	.-2436   	; 0x2dce <serial_get_byte>
    3752:	88 23       	and	r24, r24
    3754:	61 f2       	breq	.-104    	; 0x36ee <_serial_call_back+0x16>
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	df 91       	pop	r29
    375c:	cf 91       	pop	r28
    375e:	1f 91       	pop	r17
    3760:	0f 91       	pop	r16
    3762:	08 95       	ret

00003764 <_upload_message>:
    3764:	0f 93       	push	r16
    3766:	1f 93       	push	r17
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	8c 01       	movw	r16, r24
    376e:	eb 01       	movw	r28, r22
    3770:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <_reply_buffer_handle>
    3774:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <_reply_buffer_handle+0x1>
    3778:	0e 94 a4 0b 	call	0x1748	; 0x1748 <xStreamBufferReset>
    377c:	b8 01       	movw	r22, r16
    377e:	8b e5       	ldi	r24, 0x5B	; 91
    3780:	98 e0       	ldi	r25, 0x08	; 8
    3782:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <strcpy>
    3786:	20 97       	sbiw	r28, 0x00	; 0
    3788:	79 f0       	breq	.+30     	; 0x37a8 <_upload_message+0x44>
    378a:	eb e5       	ldi	r30, 0x5B	; 91
    378c:	f8 e0       	ldi	r31, 0x08	; 8
    378e:	01 90       	ld	r0, Z+
    3790:	00 20       	and	r0, r0
    3792:	e9 f7       	brne	.-6      	; 0x378e <_upload_message+0x2a>
    3794:	31 97       	sbiw	r30, 0x01	; 1
    3796:	80 e2       	ldi	r24, 0x20	; 32
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	91 83       	std	Z+1, r25	; 0x01
    379c:	80 83       	st	Z, r24
    379e:	be 01       	movw	r22, r28
    37a0:	8b e5       	ldi	r24, 0x5B	; 91
    37a2:	98 e0       	ldi	r25, 0x08	; 8
    37a4:	0e 94 dd 26 	call	0x4dba	; 0x4dba <strcat>
    37a8:	eb e5       	ldi	r30, 0x5B	; 91
    37aa:	f8 e0       	ldi	r31, 0x08	; 8
    37ac:	df 01       	movw	r26, r30
    37ae:	0d 90       	ld	r0, X+
    37b0:	00 20       	and	r0, r0
    37b2:	e9 f7       	brne	.-6      	; 0x37ae <_upload_message+0x4a>
    37b4:	11 97       	sbiw	r26, 0x01	; 1
    37b6:	8d e0       	ldi	r24, 0x0D	; 13
    37b8:	9a e0       	ldi	r25, 0x0A	; 10
    37ba:	11 96       	adiw	r26, 0x01	; 1
    37bc:	9c 93       	st	X, r25
    37be:	8e 93       	st	-X, r24
    37c0:	12 96       	adiw	r26, 0x02	; 2
    37c2:	1c 92       	st	X, r1
    37c4:	01 90       	ld	r0, Z+
    37c6:	00 20       	and	r0, r0
    37c8:	e9 f7       	brne	.-6      	; 0x37c4 <_upload_message+0x60>
    37ca:	31 97       	sbiw	r30, 0x01	; 1
    37cc:	eb 55       	subi	r30, 0x5B	; 91
    37ce:	f8 40       	sbci	r31, 0x08	; 8
    37d0:	ae 2f       	mov	r26, r30
    37d2:	8b e5       	ldi	r24, 0x5B	; 91
    37d4:	98 e0       	ldi	r25, 0x08	; 8
    37d6:	ac 01       	movw	r20, r24
    37d8:	6a 2f       	mov	r22, r26
    37da:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <_rn2483_serial>
    37de:	90 91 c3 08 	lds	r25, 0x08C3	; 0x8008c3 <_rn2483_serial+0x1>
    37e2:	a5 da       	rcall	.-2742   	; 0x2d2e <serial_send_bytes>
    37e4:	81 11       	cpse	r24, r1
    37e6:	0f c0       	rjmp	.+30     	; 0x3806 <_upload_message+0xa2>
    37e8:	28 e2       	ldi	r18, 0x28	; 40
    37ea:	35 e0       	ldi	r19, 0x05	; 5
    37ec:	4d e2       	ldi	r20, 0x2D	; 45
    37ee:	50 e0       	ldi	r21, 0x00	; 0
    37f0:	69 e4       	ldi	r22, 0x49	; 73
    37f2:	79 e0       	ldi	r23, 0x09	; 9
    37f4:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <_reply_buffer_handle>
    37f8:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <_reply_buffer_handle+0x1>
    37fc:	0e 94 25 0c 	call	0x184a	; 0x184a <xStreamBufferReceive>
    3800:	89 e4       	ldi	r24, 0x49	; 73
    3802:	99 e0       	ldi	r25, 0x09	; 9
    3804:	02 c0       	rjmp	.+4      	; 0x380a <_upload_message+0xa6>
    3806:	80 e0       	ldi	r24, 0x00	; 0
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	1f 91       	pop	r17
    3810:	0f 91       	pop	r16
    3812:	08 95       	ret

00003814 <_reply2return_code>:
    3814:	af 92       	push	r10
    3816:	bf 92       	push	r11
    3818:	cf 92       	push	r12
    381a:	df 92       	push	r13
    381c:	ef 92       	push	r14
    381e:	ff 92       	push	r15
    3820:	0f 93       	push	r16
    3822:	1f 93       	push	r17
    3824:	cf 93       	push	r28
    3826:	df 93       	push	r29
    3828:	6c 01       	movw	r12, r24
    382a:	fc 01       	movw	r30, r24
    382c:	01 90       	ld	r0, Z+
    382e:	00 20       	and	r0, r0
    3830:	e9 f7       	brne	.-6      	; 0x382c <_reply2return_code+0x18>
    3832:	31 97       	sbiw	r30, 0x01	; 1
    3834:	7f 01       	movw	r14, r30
    3836:	e8 1a       	sub	r14, r24
    3838:	f9 0a       	sbc	r15, r25
    383a:	08 e7       	ldi	r16, 0x78	; 120
    383c:	17 e0       	ldi	r17, 0x07	; 7
    383e:	c0 e0       	ldi	r28, 0x00	; 0
    3840:	d0 e0       	ldi	r29, 0x00	; 0
    3842:	f8 01       	movw	r30, r16
    3844:	60 81       	ld	r22, Z
    3846:	71 81       	ldd	r23, Z+1	; 0x01
    3848:	a7 01       	movw	r20, r14
    384a:	c6 01       	movw	r24, r12
    384c:	0e 94 ef 26 	call	0x4dde	; 0x4dde <strncasecmp>
    3850:	89 2b       	or	r24, r25
    3852:	49 f4       	brne	.+18     	; 0x3866 <_reply2return_code+0x52>
    3854:	fe 01       	movw	r30, r28
    3856:	ee 0f       	add	r30, r30
    3858:	ff 1f       	adc	r31, r31
    385a:	ec 0f       	add	r30, r28
    385c:	fd 1f       	adc	r31, r29
    385e:	e9 58       	subi	r30, 0x89	; 137
    3860:	f8 4f       	sbci	r31, 0xF8	; 248
    3862:	80 81       	ld	r24, Z
    3864:	07 c0       	rjmp	.+14     	; 0x3874 <_reply2return_code+0x60>
    3866:	21 96       	adiw	r28, 0x01	; 1
    3868:	0d 5f       	subi	r16, 0xFD	; 253
    386a:	1f 4f       	sbci	r17, 0xFF	; 255
    386c:	c1 31       	cpi	r28, 0x11	; 17
    386e:	d1 05       	cpc	r29, r1
    3870:	41 f7       	brne	.-48     	; 0x3842 <_reply2return_code+0x2e>
    3872:	80 e1       	ldi	r24, 0x10	; 16
    3874:	df 91       	pop	r29
    3876:	cf 91       	pop	r28
    3878:	1f 91       	pop	r17
    387a:	0f 91       	pop	r16
    387c:	ff 90       	pop	r15
    387e:	ef 90       	pop	r14
    3880:	df 90       	pop	r13
    3882:	cf 90       	pop	r12
    3884:	bf 90       	pop	r11
    3886:	af 90       	pop	r10
    3888:	08 95       	ret

0000388a <_upload_message_rc>:
    388a:	6c df       	rcall	.-296    	; 0x3764 <_upload_message>
    388c:	c3 cf       	rjmp	.-122    	; 0x3814 <_reply2return_code>
    388e:	08 95       	ret

00003890 <lora_driver_flush_buffers>:
    3890:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <_reply_buffer_handle>
    3894:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <_reply_buffer_handle+0x1>
    3898:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <xStreamBufferReset>
    389c:	08 95       	ret

0000389e <lora_driver_create>:
    389e:	8f 92       	push	r8
    38a0:	9f 92       	push	r9
    38a2:	af 92       	push	r10
    38a4:	cf 92       	push	r12
    38a6:	ef 92       	push	r14
    38a8:	0f 93       	push	r16
    38aa:	cf 93       	push	r28
    38ac:	c8 2f       	mov	r28, r24
    38ae:	41 e0       	ldi	r20, 0x01	; 1
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	88 ec       	ldi	r24, 0xC8	; 200
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <xStreamBufferGenericCreate>
    38bc:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <_reply_buffer_handle+0x1>
    38c0:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <_reply_buffer_handle>
    38c4:	0f 2e       	mov	r0, r31
    38c6:	fc e6       	ldi	r31, 0x6C	; 108
    38c8:	8f 2e       	mov	r8, r31
    38ca:	fb e1       	ldi	r31, 0x1B	; 27
    38cc:	9f 2e       	mov	r9, r31
    38ce:	f0 2d       	mov	r31, r0
    38d0:	68 94       	set
    38d2:	aa 24       	eor	r10, r10
    38d4:	a6 f8       	bld	r10, 6
    38d6:	68 94       	set
    38d8:	cc 24       	eor	r12, r12
    38da:	c6 f8       	bld	r12, 6
    38dc:	e1 2c       	mov	r14, r1
    38de:	00 e0       	ldi	r16, 0x00	; 0
    38e0:	23 e0       	ldi	r18, 0x03	; 3
    38e2:	40 e0       	ldi	r20, 0x00	; 0
    38e4:	51 ee       	ldi	r21, 0xE1	; 225
    38e6:	60 e0       	ldi	r22, 0x00	; 0
    38e8:	70 e0       	ldi	r23, 0x00	; 0
    38ea:	8c 2f       	mov	r24, r28
    38ec:	5c d9       	rcall	.-3400   	; 0x2ba6 <serial_new_instance>
    38ee:	90 93 c3 08 	sts	0x08C3, r25	; 0x8008c3 <_rn2483_serial+0x1>
    38f2:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <_rn2483_serial>
    38f6:	e0 91 16 0a 	lds	r30, 0x0A16	; 0x800a16 <register_access+0x8>
    38fa:	f0 91 17 0a 	lds	r31, 0x0A17	; 0x800a17 <register_access+0x9>
    38fe:	64 e0       	ldi	r22, 0x04	; 4
    3900:	87 e0       	ldi	r24, 0x07	; 7
    3902:	91 e0       	ldi	r25, 0x01	; 1
    3904:	19 95       	eicall
    3906:	cf 91       	pop	r28
    3908:	0f 91       	pop	r16
    390a:	ef 90       	pop	r14
    390c:	cf 90       	pop	r12
    390e:	af 90       	pop	r10
    3910:	9f 90       	pop	r9
    3912:	8f 90       	pop	r8
    3914:	08 95       	ret

00003916 <lora_driver_reset_rn2483>:
    3916:	88 23       	and	r24, r24
    3918:	49 f0       	breq	.+18     	; 0x392c <lora_driver_reset_rn2483+0x16>
    391a:	e0 91 20 0a 	lds	r30, 0x0A20	; 0x800a20 <register_access+0x12>
    391e:	f0 91 21 0a 	lds	r31, 0x0A21	; 0x800a21 <register_access+0x13>
    3922:	64 e0       	ldi	r22, 0x04	; 4
    3924:	88 e0       	ldi	r24, 0x08	; 8
    3926:	91 e0       	ldi	r25, 0x01	; 1
    3928:	19 95       	eicall
    392a:	08 95       	ret
    392c:	e0 91 16 0a 	lds	r30, 0x0A16	; 0x800a16 <register_access+0x8>
    3930:	f0 91 17 0a 	lds	r31, 0x0A17	; 0x800a17 <register_access+0x9>
    3934:	64 e0       	ldi	r22, 0x04	; 4
    3936:	88 e0       	ldi	r24, 0x08	; 8
    3938:	91 e0       	ldi	r25, 0x01	; 1
    393a:	19 95       	eicall
    393c:	08 95       	ret

0000393e <lora_driver_rn2483_factory_reset>:
    393e:	60 e0       	ldi	r22, 0x00	; 0
    3940:	70 e0       	ldi	r23, 0x00	; 0
    3942:	83 e1       	ldi	r24, 0x13	; 19
    3944:	95 e0       	ldi	r25, 0x05	; 5
    3946:	0e df       	rcall	.-484    	; 0x3764 <_upload_message>
    3948:	e9 e4       	ldi	r30, 0x49	; 73
    394a:	f9 e0       	ldi	r31, 0x09	; 9
    394c:	01 90       	ld	r0, Z+
    394e:	00 20       	and	r0, r0
    3950:	e9 f7       	brne	.-6      	; 0x394c <lora_driver_rn2483_factory_reset+0xe>
    3952:	31 97       	sbiw	r30, 0x01	; 1
    3954:	e9 54       	subi	r30, 0x49	; 73
    3956:	f9 40       	sbci	r31, 0x09	; 9
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	75 97       	sbiw	r30, 0x15	; 21
    395c:	08 f0       	brcs	.+2      	; 0x3960 <lora_driver_rn2483_factory_reset+0x22>
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	08 95       	ret

00003962 <lora_driver_get_rn2483_hweui>:
    3962:	cf 93       	push	r28
    3964:	df 93       	push	r29
    3966:	ec 01       	movw	r28, r24
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	70 e0       	ldi	r23, 0x00	; 0
    396c:	84 e2       	ldi	r24, 0x24	; 36
    396e:	95 e0       	ldi	r25, 0x05	; 5
    3970:	f9 de       	rcall	.-526    	; 0x3764 <_upload_message>
    3972:	e9 e4       	ldi	r30, 0x49	; 73
    3974:	f9 e0       	ldi	r31, 0x09	; 9
    3976:	01 90       	ld	r0, Z+
    3978:	00 20       	and	r0, r0
    397a:	e9 f7       	brne	.-6      	; 0x3976 <lora_driver_get_rn2483_hweui+0x14>
    397c:	ea 55       	subi	r30, 0x5A	; 90
    397e:	f9 40       	sbci	r31, 0x09	; 9
    3980:	39 f4       	brne	.+14     	; 0x3990 <lora_driver_get_rn2483_hweui+0x2e>
    3982:	69 e4       	ldi	r22, 0x49	; 73
    3984:	79 e0       	ldi	r23, 0x09	; 9
    3986:	ce 01       	movw	r24, r28
    3988:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <strcpy>
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	02 c0       	rjmp	.+4      	; 0x3994 <lora_driver_get_rn2483_hweui+0x32>
    3990:	18 82       	st	Y, r1
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	df 91       	pop	r29
    3996:	cf 91       	pop	r28
    3998:	08 95       	ret

0000399a <lora_driver_set_device_identifier>:
    399a:	fc 01       	movw	r30, r24
    399c:	01 90       	ld	r0, Z+
    399e:	00 20       	and	r0, r0
    39a0:	e9 f7       	brne	.-6      	; 0x399c <lora_driver_set_device_identifier+0x2>
    39a2:	9f 01       	movw	r18, r30
    39a4:	21 51       	subi	r18, 0x11	; 17
    39a6:	31 09       	sbc	r19, r1
    39a8:	28 17       	cp	r18, r24
    39aa:	39 07       	cpc	r19, r25
    39ac:	29 f4       	brne	.+10     	; 0x39b8 <lora_driver_set_device_identifier+0x1e>
    39ae:	bc 01       	movw	r22, r24
    39b0:	82 e5       	ldi	r24, 0x52	; 82
    39b2:	95 e0       	ldi	r25, 0x05	; 5
    39b4:	6a cf       	rjmp	.-300    	; 0x388a <_upload_message_rc>
    39b6:	08 95       	ret
    39b8:	89 e0       	ldi	r24, 0x09	; 9
    39ba:	08 95       	ret

000039bc <lora_driver_set_application_identifier>:
    39bc:	fc 01       	movw	r30, r24
    39be:	01 90       	ld	r0, Z+
    39c0:	00 20       	and	r0, r0
    39c2:	e9 f7       	brne	.-6      	; 0x39be <lora_driver_set_application_identifier+0x2>
    39c4:	9f 01       	movw	r18, r30
    39c6:	21 51       	subi	r18, 0x11	; 17
    39c8:	31 09       	sbc	r19, r1
    39ca:	28 17       	cp	r18, r24
    39cc:	39 07       	cpc	r19, r25
    39ce:	29 f4       	brne	.+10     	; 0x39da <lora_driver_set_application_identifier+0x1e>
    39d0:	bc 01       	movw	r22, r24
    39d2:	81 e6       	ldi	r24, 0x61	; 97
    39d4:	95 e0       	ldi	r25, 0x05	; 5
    39d6:	59 cf       	rjmp	.-334    	; 0x388a <_upload_message_rc>
    39d8:	08 95       	ret
    39da:	89 e0       	ldi	r24, 0x09	; 9
    39dc:	08 95       	ret

000039de <lora_driver_set_application_key>:
    39de:	fc 01       	movw	r30, r24
    39e0:	01 90       	ld	r0, Z+
    39e2:	00 20       	and	r0, r0
    39e4:	e9 f7       	brne	.-6      	; 0x39e0 <lora_driver_set_application_key+0x2>
    39e6:	9f 01       	movw	r18, r30
    39e8:	21 52       	subi	r18, 0x21	; 33
    39ea:	31 09       	sbc	r19, r1
    39ec:	28 17       	cp	r18, r24
    39ee:	39 07       	cpc	r19, r25
    39f0:	29 f4       	brne	.+10     	; 0x39fc <lora_driver_set_application_key+0x1e>
    39f2:	bc 01       	movw	r22, r24
    39f4:	80 e7       	ldi	r24, 0x70	; 112
    39f6:	95 e0       	ldi	r25, 0x05	; 5
    39f8:	48 cf       	rjmp	.-368    	; 0x388a <_upload_message_rc>
    39fa:	08 95       	ret
    39fc:	89 e0       	ldi	r24, 0x09	; 9
    39fe:	08 95       	ret

00003a00 <lora_driver_save_mac>:
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	70 e0       	ldi	r23, 0x00	; 0
    3a04:	8f ea       	ldi	r24, 0xAF	; 175
    3a06:	95 e0       	ldi	r25, 0x05	; 5
    3a08:	40 cf       	rjmp	.-384    	; 0x388a <_upload_message_rc>
    3a0a:	08 95       	ret

00003a0c <lora_driver_join>:
    3a0c:	e8 2f       	mov	r30, r24
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	ee 0f       	add	r30, r30
    3a12:	ff 1f       	adc	r31, r31
    3a14:	ed 58       	subi	r30, 0x8D	; 141
    3a16:	f8 4f       	sbci	r31, 0xF8	; 248
    3a18:	60 81       	ld	r22, Z
    3a1a:	71 81       	ldd	r23, Z+1	; 0x01
    3a1c:	88 eb       	ldi	r24, 0xB8	; 184
    3a1e:	95 e0       	ldi	r25, 0x05	; 5
    3a20:	34 df       	rcall	.-408    	; 0x388a <_upload_message_rc>
    3a22:	81 11       	cpse	r24, r1
    3a24:	12 c0       	rjmp	.+36     	; 0x3a4a <lora_driver_join+0x3e>
    3a26:	28 e2       	ldi	r18, 0x28	; 40
    3a28:	35 e0       	ldi	r19, 0x05	; 5
    3a2a:	4d e2       	ldi	r20, 0x2D	; 45
    3a2c:	50 e0       	ldi	r21, 0x00	; 0
    3a2e:	69 e4       	ldi	r22, 0x49	; 73
    3a30:	79 e0       	ldi	r23, 0x09	; 9
    3a32:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <_reply_buffer_handle>
    3a36:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <_reply_buffer_handle+0x1>
    3a3a:	0e 94 25 0c 	call	0x184a	; 0x184a <xStreamBufferReceive>
    3a3e:	88 23       	and	r24, r24
    3a40:	21 f0       	breq	.+8      	; 0x3a4a <lora_driver_join+0x3e>
    3a42:	89 e4       	ldi	r24, 0x49	; 73
    3a44:	99 e0       	ldi	r25, 0x09	; 9
    3a46:	e6 ce       	rjmp	.-564    	; 0x3814 <_reply2return_code>
    3a48:	08 95       	ret
    3a4a:	89 e4       	ldi	r24, 0x49	; 73
    3a4c:	99 e0       	ldi	r25, 0x09	; 9
    3a4e:	e2 ce       	rjmp	.-572    	; 0x3814 <_reply2return_code>
    3a50:	08 95       	ret

00003a52 <lora_driver_sent_upload_message>:
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
    3a56:	1f 92       	push	r1
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
    3a5c:	db 01       	movw	r26, r22
    3a5e:	11 96       	adiw	r26, 0x01	; 1
    3a60:	9c 91       	ld	r25, X
    3a62:	11 97       	sbiw	r26, 0x01	; 1
    3a64:	95 31       	cpi	r25, 0x15	; 21
    3a66:	08 f0       	brcs	.+2      	; 0x3a6a <lora_driver_sent_upload_message+0x18>
    3a68:	87 c0       	rjmp	.+270    	; 0x3b78 <lora_driver_sent_upload_message+0x126>
    3a6a:	99 23       	and	r25, r25
    3a6c:	81 f1       	breq	.+96     	; 0x3ace <lora_driver_sent_upload_message+0x7c>
    3a6e:	60 e0       	ldi	r22, 0x00	; 0
    3a70:	70 e0       	ldi	r23, 0x00	; 0
    3a72:	27 2f       	mov	r18, r23
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	46 2f       	mov	r20, r22
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	fd 01       	movw	r30, r26
    3a7c:	e4 0f       	add	r30, r20
    3a7e:	f5 1f       	adc	r31, r21
    3a80:	92 81       	ldd	r25, Z+2	; 0x02
    3a82:	92 95       	swap	r25
    3a84:	9f 70       	andi	r25, 0x0F	; 15
    3a86:	9a 30       	cpi	r25, 0x0A	; 10
    3a88:	10 f0       	brcs	.+4      	; 0x3a8e <lora_driver_sent_upload_message+0x3c>
    3a8a:	99 5c       	subi	r25, 0xC9	; 201
    3a8c:	01 c0       	rjmp	.+2      	; 0x3a90 <lora_driver_sent_upload_message+0x3e>
    3a8e:	90 5d       	subi	r25, 0xD0	; 208
    3a90:	f9 01       	movw	r30, r18
    3a92:	e6 52       	subi	r30, 0x26	; 38
    3a94:	f7 4f       	sbci	r31, 0xF7	; 247
    3a96:	90 83       	st	Z, r25
    3a98:	2f 5f       	subi	r18, 0xFF	; 255
    3a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9c:	fd 01       	movw	r30, r26
    3a9e:	e4 0f       	add	r30, r20
    3aa0:	f5 1f       	adc	r31, r21
    3aa2:	92 81       	ldd	r25, Z+2	; 0x02
    3aa4:	9f 70       	andi	r25, 0x0F	; 15
    3aa6:	49 2f       	mov	r20, r25
    3aa8:	50 e0       	ldi	r21, 0x00	; 0
    3aaa:	4a 30       	cpi	r20, 0x0A	; 10
    3aac:	51 05       	cpc	r21, r1
    3aae:	14 f0       	brlt	.+4      	; 0x3ab4 <lora_driver_sent_upload_message+0x62>
    3ab0:	99 5c       	subi	r25, 0xC9	; 201
    3ab2:	01 c0       	rjmp	.+2      	; 0x3ab6 <lora_driver_sent_upload_message+0x64>
    3ab4:	90 5d       	subi	r25, 0xD0	; 208
    3ab6:	f9 01       	movw	r30, r18
    3ab8:	e6 52       	subi	r30, 0x26	; 38
    3aba:	f7 4f       	sbci	r31, 0xF7	; 247
    3abc:	90 83       	st	Z, r25
    3abe:	7e 5f       	subi	r23, 0xFE	; 254
    3ac0:	6f 5f       	subi	r22, 0xFF	; 255
    3ac2:	11 96       	adiw	r26, 0x01	; 1
    3ac4:	9c 91       	ld	r25, X
    3ac6:	11 97       	sbiw	r26, 0x01	; 1
    3ac8:	69 17       	cp	r22, r25
    3aca:	98 f2       	brcs	.-90     	; 0x3a72 <lora_driver_sent_upload_message+0x20>
    3acc:	01 c0       	rjmp	.+2      	; 0x3ad0 <lora_driver_sent_upload_message+0x7e>
    3ace:	70 e0       	ldi	r23, 0x00	; 0
    3ad0:	e7 2f       	mov	r30, r23
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	e6 52       	subi	r30, 0x26	; 38
    3ad6:	f7 4f       	sbci	r31, 0xF7	; 247
    3ad8:	10 82       	st	Z, r1
    3ada:	4c 91       	ld	r20, X
    3adc:	81 11       	cpse	r24, r1
    3ade:	03 c0       	rjmp	.+6      	; 0x3ae6 <lora_driver_sent_upload_message+0x94>
    3ae0:	81 ec       	ldi	r24, 0xC1	; 193
    3ae2:	95 e0       	ldi	r25, 0x05	; 5
    3ae4:	02 c0       	rjmp	.+4      	; 0x3aea <lora_driver_sent_upload_message+0x98>
    3ae6:	83 ec       	ldi	r24, 0xC3	; 195
    3ae8:	95 e0       	ldi	r25, 0x05	; 5
    3aea:	2a ed       	ldi	r18, 0xDA	; 218
    3aec:	38 e0       	ldi	r19, 0x08	; 8
    3aee:	3f 93       	push	r19
    3af0:	2f 93       	push	r18
    3af2:	1f 92       	push	r1
    3af4:	4f 93       	push	r20
    3af6:	9f 93       	push	r25
    3af8:	8f 93       	push	r24
    3afa:	87 ec       	ldi	r24, 0xC7	; 199
    3afc:	95 e0       	ldi	r25, 0x05	; 5
    3afe:	9f 93       	push	r25
    3b00:	8f 93       	push	r24
    3b02:	8c e1       	ldi	r24, 0x1C	; 28
    3b04:	99 e0       	ldi	r25, 0x09	; 9
    3b06:	9f 93       	push	r25
    3b08:	8f 93       	push	r24
    3b0a:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <sprintf>
    3b0e:	60 e0       	ldi	r22, 0x00	; 0
    3b10:	70 e0       	ldi	r23, 0x00	; 0
    3b12:	8c e1       	ldi	r24, 0x1C	; 28
    3b14:	99 e0       	ldi	r25, 0x09	; 9
    3b16:	b9 de       	rcall	.-654    	; 0x388a <_upload_message_rc>
    3b18:	0f b6       	in	r0, 0x3f	; 63
    3b1a:	f8 94       	cli
    3b1c:	de bf       	out	0x3e, r29	; 62
    3b1e:	0f be       	out	0x3f, r0	; 63
    3b20:	cd bf       	out	0x3d, r28	; 61
    3b22:	8e 30       	cpi	r24, 0x0E	; 14
    3b24:	51 f5       	brne	.+84     	; 0x3b7a <lora_driver_sent_upload_message+0x128>
    3b26:	87 e0       	ldi	r24, 0x07	; 7
    3b28:	89 83       	std	Y+1, r24	; 0x01
    3b2a:	be 01       	movw	r22, r28
    3b2c:	6f 5f       	subi	r22, 0xFF	; 255
    3b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b30:	89 e4       	ldi	r24, 0x49	; 73
    3b32:	99 e0       	ldi	r25, 0x09	; 9
    3b34:	3c d1       	rcall	.+632    	; 0x3dae <decode_port_no>
    3b36:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <_downlink_payload>
    3b3a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	e7 5b       	subi	r30, 0xB7	; 183
    3b40:	f6 4f       	sbci	r31, 0xF6	; 246
    3b42:	df 01       	movw	r26, r30
    3b44:	0d 90       	ld	r0, X+
    3b46:	00 20       	and	r0, r0
    3b48:	e9 f7       	brne	.-6      	; 0x3b44 <lora_driver_sent_upload_message+0xf2>
    3b4a:	11 97       	sbiw	r26, 0x01	; 1
    3b4c:	ae 1b       	sub	r26, r30
    3b4e:	bf 0b       	sbc	r27, r31
    3b50:	aa 23       	and	r26, r26
    3b52:	81 f0       	breq	.+32     	; 0x3b74 <lora_driver_sent_upload_message+0x122>
    3b54:	bb 27       	eor	r27, r27
    3b56:	11 97       	sbiw	r26, 0x01	; 1
    3b58:	cd 01       	movw	r24, r26
    3b5a:	0a f4       	brpl	.+2      	; 0x3b5e <lora_driver_sent_upload_message+0x10c>
    3b5c:	01 96       	adiw	r24, 0x01	; 1
    3b5e:	95 95       	asr	r25
    3b60:	87 95       	ror	r24
    3b62:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <_downlink_payload+0x1>
    3b66:	af 01       	movw	r20, r30
    3b68:	4f 5f       	subi	r20, 0xFF	; 255
    3b6a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b6c:	64 e1       	ldi	r22, 0x14	; 20
    3b6e:	86 ec       	ldi	r24, 0xC6	; 198
    3b70:	98 e0       	ldi	r25, 0x08	; 8
    3b72:	49 d1       	rcall	.+658    	; 0x3e06 <decode_hexadecimal_string_bytes>
    3b74:	8e e0       	ldi	r24, 0x0E	; 14
    3b76:	01 c0       	rjmp	.+2      	; 0x3b7a <lora_driver_sent_upload_message+0x128>
    3b78:	84 e1       	ldi	r24, 0x14	; 20
    3b7a:	0f 90       	pop	r0
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	08 95       	ret

00003b82 <lora_driver_set_adaptive_data_rate>:
    3b82:	81 30       	cpi	r24, 0x01	; 1
    3b84:	19 f0       	breq	.+6      	; 0x3b8c <lora_driver_set_adaptive_data_rate+0xa>
    3b86:	67 ed       	ldi	r22, 0xD7	; 215
    3b88:	75 e0       	ldi	r23, 0x05	; 5
    3b8a:	02 c0       	rjmp	.+4      	; 0x3b90 <lora_driver_set_adaptive_data_rate+0xe>
    3b8c:	67 e9       	ldi	r22, 0x97	; 151
    3b8e:	76 e0       	ldi	r23, 0x06	; 6
    3b90:	8b ed       	ldi	r24, 0xDB	; 219
    3b92:	95 e0       	ldi	r25, 0x05	; 5
    3b94:	7a ce       	rjmp	.-780    	; 0x388a <_upload_message_rc>
    3b96:	08 95       	ret

00003b98 <lora_driver_configure_to_eu868>:
    3b98:	2f 92       	push	r2
    3b9a:	3f 92       	push	r3
    3b9c:	4f 92       	push	r4
    3b9e:	5f 92       	push	r5
    3ba0:	6f 92       	push	r6
    3ba2:	7f 92       	push	r7
    3ba4:	8f 92       	push	r8
    3ba6:	9f 92       	push	r9
    3ba8:	af 92       	push	r10
    3baa:	bf 92       	push	r11
    3bac:	cf 92       	push	r12
    3bae:	df 92       	push	r13
    3bb0:	ef 92       	push	r14
    3bb2:	ff 92       	push	r15
    3bb4:	0f 93       	push	r16
    3bb6:	1f 93       	push	r17
    3bb8:	cf 93       	push	r28
    3bba:	df 93       	push	r29
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	a0 97       	sbiw	r28, 0x20	; 32
    3bc2:	0f b6       	in	r0, 0x3f	; 63
    3bc4:	f8 94       	cli
    3bc6:	de bf       	out	0x3e, r29	; 62
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	cd bf       	out	0x3d, r28	; 61
    3bcc:	60 e2       	ldi	r22, 0x20	; 32
    3bce:	76 e0       	ldi	r23, 0x06	; 6
    3bd0:	8c e2       	ldi	r24, 0x2C	; 44
    3bd2:	96 e0       	ldi	r25, 0x06	; 6
    3bd4:	c7 dd       	rcall	.-1138   	; 0x3764 <_upload_message>
    3bd6:	1e de       	rcall	.-964    	; 0x3814 <_reply2return_code>
    3bd8:	81 11       	cpse	r24, r1
    3bda:	a3 c0       	rjmp	.+326    	; 0x3d22 <lora_driver_configure_to_eu868+0x18a>
    3bdc:	80 e2       	ldi	r24, 0x20	; 32
    3bde:	e1 e2       	ldi	r30, 0x21	; 33
    3be0:	f2 e0       	ldi	r31, 0x02	; 2
    3be2:	de 01       	movw	r26, r28
    3be4:	11 96       	adiw	r26, 0x01	; 1
    3be6:	01 90       	ld	r0, Z+
    3be8:	0d 92       	st	X+, r0
    3bea:	8a 95       	dec	r24
    3bec:	e1 f7       	brne	.-8      	; 0x3be6 <lora_driver_configure_to_eu868+0x4e>
    3bee:	9e 01       	movw	r18, r28
    3bf0:	2f 5f       	subi	r18, 0xFF	; 255
    3bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf4:	69 01       	movw	r12, r18
    3bf6:	e1 2c       	mov	r14, r1
    3bf8:	f1 2c       	mov	r15, r1
    3bfa:	0f 2e       	mov	r0, r31
    3bfc:	f8 e3       	ldi	r31, 0x38	; 56
    3bfe:	af 2e       	mov	r10, r31
    3c00:	f6 e0       	ldi	r31, 0x06	; 6
    3c02:	bf 2e       	mov	r11, r31
    3c04:	f0 2d       	mov	r31, r0
    3c06:	0c e1       	ldi	r16, 0x1C	; 28
    3c08:	19 e0       	ldi	r17, 0x09	; 9
    3c0a:	0f 2e       	mov	r0, r31
    3c0c:	f1 e5       	ldi	r31, 0x51	; 81
    3c0e:	4f 2e       	mov	r4, r31
    3c10:	f6 e0       	ldi	r31, 0x06	; 6
    3c12:	5f 2e       	mov	r5, r31
    3c14:	f0 2d       	mov	r31, r0
    3c16:	0f 2e       	mov	r0, r31
    3c18:	f8 e6       	ldi	r31, 0x68	; 104
    3c1a:	8f 2e       	mov	r8, r31
    3c1c:	f6 e0       	ldi	r31, 0x06	; 6
    3c1e:	9f 2e       	mov	r9, r31
    3c20:	f0 2d       	mov	r31, r0
    3c22:	0f 2e       	mov	r0, r31
    3c24:	f2 e8       	ldi	r31, 0x82	; 130
    3c26:	6f 2e       	mov	r6, r31
    3c28:	f6 e0       	ldi	r31, 0x06	; 6
    3c2a:	7f 2e       	mov	r7, r31
    3c2c:	f0 2d       	mov	r31, r0
    3c2e:	3e 2c       	mov	r3, r14
    3c30:	2f 2c       	mov	r2, r15
    3c32:	ff 92       	push	r15
    3c34:	ef 92       	push	r14
    3c36:	bf 92       	push	r11
    3c38:	af 92       	push	r10
    3c3a:	1f 93       	push	r17
    3c3c:	0f 93       	push	r16
    3c3e:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <sprintf>
    3c42:	60 e0       	ldi	r22, 0x00	; 0
    3c44:	70 e0       	ldi	r23, 0x00	; 0
    3c46:	c8 01       	movw	r24, r16
    3c48:	8d dd       	rcall	.-1254   	; 0x3764 <_upload_message>
    3c4a:	e4 dd       	rcall	.-1080   	; 0x3814 <_reply2return_code>
    3c4c:	0f 90       	pop	r0
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	81 11       	cpse	r24, r1
    3c5a:	63 c0       	rjmp	.+198    	; 0x3d22 <lora_driver_configure_to_eu868+0x18a>
    3c5c:	32 e0       	ldi	r19, 0x02	; 2
    3c5e:	3e 15       	cp	r19, r14
    3c60:	e8 f4       	brcc	.+58     	; 0x3c9c <lora_driver_configure_to_eu868+0x104>
    3c62:	f6 01       	movw	r30, r12
    3c64:	83 81       	ldd	r24, Z+3	; 0x03
    3c66:	8f 93       	push	r24
    3c68:	82 81       	ldd	r24, Z+2	; 0x02
    3c6a:	8f 93       	push	r24
    3c6c:	81 81       	ldd	r24, Z+1	; 0x01
    3c6e:	8f 93       	push	r24
    3c70:	80 81       	ld	r24, Z
    3c72:	8f 93       	push	r24
    3c74:	ff 92       	push	r15
    3c76:	ef 92       	push	r14
    3c78:	5f 92       	push	r5
    3c7a:	4f 92       	push	r4
    3c7c:	1f 93       	push	r17
    3c7e:	0f 93       	push	r16
    3c80:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <sprintf>
    3c84:	60 e0       	ldi	r22, 0x00	; 0
    3c86:	70 e0       	ldi	r23, 0x00	; 0
    3c88:	c8 01       	movw	r24, r16
    3c8a:	6c dd       	rcall	.-1320   	; 0x3764 <_upload_message>
    3c8c:	c3 dd       	rcall	.-1146   	; 0x3814 <_reply2return_code>
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
    3c98:	81 11       	cpse	r24, r1
    3c9a:	43 c0       	rjmp	.+134    	; 0x3d22 <lora_driver_configure_to_eu868+0x18a>
    3c9c:	2f 92       	push	r2
    3c9e:	3f 92       	push	r3
    3ca0:	9f 92       	push	r9
    3ca2:	8f 92       	push	r8
    3ca4:	1f 93       	push	r17
    3ca6:	0f 93       	push	r16
    3ca8:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <sprintf>
    3cac:	60 e0       	ldi	r22, 0x00	; 0
    3cae:	70 e0       	ldi	r23, 0x00	; 0
    3cb0:	c8 01       	movw	r24, r16
    3cb2:	58 dd       	rcall	.-1360   	; 0x3764 <_upload_message>
    3cb4:	af dd       	rcall	.-1186   	; 0x3814 <_reply2return_code>
    3cb6:	0f 90       	pop	r0
    3cb8:	0f 90       	pop	r0
    3cba:	0f 90       	pop	r0
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	81 11       	cpse	r24, r1
    3cc4:	2e c0       	rjmp	.+92     	; 0x3d22 <lora_driver_configure_to_eu868+0x18a>
    3cc6:	2f 92       	push	r2
    3cc8:	3f 92       	push	r3
    3cca:	7f 92       	push	r7
    3ccc:	6f 92       	push	r6
    3cce:	1f 93       	push	r17
    3cd0:	0f 93       	push	r16
    3cd2:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <sprintf>
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	70 e0       	ldi	r23, 0x00	; 0
    3cda:	c8 01       	movw	r24, r16
    3cdc:	43 dd       	rcall	.-1402   	; 0x3764 <_upload_message>
    3cde:	9a dd       	rcall	.-1228   	; 0x3814 <_reply2return_code>
    3ce0:	0f 90       	pop	r0
    3ce2:	0f 90       	pop	r0
    3ce4:	0f 90       	pop	r0
    3ce6:	0f 90       	pop	r0
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	81 11       	cpse	r24, r1
    3cee:	19 c0       	rjmp	.+50     	; 0x3d22 <lora_driver_configure_to_eu868+0x18a>
    3cf0:	3f ef       	ldi	r19, 0xFF	; 255
    3cf2:	e3 1a       	sub	r14, r19
    3cf4:	f3 0a       	sbc	r15, r19
    3cf6:	84 e0       	ldi	r24, 0x04	; 4
    3cf8:	c8 0e       	add	r12, r24
    3cfa:	d1 1c       	adc	r13, r1
    3cfc:	98 e0       	ldi	r25, 0x08	; 8
    3cfe:	e9 16       	cp	r14, r25
    3d00:	f1 04       	cpc	r15, r1
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <lora_driver_configure_to_eu868+0x16e>
    3d04:	94 cf       	rjmp	.-216    	; 0x3c2e <lora_driver_configure_to_eu868+0x96>
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	70 e0       	ldi	r23, 0x00	; 0
    3d0a:	8a e9       	ldi	r24, 0x9A	; 154
    3d0c:	96 e0       	ldi	r25, 0x06	; 6
    3d0e:	2a dd       	rcall	.-1452   	; 0x3764 <_upload_message>
    3d10:	81 dd       	rcall	.-1278   	; 0x3814 <_reply2return_code>
    3d12:	81 11       	cpse	r24, r1
    3d14:	06 c0       	rjmp	.+12     	; 0x3d22 <lora_driver_configure_to_eu868+0x18a>
    3d16:	60 e0       	ldi	r22, 0x00	; 0
    3d18:	70 e0       	ldi	r23, 0x00	; 0
    3d1a:	8b ea       	ldi	r24, 0xAB	; 171
    3d1c:	96 e0       	ldi	r25, 0x06	; 6
    3d1e:	22 dd       	rcall	.-1468   	; 0x3764 <_upload_message>
    3d20:	79 dd       	rcall	.-1294   	; 0x3814 <_reply2return_code>
    3d22:	a0 96       	adiw	r28, 0x20	; 32
    3d24:	0f b6       	in	r0, 0x3f	; 63
    3d26:	f8 94       	cli
    3d28:	de bf       	out	0x3e, r29	; 62
    3d2a:	0f be       	out	0x3f, r0	; 63
    3d2c:	cd bf       	out	0x3d, r28	; 61
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	1f 91       	pop	r17
    3d34:	0f 91       	pop	r16
    3d36:	ff 90       	pop	r15
    3d38:	ef 90       	pop	r14
    3d3a:	df 90       	pop	r13
    3d3c:	cf 90       	pop	r12
    3d3e:	bf 90       	pop	r11
    3d40:	af 90       	pop	r10
    3d42:	9f 90       	pop	r9
    3d44:	8f 90       	pop	r8
    3d46:	7f 90       	pop	r7
    3d48:	6f 90       	pop	r6
    3d4a:	5f 90       	pop	r5
    3d4c:	4f 90       	pop	r4
    3d4e:	3f 90       	pop	r3
    3d50:	2f 90       	pop	r2
    3d52:	08 95       	ret

00003d54 <lora_driver_set_otaa_identity>:
    3d54:	ef 92       	push	r14
    3d56:	ff 92       	push	r15
    3d58:	0f 93       	push	r16
    3d5a:	1f 93       	push	r17
    3d5c:	cf 93       	push	r28
    3d5e:	df 93       	push	r29
    3d60:	ec 01       	movw	r28, r24
    3d62:	8b 01       	movw	r16, r22
    3d64:	7a 01       	movw	r14, r20
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	0c df       	rcall	.-488    	; 0x3b82 <lora_driver_set_adaptive_data_rate>
    3d6a:	81 11       	cpse	r24, r1
    3d6c:	0d c0       	rjmp	.+26     	; 0x3d88 <lora_driver_set_otaa_identity+0x34>
    3d6e:	ce 01       	movw	r24, r28
    3d70:	25 de       	rcall	.-950    	; 0x39bc <lora_driver_set_application_identifier>
    3d72:	81 11       	cpse	r24, r1
    3d74:	09 c0       	rjmp	.+18     	; 0x3d88 <lora_driver_set_otaa_identity+0x34>
    3d76:	c8 01       	movw	r24, r16
    3d78:	32 de       	rcall	.-924    	; 0x39de <lora_driver_set_application_key>
    3d7a:	81 11       	cpse	r24, r1
    3d7c:	05 c0       	rjmp	.+10     	; 0x3d88 <lora_driver_set_otaa_identity+0x34>
    3d7e:	c7 01       	movw	r24, r14
    3d80:	0c de       	rcall	.-1000   	; 0x399a <lora_driver_set_device_identifier>
    3d82:	81 11       	cpse	r24, r1
    3d84:	01 c0       	rjmp	.+2      	; 0x3d88 <lora_driver_set_otaa_identity+0x34>
    3d86:	3c de       	rcall	.-904    	; 0x3a00 <lora_driver_save_mac>
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	ff 90       	pop	r15
    3d92:	ef 90       	pop	r14
    3d94:	08 95       	ret

00003d96 <lora_driver_map_return_code_to_text>:
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	fc 01       	movw	r30, r24
    3d9a:	ee 0f       	add	r30, r30
    3d9c:	ff 1f       	adc	r31, r31
    3d9e:	8e 0f       	add	r24, r30
    3da0:	9f 1f       	adc	r25, r31
    3da2:	fc 01       	movw	r30, r24
    3da4:	e9 58       	subi	r30, 0x89	; 137
    3da6:	f8 4f       	sbci	r31, 0xF8	; 248
    3da8:	81 81       	ldd	r24, Z+1	; 0x01
    3daa:	92 81       	ldd	r25, Z+2	; 0x02
    3dac:	08 95       	ret

00003dae <decode_port_no>:
    3dae:	dc 01       	movw	r26, r24
    3db0:	00 97       	sbiw	r24, 0x00	; 0
    3db2:	29 f1       	breq	.+74     	; 0x3dfe <decode_port_no+0x50>
    3db4:	fb 01       	movw	r30, r22
    3db6:	20 81       	ld	r18, Z
    3db8:	fc 01       	movw	r30, r24
    3dba:	01 90       	ld	r0, Z+
    3dbc:	00 20       	and	r0, r0
    3dbe:	e9 f7       	brne	.-6      	; 0x3dba <decode_port_no+0xc>
    3dc0:	31 97       	sbiw	r30, 0x01	; 1
    3dc2:	e8 1b       	sub	r30, r24
    3dc4:	f9 0b       	sbc	r31, r25
    3dc6:	82 2f       	mov	r24, r18
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	e8 17       	cp	r30, r24
    3dcc:	f9 07       	cpc	r31, r25
    3dce:	c8 f0       	brcs	.+50     	; 0x3e02 <decode_port_no+0x54>
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	08 c0       	rjmp	.+16     	; 0x3de4 <decode_port_no+0x36>
    3dd4:	88 0f       	add	r24, r24
    3dd6:	38 2f       	mov	r19, r24
    3dd8:	33 0f       	add	r19, r19
    3dda:	33 0f       	add	r19, r19
    3ddc:	83 0f       	add	r24, r19
    3dde:	80 53       	subi	r24, 0x30	; 48
    3de0:	89 0f       	add	r24, r25
    3de2:	2f 5f       	subi	r18, 0xFF	; 255
    3de4:	fd 01       	movw	r30, r26
    3de6:	e2 0f       	add	r30, r18
    3de8:	f1 1d       	adc	r31, r1
    3dea:	90 81       	ld	r25, Z
    3dec:	30 ed       	ldi	r19, 0xD0	; 208
    3dee:	39 0f       	add	r19, r25
    3df0:	3a 30       	cpi	r19, 0x0A	; 10
    3df2:	10 f4       	brcc	.+4      	; 0x3df8 <decode_port_no+0x4a>
    3df4:	91 11       	cpse	r25, r1
    3df6:	ee cf       	rjmp	.-36     	; 0x3dd4 <decode_port_no+0x26>
    3df8:	fb 01       	movw	r30, r22
    3dfa:	20 83       	st	Z, r18
    3dfc:	08 95       	ret
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	08 95       	ret
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	08 95       	ret

00003e06 <decode_hexadecimal_string_bytes>:
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	dc 01       	movw	r26, r24
    3e10:	ea 01       	movw	r28, r20
    3e12:	20 97       	sbiw	r28, 0x00	; 0
    3e14:	e1 f1       	breq	.+120    	; 0x3e8e <decode_hexadecimal_string_bytes+0x88>
    3e16:	fa 01       	movw	r30, r20
    3e18:	01 90       	ld	r0, Z+
    3e1a:	00 20       	and	r0, r0
    3e1c:	e9 f7       	brne	.-6      	; 0x3e18 <decode_hexadecimal_string_bytes+0x12>
    3e1e:	31 97       	sbiw	r30, 0x01	; 1
    3e20:	e4 1b       	sub	r30, r20
    3e22:	f5 0b       	sbc	r31, r21
    3e24:	32 97       	sbiw	r30, 0x02	; 2
    3e26:	10 f5       	brcc	.+68     	; 0x3e6c <decode_hexadecimal_string_bytes+0x66>
    3e28:	32 c0       	rjmp	.+100    	; 0x3e8e <decode_hexadecimal_string_bytes+0x88>
    3e2a:	8d 01       	movw	r16, r26
    3e2c:	04 0f       	add	r16, r20
    3e2e:	15 1f       	adc	r17, r21
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	ae 01       	movw	r20, r28
    3e34:	42 0f       	add	r20, r18
    3e36:	53 1f       	adc	r21, r19
    3e38:	fa 01       	movw	r30, r20
    3e3a:	90 81       	ld	r25, Z
    3e3c:	91 34       	cpi	r25, 0x41	; 65
    3e3e:	28 f0       	brcs	.+10     	; 0x3e4a <decode_hexadecimal_string_bytes+0x44>
    3e40:	97 53       	subi	r25, 0x37	; 55
    3e42:	59 2f       	mov	r21, r25
    3e44:	52 95       	swap	r21
    3e46:	50 7f       	andi	r21, 0xF0	; 240
    3e48:	03 c0       	rjmp	.+6      	; 0x3e50 <decode_hexadecimal_string_bytes+0x4a>
    3e4a:	59 2f       	mov	r21, r25
    3e4c:	52 95       	swap	r21
    3e4e:	50 7f       	andi	r21, 0xF0	; 240
    3e50:	2c 0f       	add	r18, r28
    3e52:	3d 1f       	adc	r19, r29
    3e54:	f9 01       	movw	r30, r18
    3e56:	91 81       	ldd	r25, Z+1	; 0x01
    3e58:	91 34       	cpi	r25, 0x41	; 65
    3e5a:	10 f0       	brcs	.+4      	; 0x3e60 <decode_hexadecimal_string_bytes+0x5a>
    3e5c:	97 53       	subi	r25, 0x37	; 55
    3e5e:	01 c0       	rjmp	.+2      	; 0x3e62 <decode_hexadecimal_string_bytes+0x5c>
    3e60:	90 53       	subi	r25, 0x30	; 48
    3e62:	95 0f       	add	r25, r21
    3e64:	f8 01       	movw	r30, r16
    3e66:	90 83       	st	Z, r25
    3e68:	8f 5f       	subi	r24, 0xFF	; 255
    3e6a:	01 c0       	rjmp	.+2      	; 0x3e6e <decode_hexadecimal_string_bytes+0x68>
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	28 2f       	mov	r18, r24
    3e70:	22 0f       	add	r18, r18
    3e72:	48 2f       	mov	r20, r24
    3e74:	50 e0       	ldi	r21, 0x00	; 0
    3e76:	fe 01       	movw	r30, r28
    3e78:	01 90       	ld	r0, Z+
    3e7a:	00 20       	and	r0, r0
    3e7c:	e9 f7       	brne	.-6      	; 0x3e78 <decode_hexadecimal_string_bytes+0x72>
    3e7e:	31 97       	sbiw	r30, 0x01	; 1
    3e80:	ec 1b       	sub	r30, r28
    3e82:	fd 0b       	sbc	r31, r29
    3e84:	4e 17       	cp	r20, r30
    3e86:	5f 07       	cpc	r21, r31
    3e88:	10 f4       	brcc	.+4      	; 0x3e8e <decode_hexadecimal_string_bytes+0x88>
    3e8a:	86 13       	cpse	r24, r22
    3e8c:	ce cf       	rjmp	.-100    	; 0x3e2a <decode_hexadecimal_string_bytes+0x24>
    3e8e:	df 91       	pop	r29
    3e90:	cf 91       	pop	r28
    3e92:	1f 91       	pop	r17
    3e94:	0f 91       	pop	r16
    3e96:	08 95       	ret

00003e98 <reg_read_register>:
    3e98:	fc 01       	movw	r30, r24
    3e9a:	80 81       	ld	r24, Z
    3e9c:	08 95       	ret

00003e9e <reg_read_bit>:
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	20 81       	ld	r18, Z
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	02 c0       	rjmp	.+4      	; 0x3eac <reg_read_bit+0xe>
    3ea8:	88 0f       	add	r24, r24
    3eaa:	99 1f       	adc	r25, r25
    3eac:	6a 95       	dec	r22
    3eae:	e2 f7       	brpl	.-8      	; 0x3ea8 <reg_read_bit+0xa>
    3eb0:	82 23       	and	r24, r18
    3eb2:	08 95       	ret

00003eb4 <reg_read_bits>:
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	80 81       	ld	r24, Z
    3eb8:	86 23       	and	r24, r22
    3eba:	08 95       	ret

00003ebc <reg_set_register>:
    3ebc:	fc 01       	movw	r30, r24
    3ebe:	60 83       	st	Z, r22
    3ec0:	08 95       	ret

00003ec2 <reg_clear_register>:
    3ec2:	fc 01       	movw	r30, r24
    3ec4:	10 82       	st	Z, r1
    3ec6:	08 95       	ret

00003ec8 <reg_set_bit>:
    3ec8:	fc 01       	movw	r30, r24
    3eca:	40 81       	ld	r20, Z
    3ecc:	21 e0       	ldi	r18, 0x01	; 1
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	02 c0       	rjmp	.+4      	; 0x3ed6 <reg_set_bit+0xe>
    3ed2:	22 0f       	add	r18, r18
    3ed4:	33 1f       	adc	r19, r19
    3ed6:	6a 95       	dec	r22
    3ed8:	e2 f7       	brpl	.-8      	; 0x3ed2 <reg_set_bit+0xa>
    3eda:	24 2b       	or	r18, r20
    3edc:	20 83       	st	Z, r18
    3ede:	08 95       	ret

00003ee0 <reg_set_bits>:
    3ee0:	fc 01       	movw	r30, r24
    3ee2:	20 81       	ld	r18, Z
    3ee4:	62 2b       	or	r22, r18
    3ee6:	60 83       	st	Z, r22
    3ee8:	08 95       	ret

00003eea <reg_toggle_bit>:
    3eea:	fc 01       	movw	r30, r24
    3eec:	40 81       	ld	r20, Z
    3eee:	21 e0       	ldi	r18, 0x01	; 1
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	02 c0       	rjmp	.+4      	; 0x3ef8 <reg_toggle_bit+0xe>
    3ef4:	22 0f       	add	r18, r18
    3ef6:	33 1f       	adc	r19, r19
    3ef8:	6a 95       	dec	r22
    3efa:	e2 f7       	brpl	.-8      	; 0x3ef4 <reg_toggle_bit+0xa>
    3efc:	24 27       	eor	r18, r20
    3efe:	20 83       	st	Z, r18
    3f00:	08 95       	ret

00003f02 <reg_toggle_bits>:
    3f02:	fc 01       	movw	r30, r24
    3f04:	20 81       	ld	r18, Z
    3f06:	62 27       	eor	r22, r18
    3f08:	60 83       	st	Z, r22
    3f0a:	08 95       	ret

00003f0c <reg_clear_bit>:
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	90 81       	ld	r25, Z
    3f10:	21 e0       	ldi	r18, 0x01	; 1
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	02 c0       	rjmp	.+4      	; 0x3f1a <reg_clear_bit+0xe>
    3f16:	22 0f       	add	r18, r18
    3f18:	33 1f       	adc	r19, r19
    3f1a:	6a 95       	dec	r22
    3f1c:	e2 f7       	brpl	.-8      	; 0x3f16 <reg_clear_bit+0xa>
    3f1e:	20 95       	com	r18
    3f20:	29 23       	and	r18, r25
    3f22:	20 83       	st	Z, r18
    3f24:	08 95       	ret

00003f26 <reg_clear_bits>:
    3f26:	fc 01       	movw	r30, r24
    3f28:	90 81       	ld	r25, Z
    3f2a:	60 95       	com	r22
    3f2c:	69 23       	and	r22, r25
    3f2e:	60 83       	st	Z, r22
    3f30:	08 95       	ret

00003f32 <_serial_call_back>:
    3f32:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <crc_sum.1941>
    3f36:	86 0f       	add	r24, r22
    3f38:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <crc_sum.1941>
    3f3c:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <_mh_state>
    3f40:	91 30       	cpi	r25, 0x01	; 1
    3f42:	79 f0       	breq	.+30     	; 0x3f62 <_serial_call_back+0x30>
    3f44:	28 f0       	brcs	.+10     	; 0x3f50 <_serial_call_back+0x1e>
    3f46:	92 30       	cpi	r25, 0x02	; 2
    3f48:	a9 f0       	breq	.+42     	; 0x3f74 <_serial_call_back+0x42>
    3f4a:	93 30       	cpi	r25, 0x03	; 3
    3f4c:	19 f1       	breq	.+70     	; 0x3f94 <_serial_call_back+0x62>
    3f4e:	08 95       	ret
    3f50:	6f 3f       	cpi	r22, 0xFF	; 255
    3f52:	09 f0       	breq	.+2      	; 0x3f56 <_serial_call_back+0x24>
    3f54:	48 c0       	rjmp	.+144    	; 0x3fe6 <_serial_call_back+0xb4>
    3f56:	10 92 79 09 	sts	0x0979, r1	; 0x800979 <crc_sum.1941>
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <_mh_state>
    3f60:	08 95       	ret
    3f62:	66 38       	cpi	r22, 0x86	; 134
    3f64:	09 f0       	breq	.+2      	; 0x3f68 <_serial_call_back+0x36>
    3f66:	3f c0       	rjmp	.+126    	; 0x3fe6 <_serial_call_back+0xb4>
    3f68:	10 92 78 09 	sts	0x0978, r1	; 0x800978 <inDex.1939>
    3f6c:	82 e0       	ldi	r24, 0x02	; 2
    3f6e:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <_mh_state>
    3f72:	08 95       	ret
    3f74:	e0 91 78 09 	lds	r30, 0x0978	; 0x800978 <inDex.1939>
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	8e 0f       	add	r24, r30
    3f7c:	80 93 78 09 	sts	0x0978, r24	; 0x800978 <inDex.1939>
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	ea 58       	subi	r30, 0x8A	; 138
    3f84:	f6 4f       	sbci	r31, 0xF6	; 246
    3f86:	60 83       	st	Z, r22
    3f88:	82 30       	cpi	r24, 0x02	; 2
    3f8a:	69 f5       	brne	.+90     	; 0x3fe6 <_serial_call_back+0xb4>
    3f8c:	83 e0       	ldi	r24, 0x03	; 3
    3f8e:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <_mh_state>
    3f92:	08 95       	ret
    3f94:	90 91 78 09 	lds	r25, 0x0978	; 0x800978 <inDex.1939>
    3f98:	21 e0       	ldi	r18, 0x01	; 1
    3f9a:	29 0f       	add	r18, r25
    3f9c:	20 93 78 09 	sts	0x0978, r18	; 0x800978 <inDex.1939>
    3fa0:	96 30       	cpi	r25, 0x06	; 6
    3fa2:	09 f5       	brne	.+66     	; 0x3fe6 <_serial_call_back+0xb4>
    3fa4:	81 11       	cpse	r24, r1
    3fa6:	0e c0       	rjmp	.+28     	; 0x3fc4 <_serial_call_back+0x92>
    3fa8:	e6 e7       	ldi	r30, 0x76	; 118
    3faa:	f9 e0       	ldi	r31, 0x09	; 9
    3fac:	80 81       	ld	r24, Z
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	98 2f       	mov	r25, r24
    3fb2:	88 27       	eor	r24, r24
    3fb4:	21 81       	ldd	r18, Z+1	; 0x01
    3fb6:	82 0f       	add	r24, r18
    3fb8:	91 1d       	adc	r25, r1
    3fba:	90 93 7e 09 	sts	0x097E, r25	; 0x80097e <_ppm+0x1>
    3fbe:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <_ppm>
    3fc2:	04 c0       	rjmp	.+8      	; 0x3fcc <_serial_call_back+0x9a>
    3fc4:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <_ppm+0x1>
    3fc8:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <_ppm>
    3fcc:	10 92 7c 09 	sts	0x097C, r1	; 0x80097c <_mh_state>
    3fd0:	e0 91 7a 09 	lds	r30, 0x097A	; 0x80097a <_app_call_back>
    3fd4:	f0 91 7b 09 	lds	r31, 0x097B	; 0x80097b <_app_call_back+0x1>
    3fd8:	30 97       	sbiw	r30, 0x00	; 0
    3fda:	29 f0       	breq	.+10     	; 0x3fe6 <_serial_call_back+0xb4>
    3fdc:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <_ppm>
    3fe0:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <_ppm+0x1>
    3fe4:	19 95       	eicall
    3fe6:	08 95       	ret

00003fe8 <mh_z19_create>:
    3fe8:	8f 92       	push	r8
    3fea:	9f 92       	push	r9
    3fec:	af 92       	push	r10
    3fee:	cf 92       	push	r12
    3ff0:	ef 92       	push	r14
    3ff2:	0f 93       	push	r16
    3ff4:	cf 93       	push	r28
    3ff6:	df 93       	push	r29
    3ff8:	eb 01       	movw	r28, r22
    3ffa:	0f 2e       	mov	r0, r31
    3ffc:	f9 e9       	ldi	r31, 0x99	; 153
    3ffe:	8f 2e       	mov	r8, r31
    4000:	ff e1       	ldi	r31, 0x1F	; 31
    4002:	9f 2e       	mov	r9, r31
    4004:	f0 2d       	mov	r31, r0
    4006:	68 94       	set
    4008:	aa 24       	eor	r10, r10
    400a:	a4 f8       	bld	r10, 4
    400c:	68 94       	set
    400e:	cc 24       	eor	r12, r12
    4010:	c4 f8       	bld	r12, 4
    4012:	e1 2c       	mov	r14, r1
    4014:	00 e0       	ldi	r16, 0x00	; 0
    4016:	23 e0       	ldi	r18, 0x03	; 3
    4018:	40 e8       	ldi	r20, 0x80	; 128
    401a:	55 e2       	ldi	r21, 0x25	; 37
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <serial_new_instance>
    4024:	90 93 80 09 	sts	0x0980, r25	; 0x800980 <_serial+0x1>
    4028:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <_serial>
    402c:	d0 93 7b 09 	sts	0x097B, r29	; 0x80097b <_app_call_back+0x1>
    4030:	c0 93 7a 09 	sts	0x097A, r28	; 0x80097a <_app_call_back>
    4034:	df 91       	pop	r29
    4036:	cf 91       	pop	r28
    4038:	0f 91       	pop	r16
    403a:	ef 90       	pop	r14
    403c:	cf 90       	pop	r12
    403e:	af 90       	pop	r10
    4040:	9f 90       	pop	r9
    4042:	8f 90       	pop	r8
    4044:	08 95       	ret

00004046 <mh_z19_take_meassuring>:
    4046:	cf 93       	push	r28
    4048:	df 93       	push	r29
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
    404e:	29 97       	sbiw	r28, 0x09	; 9
    4050:	0f b6       	in	r0, 0x3f	; 63
    4052:	f8 94       	cli
    4054:	de bf       	out	0x3e, r29	; 62
    4056:	0f be       	out	0x3f, r0	; 63
    4058:	cd bf       	out	0x3d, r28	; 61
    405a:	89 e0       	ldi	r24, 0x09	; 9
    405c:	e1 e4       	ldi	r30, 0x41	; 65
    405e:	f2 e0       	ldi	r31, 0x02	; 2
    4060:	9e 01       	movw	r18, r28
    4062:	2f 5f       	subi	r18, 0xFF	; 255
    4064:	3f 4f       	sbci	r19, 0xFF	; 255
    4066:	d9 01       	movw	r26, r18
    4068:	01 90       	ld	r0, Z+
    406a:	0d 92       	st	X+, r0
    406c:	8a 95       	dec	r24
    406e:	e1 f7       	brne	.-8      	; 0x4068 <mh_z19_take_meassuring+0x22>
    4070:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <_ppm+0x1>
    4074:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <_ppm>
    4078:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <_serial>
    407c:	90 91 80 09 	lds	r25, 0x0980	; 0x800980 <_serial+0x1>
    4080:	00 97       	sbiw	r24, 0x00	; 0
    4082:	39 f0       	breq	.+14     	; 0x4092 <mh_z19_take_meassuring+0x4c>
    4084:	42 2f       	mov	r20, r18
    4086:	53 2f       	mov	r21, r19
    4088:	69 e0       	ldi	r22, 0x09	; 9
    408a:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <serial_send_bytes>
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	01 c0       	rjmp	.+2      	; 0x4094 <mh_z19_take_meassuring+0x4e>
    4092:	82 e0       	ldi	r24, 0x02	; 2
    4094:	29 96       	adiw	r28, 0x09	; 9
    4096:	0f b6       	in	r0, 0x3f	; 63
    4098:	f8 94       	cli
    409a:	de bf       	out	0x3e, r29	; 62
    409c:	0f be       	out	0x3f, r0	; 63
    409e:	cd bf       	out	0x3d, r28	; 61
    40a0:	df 91       	pop	r29
    40a2:	cf 91       	pop	r28
    40a4:	08 95       	ret

000040a6 <rcServoSet>:
    40a6:	65 36       	cpi	r22, 0x65	; 101
    40a8:	0c f0       	brlt	.+2      	; 0x40ac <rcServoSet+0x6>
    40aa:	64 e6       	ldi	r22, 0x64	; 100
    40ac:	6c 39       	cpi	r22, 0x9C	; 156
    40ae:	0c f4       	brge	.+2      	; 0x40b2 <rcServoSet+0xc>
    40b0:	6c e9       	ldi	r22, 0x9C	; 156
    40b2:	96 ef       	ldi	r25, 0xF6	; 246
    40b4:	69 02       	muls	r22, r25
    40b6:	b0 01       	movw	r22, r0
    40b8:	11 24       	eor	r1, r1
    40ba:	68 54       	subi	r22, 0x48	; 72
    40bc:	74 4f       	sbci	r23, 0xF4	; 244
    40be:	81 11       	cpse	r24, r1
    40c0:	05 c0       	rjmp	.+10     	; 0x40cc <rcServoSet+0x26>
    40c2:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
    40c6:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
    40ca:	08 95       	ret
    40cc:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
    40d0:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
    40d4:	08 95       	ret

000040d6 <rcServoCreate>:
    40d6:	ea e0       	ldi	r30, 0x0A	; 10
    40d8:	f1 e0       	ldi	r31, 0x01	; 1
    40da:	80 81       	ld	r24, Z
    40dc:	88 61       	ori	r24, 0x18	; 24
    40de:	80 83       	st	Z, r24
    40e0:	8f e3       	ldi	r24, 0x3F	; 63
    40e2:	9c e9       	ldi	r25, 0x9C	; 156
    40e4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__TEXT_REGION_LENGTH__+0x700127>
    40e8:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__TEXT_REGION_LENGTH__+0x700126>
    40ec:	60 e0       	ldi	r22, 0x00	; 0
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	da df       	rcall	.-76     	; 0x40a6 <rcServoSet>
    40f2:	60 e0       	ldi	r22, 0x00	; 0
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	d7 df       	rcall	.-82     	; 0x40a6 <rcServoSet>
    40f8:	e0 e2       	ldi	r30, 0x20	; 32
    40fa:	f1 e0       	ldi	r31, 0x01	; 1
    40fc:	80 81       	ld	r24, Z
    40fe:	82 6a       	ori	r24, 0xA2	; 162
    4100:	80 83       	st	Z, r24
    4102:	e1 e2       	ldi	r30, 0x21	; 33
    4104:	f1 e0       	ldi	r31, 0x01	; 1
    4106:	80 81       	ld	r24, Z
    4108:	8a 61       	ori	r24, 0x1A	; 26
    410a:	80 83       	st	Z, r24
    410c:	08 95       	ret

0000410e <_callBack>:
    410e:	e0 91 89 09 	lds	r30, 0x0989	; 0x800989 <_callBackFunction>
    4112:	f0 91 8a 09 	lds	r31, 0x098A	; 0x80098a <_callBackFunction+0x1>
    4116:	30 97       	sbiw	r30, 0x00	; 0
    4118:	09 f0       	breq	.+2      	; 0x411c <_callBack+0xe>
    411a:	19 95       	eicall
    411c:	08 95       	ret

0000411e <_tsl2591TwiCallback>:
    411e:	64 50       	subi	r22, 0x04	; 4
    4120:	62 30       	cpi	r22, 0x02	; 2
    4122:	08 f0       	brcs	.+2      	; 0x4126 <_tsl2591TwiCallback+0x8>
    4124:	3b c0       	rjmp	.+118    	; 0x419c <_tsl2591TwiCallback+0x7e>
    4126:	20 91 88 09 	lds	r18, 0x0988	; 0x800988 <_nextState>
    412a:	22 30       	cpi	r18, 0x02	; 2
    412c:	79 f0       	breq	.+30     	; 0x414c <_tsl2591TwiCallback+0x2e>
    412e:	18 f4       	brcc	.+6      	; 0x4136 <_tsl2591TwiCallback+0x18>
    4130:	21 30       	cpi	r18, 0x01	; 1
    4132:	31 f0       	breq	.+12     	; 0x4140 <_tsl2591TwiCallback+0x22>
    4134:	30 c0       	rjmp	.+96     	; 0x4196 <_tsl2591TwiCallback+0x78>
    4136:	23 30       	cpi	r18, 0x03	; 3
    4138:	81 f0       	breq	.+32     	; 0x415a <_tsl2591TwiCallback+0x3c>
    413a:	24 30       	cpi	r18, 0x04	; 4
    413c:	a1 f0       	breq	.+40     	; 0x4166 <_tsl2591TwiCallback+0x48>
    413e:	2b c0       	rjmp	.+86     	; 0x4196 <_tsl2591TwiCallback+0x78>
    4140:	22 e0       	ldi	r18, 0x02	; 2
    4142:	20 93 88 09 	sts	0x0988, r18	; 0x800988 <_nextState>
    4146:	61 e0       	ldi	r22, 0x01	; 1
    4148:	0a c2       	rjmp	.+1044   	; 0x455e <twiReceive>
    414a:	08 95       	ret
    414c:	fa 01       	movw	r30, r20
    414e:	80 81       	ld	r24, Z
    4150:	80 93 85 09 	sts	0x0985, r24	; 0x800985 <_deviceId>
    4154:	82 e0       	ldi	r24, 0x02	; 2
    4156:	db cf       	rjmp	.-74     	; 0x410e <_callBack>
    4158:	08 95       	ret
    415a:	24 e0       	ldi	r18, 0x04	; 4
    415c:	20 93 88 09 	sts	0x0988, r18	; 0x800988 <_nextState>
    4160:	64 e0       	ldi	r22, 0x04	; 4
    4162:	fd c1       	rjmp	.+1018   	; 0x455e <twiReceive>
    4164:	08 95       	ret
    4166:	fa 01       	movw	r30, r20
    4168:	81 81       	ldd	r24, Z+1	; 0x01
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	98 2f       	mov	r25, r24
    416e:	88 27       	eor	r24, r24
    4170:	20 81       	ld	r18, Z
    4172:	82 2b       	or	r24, r18
    4174:	90 93 84 09 	sts	0x0984, r25	; 0x800984 <_fullSpectrumRaw+0x1>
    4178:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <_fullSpectrumRaw>
    417c:	83 81       	ldd	r24, Z+3	; 0x03
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	98 2f       	mov	r25, r24
    4182:	88 27       	eor	r24, r24
    4184:	22 81       	ldd	r18, Z+2	; 0x02
    4186:	82 2b       	or	r24, r18
    4188:	90 93 82 09 	sts	0x0982, r25	; 0x800982 <_infraredRaw+0x1>
    418c:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <_infraredRaw>
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	bd cf       	rjmp	.-134    	; 0x410e <_callBack>
    4194:	08 95       	ret
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	ba cf       	rjmp	.-140    	; 0x410e <_callBack>
    419a:	08 95       	ret
    419c:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <_nextState>
    41a0:	86 e0       	ldi	r24, 0x06	; 6
    41a2:	b5 cf       	rjmp	.-150    	; 0x410e <_callBack>
    41a4:	08 95       	ret

000041a6 <_twiTransmit>:
    41a6:	20 91 8b 09 	lds	r18, 0x098B	; 0x80098b <_twiHandler>
    41aa:	30 91 8c 09 	lds	r19, 0x098C	; 0x80098c <_twiHandler+0x1>
    41ae:	21 15       	cp	r18, r1
    41b0:	31 05       	cpc	r19, r1
    41b2:	41 f0       	breq	.+16     	; 0x41c4 <_twiTransmit+0x1e>
    41b4:	46 2f       	mov	r20, r22
    41b6:	bc 01       	movw	r22, r24
    41b8:	c9 01       	movw	r24, r18
    41ba:	85 d1       	rcall	.+778    	; 0x44c6 <twiTransmit>
    41bc:	82 30       	cpi	r24, 0x02	; 2
    41be:	21 f0       	breq	.+8      	; 0x41c8 <_twiTransmit+0x22>
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	08 95       	ret
    41c4:	87 e0       	ldi	r24, 0x07	; 7
    41c6:	08 95       	ret
    41c8:	85 e0       	ldi	r24, 0x05	; 5
    41ca:	08 95       	ret

000041cc <tsl2591Create>:
    41cc:	0f 93       	push	r16
    41ce:	1f 93       	push	r17
    41d0:	90 93 8a 09 	sts	0x098A, r25	; 0x80098a <_callBackFunction+0x1>
    41d4:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <_callBackFunction>
    41d8:	0f e8       	ldi	r16, 0x8F	; 143
    41da:	10 e2       	ldi	r17, 0x20	; 32
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	34 e2       	ldi	r19, 0x24	; 36
    41e0:	44 ef       	ldi	r20, 0xF4	; 244
    41e2:	50 e0       	ldi	r21, 0x00	; 0
    41e4:	60 e0       	ldi	r22, 0x00	; 0
    41e6:	89 e2       	ldi	r24, 0x29	; 41
    41e8:	1d d1       	rcall	.+570    	; 0x4424 <twiCreate>
    41ea:	90 93 8c 09 	sts	0x098C, r25	; 0x80098c <_twiHandler+0x1>
    41ee:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <_twiHandler>
    41f2:	89 2b       	or	r24, r25
    41f4:	11 f0       	breq	.+4      	; 0x41fa <tsl2591Create+0x2e>
    41f6:	80 e0       	ldi	r24, 0x00	; 0
    41f8:	01 c0       	rjmp	.+2      	; 0x41fc <tsl2591Create+0x30>
    41fa:	88 e0       	ldi	r24, 0x08	; 8
    41fc:	1f 91       	pop	r17
    41fe:	0f 91       	pop	r16
    4200:	08 95       	ret

00004202 <tsl2591Enable>:
    4202:	cf 93       	push	r28
    4204:	df 93       	push	r29
    4206:	1f 92       	push	r1
    4208:	1f 92       	push	r1
    420a:	cd b7       	in	r28, 0x3d	; 61
    420c:	de b7       	in	r29, 0x3e	; 62
    420e:	80 ea       	ldi	r24, 0xA0	; 160
    4210:	89 83       	std	Y+1, r24	; 0x01
    4212:	83 e0       	ldi	r24, 0x03	; 3
    4214:	8a 83       	std	Y+2, r24	; 0x02
    4216:	10 92 88 09 	sts	0x0988, r1	; 0x800988 <_nextState>
    421a:	62 e0       	ldi	r22, 0x02	; 2
    421c:	ce 01       	movw	r24, r28
    421e:	01 96       	adiw	r24, 0x01	; 1
    4220:	c2 df       	rcall	.-124    	; 0x41a6 <_twiTransmit>
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	df 91       	pop	r29
    4228:	cf 91       	pop	r28
    422a:	08 95       	ret

0000422c <tsl2591FetchData>:
    422c:	cf 93       	push	r28
    422e:	df 93       	push	r29
    4230:	1f 92       	push	r1
    4232:	cd b7       	in	r28, 0x3d	; 61
    4234:	de b7       	in	r29, 0x3e	; 62
    4236:	84 eb       	ldi	r24, 0xB4	; 180
    4238:	89 83       	std	Y+1, r24	; 0x01
    423a:	83 e0       	ldi	r24, 0x03	; 3
    423c:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <_nextState>
    4240:	61 e0       	ldi	r22, 0x01	; 1
    4242:	ce 01       	movw	r24, r28
    4244:	01 96       	adiw	r24, 0x01	; 1
    4246:	af df       	rcall	.-162    	; 0x41a6 <_twiTransmit>
    4248:	0f 90       	pop	r0
    424a:	df 91       	pop	r29
    424c:	cf 91       	pop	r28
    424e:	08 95       	ret

00004250 <tsl2591GetLux>:
    4250:	2f 92       	push	r2
    4252:	3f 92       	push	r3
    4254:	4f 92       	push	r4
    4256:	5f 92       	push	r5
    4258:	6f 92       	push	r6
    425a:	7f 92       	push	r7
    425c:	8f 92       	push	r8
    425e:	9f 92       	push	r9
    4260:	af 92       	push	r10
    4262:	bf 92       	push	r11
    4264:	cf 92       	push	r12
    4266:	df 92       	push	r13
    4268:	ef 92       	push	r14
    426a:	ff 92       	push	r15
    426c:	0f 93       	push	r16
    426e:	1f 93       	push	r17
    4270:	cf 93       	push	r28
    4272:	df 93       	push	r29
    4274:	c0 91 81 09 	lds	r28, 0x0981	; 0x800981 <_infraredRaw>
    4278:	d0 91 82 09 	lds	r29, 0x0982	; 0x800982 <_infraredRaw+0x1>
    427c:	cf 3f       	cpi	r28, 0xFF	; 255
    427e:	2f ef       	ldi	r18, 0xFF	; 255
    4280:	d2 07       	cpc	r29, r18
    4282:	41 f0       	breq	.+16     	; 0x4294 <tsl2591GetLux+0x44>
    4284:	60 91 83 09 	lds	r22, 0x0983	; 0x800983 <_fullSpectrumRaw>
    4288:	70 91 84 09 	lds	r23, 0x0984	; 0x800984 <_fullSpectrumRaw+0x1>
    428c:	6f 3f       	cpi	r22, 0xFF	; 255
    428e:	ef ef       	ldi	r30, 0xFF	; 255
    4290:	7e 07       	cpc	r23, r30
    4292:	59 f4       	brne	.+22     	; 0x42aa <tsl2591GetLux+0x5a>
    4294:	4f ef       	ldi	r20, 0xFF	; 255
    4296:	5f ef       	ldi	r21, 0xFF	; 255
    4298:	6f e7       	ldi	r22, 0x7F	; 127
    429a:	7f e7       	ldi	r23, 0x7F	; 127
    429c:	fc 01       	movw	r30, r24
    429e:	40 83       	st	Z, r20
    42a0:	51 83       	std	Z+1, r21	; 0x01
    42a2:	62 83       	std	Z+2, r22	; 0x02
    42a4:	73 83       	std	Z+3, r23	; 0x03
    42a6:	83 e0       	ldi	r24, 0x03	; 3
    42a8:	99 c0       	rjmp	.+306    	; 0x43dc <tsl2591GetLux+0x18c>
    42aa:	1c 01       	movw	r2, r24
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	18 d3       	rcall	.+1584   	; 0x48e2 <__floatunsisf>
    42b2:	2b 01       	movw	r4, r22
    42b4:	3c 01       	movw	r6, r24
    42b6:	be 01       	movw	r22, r28
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	12 d3       	rcall	.+1572   	; 0x48e2 <__floatunsisf>
    42be:	4b 01       	movw	r8, r22
    42c0:	5c 01       	movw	r10, r24
    42c2:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <_currentIntegrationTime>
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	01 96       	adiw	r24, 0x01	; 1
    42ca:	24 e6       	ldi	r18, 0x64	; 100
    42cc:	28 9f       	mul	r18, r24
    42ce:	b0 01       	movw	r22, r0
    42d0:	29 9f       	mul	r18, r25
    42d2:	70 0d       	add	r23, r0
    42d4:	11 24       	eor	r1, r1
    42d6:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <_currentGain>
    42da:	80 32       	cpi	r24, 0x20	; 32
    42dc:	69 f0       	breq	.+26     	; 0x42f8 <tsl2591GetLux+0xa8>
    42de:	80 33       	cpi	r24, 0x30	; 48
    42e0:	a1 f0       	breq	.+40     	; 0x430a <tsl2591GetLux+0xba>
    42e2:	80 31       	cpi	r24, 0x10	; 16
    42e4:	e1 f4       	brne	.+56     	; 0x431e <tsl2591GetLux+0xce>
    42e6:	0f 2e       	mov	r0, r31
    42e8:	c1 2c       	mov	r12, r1
    42ea:	d1 2c       	mov	r13, r1
    42ec:	f8 ec       	ldi	r31, 0xC8	; 200
    42ee:	ef 2e       	mov	r14, r31
    42f0:	f1 e4       	ldi	r31, 0x41	; 65
    42f2:	ff 2e       	mov	r15, r31
    42f4:	f0 2d       	mov	r31, r0
    42f6:	1b c0       	rjmp	.+54     	; 0x432e <tsl2591GetLux+0xde>
    42f8:	0f 2e       	mov	r0, r31
    42fa:	c1 2c       	mov	r12, r1
    42fc:	d1 2c       	mov	r13, r1
    42fe:	f6 ed       	ldi	r31, 0xD6	; 214
    4300:	ef 2e       	mov	r14, r31
    4302:	f3 e4       	ldi	r31, 0x43	; 67
    4304:	ff 2e       	mov	r15, r31
    4306:	f0 2d       	mov	r31, r0
    4308:	12 c0       	rjmp	.+36     	; 0x432e <tsl2591GetLux+0xde>
    430a:	0f 2e       	mov	r0, r31
    430c:	c1 2c       	mov	r12, r1
    430e:	f0 e5       	ldi	r31, 0x50	; 80
    4310:	df 2e       	mov	r13, r31
    4312:	fa e1       	ldi	r31, 0x1A	; 26
    4314:	ef 2e       	mov	r14, r31
    4316:	f6 e4       	ldi	r31, 0x46	; 70
    4318:	ff 2e       	mov	r15, r31
    431a:	f0 2d       	mov	r31, r0
    431c:	08 c0       	rjmp	.+16     	; 0x432e <tsl2591GetLux+0xde>
    431e:	0f 2e       	mov	r0, r31
    4320:	c1 2c       	mov	r12, r1
    4322:	d1 2c       	mov	r13, r1
    4324:	f0 e8       	ldi	r31, 0x80	; 128
    4326:	ef 2e       	mov	r14, r31
    4328:	ff e3       	ldi	r31, 0x3F	; 63
    432a:	ff 2e       	mov	r15, r31
    432c:	f0 2d       	mov	r31, r0
    432e:	07 2e       	mov	r0, r23
    4330:	00 0c       	add	r0, r0
    4332:	88 0b       	sbc	r24, r24
    4334:	99 0b       	sbc	r25, r25
    4336:	d7 d2       	rcall	.+1454   	; 0x48e6 <__floatsisf>
    4338:	a7 01       	movw	r20, r14
    433a:	96 01       	movw	r18, r12
    433c:	3b d3       	rcall	.+1654   	; 0x49b4 <__mulsf3>
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	4c ec       	ldi	r20, 0xCC	; 204
    4344:	53 e4       	ldi	r21, 0x43	; 67
    4346:	62 d2       	rcall	.+1220   	; 0x480c <__divsf3>
    4348:	6b 01       	movw	r12, r22
    434a:	7c 01       	movw	r14, r24
    434c:	25 e8       	ldi	r18, 0x85	; 133
    434e:	3b ee       	ldi	r19, 0xEB	; 235
    4350:	41 ed       	ldi	r20, 0xD1	; 209
    4352:	5f e3       	ldi	r21, 0x3F	; 63
    4354:	c5 01       	movw	r24, r10
    4356:	b4 01       	movw	r22, r8
    4358:	2d d3       	rcall	.+1626   	; 0x49b4 <__mulsf3>
    435a:	9b 01       	movw	r18, r22
    435c:	ac 01       	movw	r20, r24
    435e:	c3 01       	movw	r24, r6
    4360:	b2 01       	movw	r22, r4
    4362:	ed d1       	rcall	.+986    	; 0x473e <__subsf3>
    4364:	a7 01       	movw	r20, r14
    4366:	96 01       	movw	r18, r12
    4368:	51 d2       	rcall	.+1186   	; 0x480c <__divsf3>
    436a:	16 2f       	mov	r17, r22
    436c:	d7 2f       	mov	r29, r23
    436e:	c8 2f       	mov	r28, r24
    4370:	09 2f       	mov	r16, r25
    4372:	2d e3       	ldi	r18, 0x3D	; 61
    4374:	3a e0       	ldi	r19, 0x0A	; 10
    4376:	47 e1       	ldi	r20, 0x17	; 23
    4378:	5f e3       	ldi	r21, 0x3F	; 63
    437a:	c3 01       	movw	r24, r6
    437c:	b2 01       	movw	r22, r4
    437e:	1a d3       	rcall	.+1588   	; 0x49b4 <__mulsf3>
    4380:	2b 01       	movw	r4, r22
    4382:	3c 01       	movw	r6, r24
    4384:	26 ef       	ldi	r18, 0xF6	; 246
    4386:	38 e2       	ldi	r19, 0x28	; 40
    4388:	4c e5       	ldi	r20, 0x5C	; 92
    438a:	5f e3       	ldi	r21, 0x3F	; 63
    438c:	c5 01       	movw	r24, r10
    438e:	b4 01       	movw	r22, r8
    4390:	11 d3       	rcall	.+1570   	; 0x49b4 <__mulsf3>
    4392:	9b 01       	movw	r18, r22
    4394:	ac 01       	movw	r20, r24
    4396:	c3 01       	movw	r24, r6
    4398:	b2 01       	movw	r22, r4
    439a:	d1 d1       	rcall	.+930    	; 0x473e <__subsf3>
    439c:	a7 01       	movw	r20, r14
    439e:	96 01       	movw	r18, r12
    43a0:	35 d2       	rcall	.+1130   	; 0x480c <__divsf3>
    43a2:	c6 2e       	mov	r12, r22
    43a4:	d7 2e       	mov	r13, r23
    43a6:	e8 2e       	mov	r14, r24
    43a8:	f9 2e       	mov	r15, r25
    43aa:	26 2f       	mov	r18, r22
    43ac:	37 2f       	mov	r19, r23
    43ae:	48 2f       	mov	r20, r24
    43b0:	59 2f       	mov	r21, r25
    43b2:	61 2f       	mov	r22, r17
    43b4:	7d 2f       	mov	r23, r29
    43b6:	8c 2f       	mov	r24, r28
    43b8:	90 2f       	mov	r25, r16
    43ba:	f8 d2       	rcall	.+1520   	; 0x49ac <__gesf2>
    43bc:	18 16       	cp	r1, r24
    43be:	24 f0       	brlt	.+8      	; 0x43c8 <tsl2591GetLux+0x178>
    43c0:	1c 2d       	mov	r17, r12
    43c2:	dd 2d       	mov	r29, r13
    43c4:	ce 2d       	mov	r28, r14
    43c6:	0f 2d       	mov	r16, r15
    43c8:	41 2f       	mov	r20, r17
    43ca:	5d 2f       	mov	r21, r29
    43cc:	6c 2f       	mov	r22, r28
    43ce:	70 2f       	mov	r23, r16
    43d0:	f1 01       	movw	r30, r2
    43d2:	40 83       	st	Z, r20
    43d4:	51 83       	std	Z+1, r21	; 0x01
    43d6:	62 83       	std	Z+2, r22	; 0x02
    43d8:	73 83       	std	Z+3, r23	; 0x03
    43da:	80 e0       	ldi	r24, 0x00	; 0
    43dc:	df 91       	pop	r29
    43de:	cf 91       	pop	r28
    43e0:	1f 91       	pop	r17
    43e2:	0f 91       	pop	r16
    43e4:	ff 90       	pop	r15
    43e6:	ef 90       	pop	r14
    43e8:	df 90       	pop	r13
    43ea:	cf 90       	pop	r12
    43ec:	bf 90       	pop	r11
    43ee:	af 90       	pop	r10
    43f0:	9f 90       	pop	r9
    43f2:	8f 90       	pop	r8
    43f4:	7f 90       	pop	r7
    43f6:	6f 90       	pop	r6
    43f8:	5f 90       	pop	r5
    43fa:	4f 90       	pop	r4
    43fc:	3f 90       	pop	r3
    43fe:	2f 90       	pop	r2
    4400:	08 95       	ret

00004402 <_initTwiInterface>:
    4402:	80 91 9b 09 	lds	r24, 0x099B	; 0x80099b <_twiIsInitiated>
    4406:	81 11       	cpse	r24, r1
    4408:	0c c0       	rjmp	.+24     	; 0x4422 <_initTwiInterface+0x20>
    440a:	8c e0       	ldi	r24, 0x0C	; 12
    440c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4410:	8f ef       	ldi	r24, 0xFF	; 255
    4412:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4416:	84 e0       	ldi	r24, 0x04	; 4
    4418:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    441c:	81 e0       	ldi	r24, 0x01	; 1
    441e:	80 93 9b 09 	sts	0x099B, r24	; 0x80099b <_twiIsInitiated>
    4422:	08 95       	ret

00004424 <twiCreate>:
    4424:	af 92       	push	r10
    4426:	bf 92       	push	r11
    4428:	cf 92       	push	r12
    442a:	df 92       	push	r13
    442c:	ef 92       	push	r14
    442e:	ff 92       	push	r15
    4430:	0f 93       	push	r16
    4432:	1f 93       	push	r17
    4434:	cf 93       	push	r28
    4436:	df 93       	push	r29
    4438:	a8 2e       	mov	r10, r24
    443a:	b6 2e       	mov	r11, r22
    443c:	69 01       	movw	r12, r18
    443e:	7a 01       	movw	r14, r20
    4440:	84 e0       	ldi	r24, 0x04	; 4
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	85 d3       	rcall	.+1802   	; 0x4b50 <malloc>
    4446:	ec 01       	movw	r28, r24
    4448:	89 2b       	or	r24, r25
    444a:	61 f1       	breq	.+88     	; 0x44a4 <twiCreate+0x80>
    444c:	a8 82       	st	Y, r10
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	b8 12       	cpse	r11, r24
    4452:	12 c0       	rjmp	.+36     	; 0x4478 <twiCreate+0x54>
    4454:	c7 01       	movw	r24, r14
    4456:	b6 01       	movw	r22, r12
    4458:	20 ea       	ldi	r18, 0xA0	; 160
    445a:	36 e8       	ldi	r19, 0x86	; 134
    445c:	41 e0       	ldi	r20, 0x01	; 1
    445e:	50 e0       	ldi	r21, 0x00	; 0
    4460:	33 d3       	rcall	.+1638   	; 0x4ac8 <__udivmodsi4>
    4462:	da 01       	movw	r26, r20
    4464:	c9 01       	movw	r24, r18
    4466:	40 97       	sbiw	r24, 0x10	; 16
    4468:	a1 09       	sbc	r26, r1
    446a:	b1 09       	sbc	r27, r1
    446c:	b6 95       	lsr	r27
    446e:	a7 95       	ror	r26
    4470:	97 95       	ror	r25
    4472:	87 95       	ror	r24
    4474:	89 83       	std	Y+1, r24	; 0x01
    4476:	11 c0       	rjmp	.+34     	; 0x449a <twiCreate+0x76>
    4478:	c7 01       	movw	r24, r14
    447a:	b6 01       	movw	r22, r12
    447c:	20 e8       	ldi	r18, 0x80	; 128
    447e:	3a e1       	ldi	r19, 0x1A	; 26
    4480:	46 e0       	ldi	r20, 0x06	; 6
    4482:	50 e0       	ldi	r21, 0x00	; 0
    4484:	21 d3       	rcall	.+1602   	; 0x4ac8 <__udivmodsi4>
    4486:	da 01       	movw	r26, r20
    4488:	c9 01       	movw	r24, r18
    448a:	40 97       	sbiw	r24, 0x10	; 16
    448c:	a1 09       	sbc	r26, r1
    448e:	b1 09       	sbc	r27, r1
    4490:	b6 95       	lsr	r27
    4492:	a7 95       	ror	r26
    4494:	97 95       	ror	r25
    4496:	87 95       	ror	r24
    4498:	89 83       	std	Y+1, r24	; 0x01
    449a:	1b 83       	std	Y+3, r17	; 0x03
    449c:	0a 83       	std	Y+2, r16	; 0x02
    449e:	8c 2f       	mov	r24, r28
    44a0:	9d 2f       	mov	r25, r29
    44a2:	02 c0       	rjmp	.+4      	; 0x44a8 <twiCreate+0x84>
    44a4:	80 e0       	ldi	r24, 0x00	; 0
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	df 91       	pop	r29
    44aa:	cf 91       	pop	r28
    44ac:	1f 91       	pop	r17
    44ae:	0f 91       	pop	r16
    44b0:	ff 90       	pop	r15
    44b2:	ef 90       	pop	r14
    44b4:	df 90       	pop	r13
    44b6:	cf 90       	pop	r12
    44b8:	bf 90       	pop	r11
    44ba:	af 90       	pop	r10
    44bc:	08 95       	ret

000044be <twiIsBusy>:
    44be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    44c2:	81 70       	andi	r24, 0x01	; 1
    44c4:	08 95       	ret

000044c6 <twiTransmit>:
    44c6:	ff 92       	push	r15
    44c8:	0f 93       	push	r16
    44ca:	1f 93       	push	r17
    44cc:	cf 93       	push	r28
    44ce:	df 93       	push	r29
    44d0:	00 97       	sbiw	r24, 0x00	; 0
    44d2:	d1 f1       	breq	.+116    	; 0x4548 <twiTransmit+0x82>
    44d4:	4a 30       	cpi	r20, 0x0A	; 10
    44d6:	d0 f5       	brcc	.+116    	; 0x454c <twiTransmit+0x86>
    44d8:	f4 2e       	mov	r15, r20
    44da:	8b 01       	movw	r16, r22
    44dc:	ec 01       	movw	r28, r24
    44de:	ef df       	rcall	.-34     	; 0x44be <twiIsBusy>
    44e0:	81 11       	cpse	r24, r1
    44e2:	36 c0       	rjmp	.+108    	; 0x4550 <twiTransmit+0x8a>
    44e4:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <_twiCurrentHandler>
    44e8:	90 91 8f 09 	lds	r25, 0x098F	; 0x80098f <_twiCurrentHandler+0x1>
    44ec:	c8 17       	cp	r28, r24
    44ee:	d9 07       	cpc	r29, r25
    44f0:	41 f0       	breq	.+16     	; 0x4502 <twiTransmit+0x3c>
    44f2:	87 df       	rcall	.-242    	; 0x4402 <_initTwiInterface>
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
    44f6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    44fa:	d0 93 8f 09 	sts	0x098F, r29	; 0x80098f <_twiCurrentHandler+0x1>
    44fe:	c0 93 8e 09 	sts	0x098E, r28	; 0x80098e <_twiCurrentHandler>
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	8f 0d       	add	r24, r15
    4506:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <_twiMessageLen>
    450a:	88 81       	ld	r24, Y
    450c:	88 0f       	add	r24, r24
    450e:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <_twiMessageBuffer>
    4512:	ff 20       	and	r15, r15
    4514:	89 f0       	breq	.+34     	; 0x4538 <twiTransmit+0x72>
    4516:	f8 01       	movw	r30, r16
    4518:	a2 e9       	ldi	r26, 0x92	; 146
    451a:	b9 e0       	ldi	r27, 0x09	; 9
    451c:	4f ef       	ldi	r20, 0xFF	; 255
    451e:	4f 0d       	add	r20, r15
    4520:	64 2f       	mov	r22, r20
    4522:	70 e0       	ldi	r23, 0x00	; 0
    4524:	cb 01       	movw	r24, r22
    4526:	01 96       	adiw	r24, 0x01	; 1
    4528:	b8 01       	movw	r22, r16
    452a:	68 0f       	add	r22, r24
    452c:	79 1f       	adc	r23, r25
    452e:	81 91       	ld	r24, Z+
    4530:	8d 93       	st	X+, r24
    4532:	e6 17       	cp	r30, r22
    4534:	f7 07       	cpc	r31, r23
    4536:	d9 f7       	brne	.-10     	; 0x452e <twiTransmit+0x68>
    4538:	88 ef       	ldi	r24, 0xF8	; 248
    453a:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    453e:	85 ea       	ldi	r24, 0xA5	; 165
    4540:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4544:	84 e0       	ldi	r24, 0x04	; 4
    4546:	05 c0       	rjmp	.+10     	; 0x4552 <twiTransmit+0x8c>
    4548:	86 e0       	ldi	r24, 0x06	; 6
    454a:	03 c0       	rjmp	.+6      	; 0x4552 <twiTransmit+0x8c>
    454c:	87 e0       	ldi	r24, 0x07	; 7
    454e:	01 c0       	rjmp	.+2      	; 0x4552 <twiTransmit+0x8c>
    4550:	82 e0       	ldi	r24, 0x02	; 2
    4552:	df 91       	pop	r29
    4554:	cf 91       	pop	r28
    4556:	1f 91       	pop	r17
    4558:	0f 91       	pop	r16
    455a:	ff 90       	pop	r15
    455c:	08 95       	ret

0000455e <twiReceive>:
    455e:	1f 93       	push	r17
    4560:	cf 93       	push	r28
    4562:	df 93       	push	r29
    4564:	00 97       	sbiw	r24, 0x00	; 0
    4566:	29 f1       	breq	.+74     	; 0x45b2 <twiReceive+0x54>
    4568:	6b 30       	cpi	r22, 0x0B	; 11
    456a:	28 f5       	brcc	.+74     	; 0x45b6 <twiReceive+0x58>
    456c:	16 2f       	mov	r17, r22
    456e:	ec 01       	movw	r28, r24
    4570:	a6 df       	rcall	.-180    	; 0x44be <twiIsBusy>
    4572:	81 11       	cpse	r24, r1
    4574:	22 c0       	rjmp	.+68     	; 0x45ba <twiReceive+0x5c>
    4576:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <_twiCurrentHandler>
    457a:	90 91 8f 09 	lds	r25, 0x098F	; 0x80098f <_twiCurrentHandler+0x1>
    457e:	c8 17       	cp	r28, r24
    4580:	d9 07       	cpc	r29, r25
    4582:	41 f0       	breq	.+16     	; 0x4594 <twiReceive+0x36>
    4584:	3e df       	rcall	.-388    	; 0x4402 <_initTwiInterface>
    4586:	89 81       	ldd	r24, Y+1	; 0x01
    4588:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    458c:	d0 93 8f 09 	sts	0x098F, r29	; 0x80098f <_twiCurrentHandler+0x1>
    4590:	c0 93 8e 09 	sts	0x098E, r28	; 0x80098e <_twiCurrentHandler>
    4594:	10 93 90 09 	sts	0x0990, r17	; 0x800990 <_twiMessageLen>
    4598:	88 81       	ld	r24, Y
    459a:	88 0f       	add	r24, r24
    459c:	81 60       	ori	r24, 0x01	; 1
    459e:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <_twiMessageBuffer>
    45a2:	88 ef       	ldi	r24, 0xF8	; 248
    45a4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    45a8:	85 ea       	ldi	r24, 0xA5	; 165
    45aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    45ae:	85 e0       	ldi	r24, 0x05	; 5
    45b0:	05 c0       	rjmp	.+10     	; 0x45bc <twiReceive+0x5e>
    45b2:	86 e0       	ldi	r24, 0x06	; 6
    45b4:	03 c0       	rjmp	.+6      	; 0x45bc <twiReceive+0x5e>
    45b6:	87 e0       	ldi	r24, 0x07	; 7
    45b8:	01 c0       	rjmp	.+2      	; 0x45bc <twiReceive+0x5e>
    45ba:	82 e0       	ldi	r24, 0x02	; 2
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	1f 91       	pop	r17
    45c2:	08 95       	ret

000045c4 <__vector_39>:
    45c4:	1f 92       	push	r1
    45c6:	0f 92       	push	r0
    45c8:	0f b6       	in	r0, 0x3f	; 63
    45ca:	0f 92       	push	r0
    45cc:	11 24       	eor	r1, r1
    45ce:	0b b6       	in	r0, 0x3b	; 59
    45d0:	0f 92       	push	r0
    45d2:	2f 93       	push	r18
    45d4:	3f 93       	push	r19
    45d6:	4f 93       	push	r20
    45d8:	5f 93       	push	r21
    45da:	6f 93       	push	r22
    45dc:	7f 93       	push	r23
    45de:	8f 93       	push	r24
    45e0:	9f 93       	push	r25
    45e2:	af 93       	push	r26
    45e4:	bf 93       	push	r27
    45e6:	ef 93       	push	r30
    45e8:	ff 93       	push	r31
    45ea:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    45ee:	8e 2f       	mov	r24, r30
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	fc 01       	movw	r30, r24
    45f4:	38 97       	sbiw	r30, 0x08	; 8
    45f6:	e1 35       	cpi	r30, 0x51	; 81
    45f8:	f1 05       	cpc	r31, r1
    45fa:	08 f0       	brcs	.+2      	; 0x45fe <__vector_39+0x3a>
    45fc:	75 c0       	rjmp	.+234    	; 0x46e8 <__vector_39+0x124>
    45fe:	88 27       	eor	r24, r24
    4600:	e4 58       	subi	r30, 0x84	; 132
    4602:	ff 4f       	sbci	r31, 0xFF	; 255
    4604:	8f 4f       	sbci	r24, 0xFF	; 255
    4606:	82 c2       	rjmp	.+1284   	; 0x4b0c <__tablejump2__>
    4608:	10 92 8d 09 	sts	0x098D, r1	; 0x80098d <_index.1885>
    460c:	e0 91 8d 09 	lds	r30, 0x098D	; 0x80098d <_index.1885>
    4610:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <_twiMessageLen>
    4614:	e8 17       	cp	r30, r24
    4616:	70 f4       	brcc	.+28     	; 0x4634 <__vector_39+0x70>
    4618:	81 e0       	ldi	r24, 0x01	; 1
    461a:	8e 0f       	add	r24, r30
    461c:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <_index.1885>
    4620:	f0 e0       	ldi	r31, 0x00	; 0
    4622:	ef 56       	subi	r30, 0x6F	; 111
    4624:	f6 4f       	sbci	r31, 0xF6	; 246
    4626:	80 81       	ld	r24, Z
    4628:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    462c:	85 e8       	ldi	r24, 0x85	; 133
    462e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4632:	72 c0       	rjmp	.+228    	; 0x4718 <__vector_39+0x154>
    4634:	84 e9       	ldi	r24, 0x94	; 148
    4636:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    463a:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <_twiCurrentHandler>
    463e:	90 91 8f 09 	lds	r25, 0x098F	; 0x80098f <_twiCurrentHandler+0x1>
    4642:	dc 01       	movw	r26, r24
    4644:	12 96       	adiw	r26, 0x02	; 2
    4646:	ed 91       	ld	r30, X+
    4648:	fc 91       	ld	r31, X
    464a:	13 97       	sbiw	r26, 0x03	; 3
    464c:	30 97       	sbiw	r30, 0x00	; 0
    464e:	09 f4       	brne	.+2      	; 0x4652 <__vector_39+0x8e>
    4650:	63 c0       	rjmp	.+198    	; 0x4718 <__vector_39+0x154>
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	40 e0       	ldi	r20, 0x00	; 0
    4656:	50 e0       	ldi	r21, 0x00	; 0
    4658:	64 e0       	ldi	r22, 0x04	; 4
    465a:	19 95       	eicall
    465c:	5d c0       	rjmp	.+186    	; 0x4718 <__vector_39+0x154>
    465e:	e0 91 8d 09 	lds	r30, 0x098D	; 0x80098d <_index.1885>
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	8e 0f       	add	r24, r30
    4666:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <_index.1885>
    466a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    466e:	f0 e0       	ldi	r31, 0x00	; 0
    4670:	ef 56       	subi	r30, 0x6F	; 111
    4672:	f6 4f       	sbci	r31, 0xF6	; 246
    4674:	80 83       	st	Z, r24
    4676:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    467a:	80 34       	cpi	r24, 0x40	; 64
    467c:	11 f4       	brne	.+4      	; 0x4682 <__vector_39+0xbe>
    467e:	10 92 8d 09 	sts	0x098D, r1	; 0x80098d <_index.1885>
    4682:	20 91 8d 09 	lds	r18, 0x098D	; 0x80098d <_index.1885>
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <_twiMessageLen>
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	01 97       	sbiw	r24, 0x01	; 1
    4690:	28 17       	cp	r18, r24
    4692:	39 07       	cpc	r19, r25
    4694:	24 f4       	brge	.+8      	; 0x469e <__vector_39+0xda>
    4696:	85 ec       	ldi	r24, 0xC5	; 197
    4698:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    469c:	3d c0       	rjmp	.+122    	; 0x4718 <__vector_39+0x154>
    469e:	85 e8       	ldi	r24, 0x85	; 133
    46a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46a4:	39 c0       	rjmp	.+114    	; 0x4718 <__vector_39+0x154>
    46a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    46aa:	e0 91 8d 09 	lds	r30, 0x098D	; 0x80098d <_index.1885>
    46ae:	f0 e0       	ldi	r31, 0x00	; 0
    46b0:	ef 56       	subi	r30, 0x6F	; 111
    46b2:	f6 4f       	sbci	r31, 0xF6	; 246
    46b4:	80 83       	st	Z, r24
    46b6:	84 e9       	ldi	r24, 0x94	; 148
    46b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46bc:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <_twiCurrentHandler>
    46c0:	90 91 8f 09 	lds	r25, 0x098F	; 0x80098f <_twiCurrentHandler+0x1>
    46c4:	dc 01       	movw	r26, r24
    46c6:	12 96       	adiw	r26, 0x02	; 2
    46c8:	ed 91       	ld	r30, X+
    46ca:	fc 91       	ld	r31, X
    46cc:	13 97       	sbiw	r26, 0x03	; 3
    46ce:	30 97       	sbiw	r30, 0x00	; 0
    46d0:	19 f1       	breq	.+70     	; 0x4718 <__vector_39+0x154>
    46d2:	20 91 90 09 	lds	r18, 0x0990	; 0x800990 <_twiMessageLen>
    46d6:	41 e9       	ldi	r20, 0x91	; 145
    46d8:	59 e0       	ldi	r21, 0x09	; 9
    46da:	65 e0       	ldi	r22, 0x05	; 5
    46dc:	19 95       	eicall
    46de:	1c c0       	rjmp	.+56     	; 0x4718 <__vector_39+0x154>
    46e0:	85 ea       	ldi	r24, 0xA5	; 165
    46e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46e6:	18 c0       	rjmp	.+48     	; 0x4718 <__vector_39+0x154>
    46e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    46ec:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    46f0:	84 e0       	ldi	r24, 0x04	; 4
    46f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    46f6:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <_twiCurrentHandler>
    46fa:	90 91 8f 09 	lds	r25, 0x098F	; 0x80098f <_twiCurrentHandler+0x1>
    46fe:	dc 01       	movw	r26, r24
    4700:	12 96       	adiw	r26, 0x02	; 2
    4702:	ed 91       	ld	r30, X+
    4704:	fc 91       	ld	r31, X
    4706:	13 97       	sbiw	r26, 0x03	; 3
    4708:	30 97       	sbiw	r30, 0x00	; 0
    470a:	31 f0       	breq	.+12     	; 0x4718 <__vector_39+0x154>
    470c:	20 e0       	ldi	r18, 0x00	; 0
    470e:	40 e0       	ldi	r20, 0x00	; 0
    4710:	50 e0       	ldi	r21, 0x00	; 0
    4712:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    4716:	19 95       	eicall
    4718:	ff 91       	pop	r31
    471a:	ef 91       	pop	r30
    471c:	bf 91       	pop	r27
    471e:	af 91       	pop	r26
    4720:	9f 91       	pop	r25
    4722:	8f 91       	pop	r24
    4724:	7f 91       	pop	r23
    4726:	6f 91       	pop	r22
    4728:	5f 91       	pop	r21
    472a:	4f 91       	pop	r20
    472c:	3f 91       	pop	r19
    472e:	2f 91       	pop	r18
    4730:	0f 90       	pop	r0
    4732:	0b be       	out	0x3b, r0	; 59
    4734:	0f 90       	pop	r0
    4736:	0f be       	out	0x3f, r0	; 63
    4738:	0f 90       	pop	r0
    473a:	1f 90       	pop	r1
    473c:	18 95       	reti

0000473e <__subsf3>:
    473e:	50 58       	subi	r21, 0x80	; 128

00004740 <__addsf3>:
    4740:	bb 27       	eor	r27, r27
    4742:	aa 27       	eor	r26, r26
    4744:	0e d0       	rcall	.+28     	; 0x4762 <__addsf3x>
    4746:	21 c1       	rjmp	.+578    	; 0x498a <__fp_round>
    4748:	12 d1       	rcall	.+548    	; 0x496e <__fp_pscA>
    474a:	30 f0       	brcs	.+12     	; 0x4758 <__addsf3+0x18>
    474c:	17 d1       	rcall	.+558    	; 0x497c <__fp_pscB>
    474e:	20 f0       	brcs	.+8      	; 0x4758 <__addsf3+0x18>
    4750:	31 f4       	brne	.+12     	; 0x475e <__addsf3+0x1e>
    4752:	9f 3f       	cpi	r25, 0xFF	; 255
    4754:	11 f4       	brne	.+4      	; 0x475a <__addsf3+0x1a>
    4756:	1e f4       	brtc	.+6      	; 0x475e <__addsf3+0x1e>
    4758:	07 c1       	rjmp	.+526    	; 0x4968 <__fp_nan>
    475a:	0e f4       	brtc	.+2      	; 0x475e <__addsf3+0x1e>
    475c:	e0 95       	com	r30
    475e:	e7 fb       	bst	r30, 7
    4760:	fd c0       	rjmp	.+506    	; 0x495c <__fp_inf>

00004762 <__addsf3x>:
    4762:	e9 2f       	mov	r30, r25
    4764:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__fp_split3>
    4768:	78 f3       	brcs	.-34     	; 0x4748 <__addsf3+0x8>
    476a:	ba 17       	cp	r27, r26
    476c:	62 07       	cpc	r22, r18
    476e:	73 07       	cpc	r23, r19
    4770:	84 07       	cpc	r24, r20
    4772:	95 07       	cpc	r25, r21
    4774:	20 f0       	brcs	.+8      	; 0x477e <__addsf3x+0x1c>
    4776:	79 f4       	brne	.+30     	; 0x4796 <__addsf3x+0x34>
    4778:	a6 f5       	brtc	.+104    	; 0x47e2 <__addsf3x+0x80>
    477a:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <__fp_zero>
    477e:	0e f4       	brtc	.+2      	; 0x4782 <__addsf3x+0x20>
    4780:	e0 95       	com	r30
    4782:	0b 2e       	mov	r0, r27
    4784:	ba 2f       	mov	r27, r26
    4786:	a0 2d       	mov	r26, r0
    4788:	0b 01       	movw	r0, r22
    478a:	b9 01       	movw	r22, r18
    478c:	90 01       	movw	r18, r0
    478e:	0c 01       	movw	r0, r24
    4790:	ca 01       	movw	r24, r20
    4792:	a0 01       	movw	r20, r0
    4794:	11 24       	eor	r1, r1
    4796:	ff 27       	eor	r31, r31
    4798:	59 1b       	sub	r21, r25
    479a:	99 f0       	breq	.+38     	; 0x47c2 <__addsf3x+0x60>
    479c:	59 3f       	cpi	r21, 0xF9	; 249
    479e:	50 f4       	brcc	.+20     	; 0x47b4 <__addsf3x+0x52>
    47a0:	50 3e       	cpi	r21, 0xE0	; 224
    47a2:	68 f1       	brcs	.+90     	; 0x47fe <__addsf3x+0x9c>
    47a4:	1a 16       	cp	r1, r26
    47a6:	f0 40       	sbci	r31, 0x00	; 0
    47a8:	a2 2f       	mov	r26, r18
    47aa:	23 2f       	mov	r18, r19
    47ac:	34 2f       	mov	r19, r20
    47ae:	44 27       	eor	r20, r20
    47b0:	58 5f       	subi	r21, 0xF8	; 248
    47b2:	f3 cf       	rjmp	.-26     	; 0x479a <__addsf3x+0x38>
    47b4:	46 95       	lsr	r20
    47b6:	37 95       	ror	r19
    47b8:	27 95       	ror	r18
    47ba:	a7 95       	ror	r26
    47bc:	f0 40       	sbci	r31, 0x00	; 0
    47be:	53 95       	inc	r21
    47c0:	c9 f7       	brne	.-14     	; 0x47b4 <__addsf3x+0x52>
    47c2:	7e f4       	brtc	.+30     	; 0x47e2 <__addsf3x+0x80>
    47c4:	1f 16       	cp	r1, r31
    47c6:	ba 0b       	sbc	r27, r26
    47c8:	62 0b       	sbc	r22, r18
    47ca:	73 0b       	sbc	r23, r19
    47cc:	84 0b       	sbc	r24, r20
    47ce:	ba f0       	brmi	.+46     	; 0x47fe <__addsf3x+0x9c>
    47d0:	91 50       	subi	r25, 0x01	; 1
    47d2:	a1 f0       	breq	.+40     	; 0x47fc <__addsf3x+0x9a>
    47d4:	ff 0f       	add	r31, r31
    47d6:	bb 1f       	adc	r27, r27
    47d8:	66 1f       	adc	r22, r22
    47da:	77 1f       	adc	r23, r23
    47dc:	88 1f       	adc	r24, r24
    47de:	c2 f7       	brpl	.-16     	; 0x47d0 <__addsf3x+0x6e>
    47e0:	0e c0       	rjmp	.+28     	; 0x47fe <__addsf3x+0x9c>
    47e2:	ba 0f       	add	r27, r26
    47e4:	62 1f       	adc	r22, r18
    47e6:	73 1f       	adc	r23, r19
    47e8:	84 1f       	adc	r24, r20
    47ea:	48 f4       	brcc	.+18     	; 0x47fe <__addsf3x+0x9c>
    47ec:	87 95       	ror	r24
    47ee:	77 95       	ror	r23
    47f0:	67 95       	ror	r22
    47f2:	b7 95       	ror	r27
    47f4:	f7 95       	ror	r31
    47f6:	9e 3f       	cpi	r25, 0xFE	; 254
    47f8:	08 f0       	brcs	.+2      	; 0x47fc <__addsf3x+0x9a>
    47fa:	b1 cf       	rjmp	.-158    	; 0x475e <__addsf3+0x1e>
    47fc:	93 95       	inc	r25
    47fe:	88 0f       	add	r24, r24
    4800:	08 f0       	brcs	.+2      	; 0x4804 <__addsf3x+0xa2>
    4802:	99 27       	eor	r25, r25
    4804:	ee 0f       	add	r30, r30
    4806:	97 95       	ror	r25
    4808:	87 95       	ror	r24
    480a:	08 95       	ret

0000480c <__divsf3>:
    480c:	0d d0       	rcall	.+26     	; 0x4828 <__divsf3x>
    480e:	bd c0       	rjmp	.+378    	; 0x498a <__fp_round>
    4810:	b5 d0       	rcall	.+362    	; 0x497c <__fp_pscB>
    4812:	48 f0       	brcs	.+18     	; 0x4826 <__divsf3+0x1a>
    4814:	ac d0       	rcall	.+344    	; 0x496e <__fp_pscA>
    4816:	38 f0       	brcs	.+14     	; 0x4826 <__divsf3+0x1a>
    4818:	21 f4       	brne	.+8      	; 0x4822 <__divsf3+0x16>
    481a:	5f 3f       	cpi	r21, 0xFF	; 255
    481c:	21 f0       	breq	.+8      	; 0x4826 <__divsf3+0x1a>
    481e:	9e c0       	rjmp	.+316    	; 0x495c <__fp_inf>
    4820:	51 11       	cpse	r21, r1
    4822:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__fp_szero>
    4826:	a0 c0       	rjmp	.+320    	; 0x4968 <__fp_nan>

00004828 <__divsf3x>:
    4828:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__fp_split3>
    482c:	88 f3       	brcs	.-30     	; 0x4810 <__divsf3+0x4>

0000482e <__divsf3_pse>:
    482e:	99 23       	and	r25, r25
    4830:	b9 f3       	breq	.-18     	; 0x4820 <__divsf3+0x14>
    4832:	55 23       	and	r21, r21
    4834:	a1 f3       	breq	.-24     	; 0x481e <__divsf3+0x12>
    4836:	95 1b       	sub	r25, r21
    4838:	55 0b       	sbc	r21, r21
    483a:	bb 27       	eor	r27, r27
    483c:	aa 27       	eor	r26, r26
    483e:	62 17       	cp	r22, r18
    4840:	73 07       	cpc	r23, r19
    4842:	84 07       	cpc	r24, r20
    4844:	38 f0       	brcs	.+14     	; 0x4854 <__divsf3_pse+0x26>
    4846:	9f 5f       	subi	r25, 0xFF	; 255
    4848:	5f 4f       	sbci	r21, 0xFF	; 255
    484a:	22 0f       	add	r18, r18
    484c:	33 1f       	adc	r19, r19
    484e:	44 1f       	adc	r20, r20
    4850:	aa 1f       	adc	r26, r26
    4852:	a9 f3       	breq	.-22     	; 0x483e <__divsf3_pse+0x10>
    4854:	34 d0       	rcall	.+104    	; 0x48be <__divsf3_pse+0x90>
    4856:	0e 2e       	mov	r0, r30
    4858:	3a f0       	brmi	.+14     	; 0x4868 <__divsf3_pse+0x3a>
    485a:	e0 e8       	ldi	r30, 0x80	; 128
    485c:	31 d0       	rcall	.+98     	; 0x48c0 <__divsf3_pse+0x92>
    485e:	91 50       	subi	r25, 0x01	; 1
    4860:	50 40       	sbci	r21, 0x00	; 0
    4862:	e6 95       	lsr	r30
    4864:	00 1c       	adc	r0, r0
    4866:	ca f7       	brpl	.-14     	; 0x485a <__divsf3_pse+0x2c>
    4868:	2a d0       	rcall	.+84     	; 0x48be <__divsf3_pse+0x90>
    486a:	fe 2f       	mov	r31, r30
    486c:	28 d0       	rcall	.+80     	; 0x48be <__divsf3_pse+0x90>
    486e:	66 0f       	add	r22, r22
    4870:	77 1f       	adc	r23, r23
    4872:	88 1f       	adc	r24, r24
    4874:	bb 1f       	adc	r27, r27
    4876:	26 17       	cp	r18, r22
    4878:	37 07       	cpc	r19, r23
    487a:	48 07       	cpc	r20, r24
    487c:	ab 07       	cpc	r26, r27
    487e:	b0 e8       	ldi	r27, 0x80	; 128
    4880:	09 f0       	breq	.+2      	; 0x4884 <__divsf3_pse+0x56>
    4882:	bb 0b       	sbc	r27, r27
    4884:	80 2d       	mov	r24, r0
    4886:	bf 01       	movw	r22, r30
    4888:	ff 27       	eor	r31, r31
    488a:	93 58       	subi	r25, 0x83	; 131
    488c:	5f 4f       	sbci	r21, 0xFF	; 255
    488e:	32 f0       	brmi	.+12     	; 0x489c <__divsf3_pse+0x6e>
    4890:	9e 3f       	cpi	r25, 0xFE	; 254
    4892:	51 05       	cpc	r21, r1
    4894:	70 f0       	brcs	.+28     	; 0x48b2 <__divsf3_pse+0x84>
    4896:	62 c0       	rjmp	.+196    	; 0x495c <__fp_inf>
    4898:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__fp_szero>
    489c:	5f 3f       	cpi	r21, 0xFF	; 255
    489e:	e4 f3       	brlt	.-8      	; 0x4898 <__divsf3_pse+0x6a>
    48a0:	98 3e       	cpi	r25, 0xE8	; 232
    48a2:	d4 f3       	brlt	.-12     	; 0x4898 <__divsf3_pse+0x6a>
    48a4:	86 95       	lsr	r24
    48a6:	77 95       	ror	r23
    48a8:	67 95       	ror	r22
    48aa:	b7 95       	ror	r27
    48ac:	f7 95       	ror	r31
    48ae:	9f 5f       	subi	r25, 0xFF	; 255
    48b0:	c9 f7       	brne	.-14     	; 0x48a4 <__divsf3_pse+0x76>
    48b2:	88 0f       	add	r24, r24
    48b4:	91 1d       	adc	r25, r1
    48b6:	96 95       	lsr	r25
    48b8:	87 95       	ror	r24
    48ba:	97 f9       	bld	r25, 7
    48bc:	08 95       	ret
    48be:	e1 e0       	ldi	r30, 0x01	; 1
    48c0:	66 0f       	add	r22, r22
    48c2:	77 1f       	adc	r23, r23
    48c4:	88 1f       	adc	r24, r24
    48c6:	bb 1f       	adc	r27, r27
    48c8:	62 17       	cp	r22, r18
    48ca:	73 07       	cpc	r23, r19
    48cc:	84 07       	cpc	r24, r20
    48ce:	ba 07       	cpc	r27, r26
    48d0:	20 f0       	brcs	.+8      	; 0x48da <__divsf3_pse+0xac>
    48d2:	62 1b       	sub	r22, r18
    48d4:	73 0b       	sbc	r23, r19
    48d6:	84 0b       	sbc	r24, r20
    48d8:	ba 0b       	sbc	r27, r26
    48da:	ee 1f       	adc	r30, r30
    48dc:	88 f7       	brcc	.-30     	; 0x48c0 <__divsf3_pse+0x92>
    48de:	e0 95       	com	r30
    48e0:	08 95       	ret

000048e2 <__floatunsisf>:
    48e2:	e8 94       	clt
    48e4:	09 c0       	rjmp	.+18     	; 0x48f8 <__floatsisf+0x12>

000048e6 <__floatsisf>:
    48e6:	97 fb       	bst	r25, 7
    48e8:	3e f4       	brtc	.+14     	; 0x48f8 <__floatsisf+0x12>
    48ea:	90 95       	com	r25
    48ec:	80 95       	com	r24
    48ee:	70 95       	com	r23
    48f0:	61 95       	neg	r22
    48f2:	7f 4f       	sbci	r23, 0xFF	; 255
    48f4:	8f 4f       	sbci	r24, 0xFF	; 255
    48f6:	9f 4f       	sbci	r25, 0xFF	; 255
    48f8:	99 23       	and	r25, r25
    48fa:	a9 f0       	breq	.+42     	; 0x4926 <__floatsisf+0x40>
    48fc:	f9 2f       	mov	r31, r25
    48fe:	96 e9       	ldi	r25, 0x96	; 150
    4900:	bb 27       	eor	r27, r27
    4902:	93 95       	inc	r25
    4904:	f6 95       	lsr	r31
    4906:	87 95       	ror	r24
    4908:	77 95       	ror	r23
    490a:	67 95       	ror	r22
    490c:	b7 95       	ror	r27
    490e:	f1 11       	cpse	r31, r1
    4910:	f8 cf       	rjmp	.-16     	; 0x4902 <__floatsisf+0x1c>
    4912:	fa f4       	brpl	.+62     	; 0x4952 <__floatsisf+0x6c>
    4914:	bb 0f       	add	r27, r27
    4916:	11 f4       	brne	.+4      	; 0x491c <__floatsisf+0x36>
    4918:	60 ff       	sbrs	r22, 0
    491a:	1b c0       	rjmp	.+54     	; 0x4952 <__floatsisf+0x6c>
    491c:	6f 5f       	subi	r22, 0xFF	; 255
    491e:	7f 4f       	sbci	r23, 0xFF	; 255
    4920:	8f 4f       	sbci	r24, 0xFF	; 255
    4922:	9f 4f       	sbci	r25, 0xFF	; 255
    4924:	16 c0       	rjmp	.+44     	; 0x4952 <__floatsisf+0x6c>
    4926:	88 23       	and	r24, r24
    4928:	11 f0       	breq	.+4      	; 0x492e <__floatsisf+0x48>
    492a:	96 e9       	ldi	r25, 0x96	; 150
    492c:	11 c0       	rjmp	.+34     	; 0x4950 <__floatsisf+0x6a>
    492e:	77 23       	and	r23, r23
    4930:	21 f0       	breq	.+8      	; 0x493a <__floatsisf+0x54>
    4932:	9e e8       	ldi	r25, 0x8E	; 142
    4934:	87 2f       	mov	r24, r23
    4936:	76 2f       	mov	r23, r22
    4938:	05 c0       	rjmp	.+10     	; 0x4944 <__floatsisf+0x5e>
    493a:	66 23       	and	r22, r22
    493c:	71 f0       	breq	.+28     	; 0x495a <__floatsisf+0x74>
    493e:	96 e8       	ldi	r25, 0x86	; 134
    4940:	86 2f       	mov	r24, r22
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	60 e0       	ldi	r22, 0x00	; 0
    4946:	2a f0       	brmi	.+10     	; 0x4952 <__floatsisf+0x6c>
    4948:	9a 95       	dec	r25
    494a:	66 0f       	add	r22, r22
    494c:	77 1f       	adc	r23, r23
    494e:	88 1f       	adc	r24, r24
    4950:	da f7       	brpl	.-10     	; 0x4948 <__floatsisf+0x62>
    4952:	88 0f       	add	r24, r24
    4954:	96 95       	lsr	r25
    4956:	87 95       	ror	r24
    4958:	97 f9       	bld	r25, 7
    495a:	08 95       	ret

0000495c <__fp_inf>:
    495c:	97 f9       	bld	r25, 7
    495e:	9f 67       	ori	r25, 0x7F	; 127
    4960:	80 e8       	ldi	r24, 0x80	; 128
    4962:	70 e0       	ldi	r23, 0x00	; 0
    4964:	60 e0       	ldi	r22, 0x00	; 0
    4966:	08 95       	ret

00004968 <__fp_nan>:
    4968:	9f ef       	ldi	r25, 0xFF	; 255
    496a:	80 ec       	ldi	r24, 0xC0	; 192
    496c:	08 95       	ret

0000496e <__fp_pscA>:
    496e:	00 24       	eor	r0, r0
    4970:	0a 94       	dec	r0
    4972:	16 16       	cp	r1, r22
    4974:	17 06       	cpc	r1, r23
    4976:	18 06       	cpc	r1, r24
    4978:	09 06       	cpc	r0, r25
    497a:	08 95       	ret

0000497c <__fp_pscB>:
    497c:	00 24       	eor	r0, r0
    497e:	0a 94       	dec	r0
    4980:	12 16       	cp	r1, r18
    4982:	13 06       	cpc	r1, r19
    4984:	14 06       	cpc	r1, r20
    4986:	05 06       	cpc	r0, r21
    4988:	08 95       	ret

0000498a <__fp_round>:
    498a:	09 2e       	mov	r0, r25
    498c:	03 94       	inc	r0
    498e:	00 0c       	add	r0, r0
    4990:	11 f4       	brne	.+4      	; 0x4996 <__fp_round+0xc>
    4992:	88 23       	and	r24, r24
    4994:	52 f0       	brmi	.+20     	; 0x49aa <__fp_round+0x20>
    4996:	bb 0f       	add	r27, r27
    4998:	40 f4       	brcc	.+16     	; 0x49aa <__fp_round+0x20>
    499a:	bf 2b       	or	r27, r31
    499c:	11 f4       	brne	.+4      	; 0x49a2 <__fp_round+0x18>
    499e:	60 ff       	sbrs	r22, 0
    49a0:	04 c0       	rjmp	.+8      	; 0x49aa <__fp_round+0x20>
    49a2:	6f 5f       	subi	r22, 0xFF	; 255
    49a4:	7f 4f       	sbci	r23, 0xFF	; 255
    49a6:	8f 4f       	sbci	r24, 0xFF	; 255
    49a8:	9f 4f       	sbci	r25, 0xFF	; 255
    49aa:	08 95       	ret

000049ac <__gesf2>:
    49ac:	69 d0       	rcall	.+210    	; 0x4a80 <__fp_cmp>
    49ae:	08 f4       	brcc	.+2      	; 0x49b2 <__gesf2+0x6>
    49b0:	8f ef       	ldi	r24, 0xFF	; 255
    49b2:	08 95       	ret

000049b4 <__mulsf3>:
    49b4:	0c d0       	rcall	.+24     	; 0x49ce <__mulsf3x>
    49b6:	e9 cf       	rjmp	.-46     	; 0x498a <__fp_round>
    49b8:	da df       	rcall	.-76     	; 0x496e <__fp_pscA>
    49ba:	28 f0       	brcs	.+10     	; 0x49c6 <__mulsf3+0x12>
    49bc:	df df       	rcall	.-66     	; 0x497c <__fp_pscB>
    49be:	18 f0       	brcs	.+6      	; 0x49c6 <__mulsf3+0x12>
    49c0:	95 23       	and	r25, r21
    49c2:	09 f0       	breq	.+2      	; 0x49c6 <__mulsf3+0x12>
    49c4:	cb cf       	rjmp	.-106    	; 0x495c <__fp_inf>
    49c6:	d0 cf       	rjmp	.-96     	; 0x4968 <__fp_nan>
    49c8:	11 24       	eor	r1, r1
    49ca:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__fp_szero>

000049ce <__mulsf3x>:
    49ce:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <__fp_split3>
    49d2:	90 f3       	brcs	.-28     	; 0x49b8 <__mulsf3+0x4>

000049d4 <__mulsf3_pse>:
    49d4:	95 9f       	mul	r25, r21
    49d6:	c1 f3       	breq	.-16     	; 0x49c8 <__mulsf3+0x14>
    49d8:	95 0f       	add	r25, r21
    49da:	50 e0       	ldi	r21, 0x00	; 0
    49dc:	55 1f       	adc	r21, r21
    49de:	62 9f       	mul	r22, r18
    49e0:	f0 01       	movw	r30, r0
    49e2:	72 9f       	mul	r23, r18
    49e4:	bb 27       	eor	r27, r27
    49e6:	f0 0d       	add	r31, r0
    49e8:	b1 1d       	adc	r27, r1
    49ea:	63 9f       	mul	r22, r19
    49ec:	aa 27       	eor	r26, r26
    49ee:	f0 0d       	add	r31, r0
    49f0:	b1 1d       	adc	r27, r1
    49f2:	aa 1f       	adc	r26, r26
    49f4:	64 9f       	mul	r22, r20
    49f6:	66 27       	eor	r22, r22
    49f8:	b0 0d       	add	r27, r0
    49fa:	a1 1d       	adc	r26, r1
    49fc:	66 1f       	adc	r22, r22
    49fe:	82 9f       	mul	r24, r18
    4a00:	22 27       	eor	r18, r18
    4a02:	b0 0d       	add	r27, r0
    4a04:	a1 1d       	adc	r26, r1
    4a06:	62 1f       	adc	r22, r18
    4a08:	73 9f       	mul	r23, r19
    4a0a:	b0 0d       	add	r27, r0
    4a0c:	a1 1d       	adc	r26, r1
    4a0e:	62 1f       	adc	r22, r18
    4a10:	83 9f       	mul	r24, r19
    4a12:	a0 0d       	add	r26, r0
    4a14:	61 1d       	adc	r22, r1
    4a16:	22 1f       	adc	r18, r18
    4a18:	74 9f       	mul	r23, r20
    4a1a:	33 27       	eor	r19, r19
    4a1c:	a0 0d       	add	r26, r0
    4a1e:	61 1d       	adc	r22, r1
    4a20:	23 1f       	adc	r18, r19
    4a22:	84 9f       	mul	r24, r20
    4a24:	60 0d       	add	r22, r0
    4a26:	21 1d       	adc	r18, r1
    4a28:	82 2f       	mov	r24, r18
    4a2a:	76 2f       	mov	r23, r22
    4a2c:	6a 2f       	mov	r22, r26
    4a2e:	11 24       	eor	r1, r1
    4a30:	9f 57       	subi	r25, 0x7F	; 127
    4a32:	50 40       	sbci	r21, 0x00	; 0
    4a34:	92 f0       	brmi	.+36     	; 0x4a5a <__mulsf3_pse+0x86>
    4a36:	e9 f0       	breq	.+58     	; 0x4a72 <__mulsf3_pse+0x9e>
    4a38:	88 23       	and	r24, r24
    4a3a:	4a f0       	brmi	.+18     	; 0x4a4e <__mulsf3_pse+0x7a>
    4a3c:	ee 0f       	add	r30, r30
    4a3e:	ff 1f       	adc	r31, r31
    4a40:	bb 1f       	adc	r27, r27
    4a42:	66 1f       	adc	r22, r22
    4a44:	77 1f       	adc	r23, r23
    4a46:	88 1f       	adc	r24, r24
    4a48:	91 50       	subi	r25, 0x01	; 1
    4a4a:	50 40       	sbci	r21, 0x00	; 0
    4a4c:	a9 f7       	brne	.-22     	; 0x4a38 <__mulsf3_pse+0x64>
    4a4e:	9e 3f       	cpi	r25, 0xFE	; 254
    4a50:	51 05       	cpc	r21, r1
    4a52:	78 f0       	brcs	.+30     	; 0x4a72 <__mulsf3_pse+0x9e>
    4a54:	83 cf       	rjmp	.-250    	; 0x495c <__fp_inf>
    4a56:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__fp_szero>
    4a5a:	5f 3f       	cpi	r21, 0xFF	; 255
    4a5c:	e4 f3       	brlt	.-8      	; 0x4a56 <__mulsf3_pse+0x82>
    4a5e:	98 3e       	cpi	r25, 0xE8	; 232
    4a60:	d4 f3       	brlt	.-12     	; 0x4a56 <__mulsf3_pse+0x82>
    4a62:	86 95       	lsr	r24
    4a64:	77 95       	ror	r23
    4a66:	67 95       	ror	r22
    4a68:	b7 95       	ror	r27
    4a6a:	f7 95       	ror	r31
    4a6c:	e7 95       	ror	r30
    4a6e:	9f 5f       	subi	r25, 0xFF	; 255
    4a70:	c1 f7       	brne	.-16     	; 0x4a62 <__mulsf3_pse+0x8e>
    4a72:	fe 2b       	or	r31, r30
    4a74:	88 0f       	add	r24, r24
    4a76:	91 1d       	adc	r25, r1
    4a78:	96 95       	lsr	r25
    4a7a:	87 95       	ror	r24
    4a7c:	97 f9       	bld	r25, 7
    4a7e:	08 95       	ret

00004a80 <__fp_cmp>:
    4a80:	99 0f       	add	r25, r25
    4a82:	00 08       	sbc	r0, r0
    4a84:	55 0f       	add	r21, r21
    4a86:	aa 0b       	sbc	r26, r26
    4a88:	e0 e8       	ldi	r30, 0x80	; 128
    4a8a:	fe ef       	ldi	r31, 0xFE	; 254
    4a8c:	16 16       	cp	r1, r22
    4a8e:	17 06       	cpc	r1, r23
    4a90:	e8 07       	cpc	r30, r24
    4a92:	f9 07       	cpc	r31, r25
    4a94:	c0 f0       	brcs	.+48     	; 0x4ac6 <__fp_cmp+0x46>
    4a96:	12 16       	cp	r1, r18
    4a98:	13 06       	cpc	r1, r19
    4a9a:	e4 07       	cpc	r30, r20
    4a9c:	f5 07       	cpc	r31, r21
    4a9e:	98 f0       	brcs	.+38     	; 0x4ac6 <__fp_cmp+0x46>
    4aa0:	62 1b       	sub	r22, r18
    4aa2:	73 0b       	sbc	r23, r19
    4aa4:	84 0b       	sbc	r24, r20
    4aa6:	95 0b       	sbc	r25, r21
    4aa8:	39 f4       	brne	.+14     	; 0x4ab8 <__fp_cmp+0x38>
    4aaa:	0a 26       	eor	r0, r26
    4aac:	61 f0       	breq	.+24     	; 0x4ac6 <__fp_cmp+0x46>
    4aae:	23 2b       	or	r18, r19
    4ab0:	24 2b       	or	r18, r20
    4ab2:	25 2b       	or	r18, r21
    4ab4:	21 f4       	brne	.+8      	; 0x4abe <__fp_cmp+0x3e>
    4ab6:	08 95       	ret
    4ab8:	0a 26       	eor	r0, r26
    4aba:	09 f4       	brne	.+2      	; 0x4abe <__fp_cmp+0x3e>
    4abc:	a1 40       	sbci	r26, 0x01	; 1
    4abe:	a6 95       	lsr	r26
    4ac0:	8f ef       	ldi	r24, 0xFF	; 255
    4ac2:	81 1d       	adc	r24, r1
    4ac4:	81 1d       	adc	r24, r1
    4ac6:	08 95       	ret

00004ac8 <__udivmodsi4>:
    4ac8:	a1 e2       	ldi	r26, 0x21	; 33
    4aca:	1a 2e       	mov	r1, r26
    4acc:	aa 1b       	sub	r26, r26
    4ace:	bb 1b       	sub	r27, r27
    4ad0:	fd 01       	movw	r30, r26
    4ad2:	0d c0       	rjmp	.+26     	; 0x4aee <__udivmodsi4_ep>

00004ad4 <__udivmodsi4_loop>:
    4ad4:	aa 1f       	adc	r26, r26
    4ad6:	bb 1f       	adc	r27, r27
    4ad8:	ee 1f       	adc	r30, r30
    4ada:	ff 1f       	adc	r31, r31
    4adc:	a2 17       	cp	r26, r18
    4ade:	b3 07       	cpc	r27, r19
    4ae0:	e4 07       	cpc	r30, r20
    4ae2:	f5 07       	cpc	r31, r21
    4ae4:	20 f0       	brcs	.+8      	; 0x4aee <__udivmodsi4_ep>
    4ae6:	a2 1b       	sub	r26, r18
    4ae8:	b3 0b       	sbc	r27, r19
    4aea:	e4 0b       	sbc	r30, r20
    4aec:	f5 0b       	sbc	r31, r21

00004aee <__udivmodsi4_ep>:
    4aee:	66 1f       	adc	r22, r22
    4af0:	77 1f       	adc	r23, r23
    4af2:	88 1f       	adc	r24, r24
    4af4:	99 1f       	adc	r25, r25
    4af6:	1a 94       	dec	r1
    4af8:	69 f7       	brne	.-38     	; 0x4ad4 <__udivmodsi4_loop>
    4afa:	60 95       	com	r22
    4afc:	70 95       	com	r23
    4afe:	80 95       	com	r24
    4b00:	90 95       	com	r25
    4b02:	9b 01       	movw	r18, r22
    4b04:	ac 01       	movw	r20, r24
    4b06:	bd 01       	movw	r22, r26
    4b08:	cf 01       	movw	r24, r30
    4b0a:	08 95       	ret

00004b0c <__tablejump2__>:
    4b0c:	ee 0f       	add	r30, r30
    4b0e:	ff 1f       	adc	r31, r31
    4b10:	88 1f       	adc	r24, r24
    4b12:	8b bf       	out	0x3b, r24	; 59
    4b14:	07 90       	elpm	r0, Z+
    4b16:	f6 91       	elpm	r31, Z
    4b18:	e0 2d       	mov	r30, r0
    4b1a:	19 94       	eijmp

00004b1c <calloc>:
    4b1c:	0f 93       	push	r16
    4b1e:	1f 93       	push	r17
    4b20:	cf 93       	push	r28
    4b22:	df 93       	push	r29
    4b24:	86 9f       	mul	r24, r22
    4b26:	80 01       	movw	r16, r0
    4b28:	87 9f       	mul	r24, r23
    4b2a:	10 0d       	add	r17, r0
    4b2c:	96 9f       	mul	r25, r22
    4b2e:	10 0d       	add	r17, r0
    4b30:	11 24       	eor	r1, r1
    4b32:	c8 01       	movw	r24, r16
    4b34:	0d d0       	rcall	.+26     	; 0x4b50 <malloc>
    4b36:	ec 01       	movw	r28, r24
    4b38:	00 97       	sbiw	r24, 0x00	; 0
    4b3a:	21 f0       	breq	.+8      	; 0x4b44 <calloc+0x28>
    4b3c:	a8 01       	movw	r20, r16
    4b3e:	60 e0       	ldi	r22, 0x00	; 0
    4b40:	70 e0       	ldi	r23, 0x00	; 0
    4b42:	34 d1       	rcall	.+616    	; 0x4dac <memset>
    4b44:	ce 01       	movw	r24, r28
    4b46:	df 91       	pop	r29
    4b48:	cf 91       	pop	r28
    4b4a:	1f 91       	pop	r17
    4b4c:	0f 91       	pop	r16
    4b4e:	08 95       	ret

00004b50 <malloc>:
    4b50:	0f 93       	push	r16
    4b52:	1f 93       	push	r17
    4b54:	cf 93       	push	r28
    4b56:	df 93       	push	r29
    4b58:	82 30       	cpi	r24, 0x02	; 2
    4b5a:	91 05       	cpc	r25, r1
    4b5c:	10 f4       	brcc	.+4      	; 0x4b62 <malloc+0x12>
    4b5e:	82 e0       	ldi	r24, 0x02	; 2
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	e0 91 26 0a 	lds	r30, 0x0A26	; 0x800a26 <__flp>
    4b66:	f0 91 27 0a 	lds	r31, 0x0A27	; 0x800a27 <__flp+0x1>
    4b6a:	20 e0       	ldi	r18, 0x00	; 0
    4b6c:	30 e0       	ldi	r19, 0x00	; 0
    4b6e:	a0 e0       	ldi	r26, 0x00	; 0
    4b70:	b0 e0       	ldi	r27, 0x00	; 0
    4b72:	30 97       	sbiw	r30, 0x00	; 0
    4b74:	19 f1       	breq	.+70     	; 0x4bbc <malloc+0x6c>
    4b76:	40 81       	ld	r20, Z
    4b78:	51 81       	ldd	r21, Z+1	; 0x01
    4b7a:	02 81       	ldd	r16, Z+2	; 0x02
    4b7c:	13 81       	ldd	r17, Z+3	; 0x03
    4b7e:	48 17       	cp	r20, r24
    4b80:	59 07       	cpc	r21, r25
    4b82:	c8 f0       	brcs	.+50     	; 0x4bb6 <malloc+0x66>
    4b84:	84 17       	cp	r24, r20
    4b86:	95 07       	cpc	r25, r21
    4b88:	69 f4       	brne	.+26     	; 0x4ba4 <malloc+0x54>
    4b8a:	10 97       	sbiw	r26, 0x00	; 0
    4b8c:	31 f0       	breq	.+12     	; 0x4b9a <malloc+0x4a>
    4b8e:	12 96       	adiw	r26, 0x02	; 2
    4b90:	0c 93       	st	X, r16
    4b92:	12 97       	sbiw	r26, 0x02	; 2
    4b94:	13 96       	adiw	r26, 0x03	; 3
    4b96:	1c 93       	st	X, r17
    4b98:	27 c0       	rjmp	.+78     	; 0x4be8 <malloc+0x98>
    4b9a:	00 93 26 0a 	sts	0x0A26, r16	; 0x800a26 <__flp>
    4b9e:	10 93 27 0a 	sts	0x0A27, r17	; 0x800a27 <__flp+0x1>
    4ba2:	22 c0       	rjmp	.+68     	; 0x4be8 <malloc+0x98>
    4ba4:	21 15       	cp	r18, r1
    4ba6:	31 05       	cpc	r19, r1
    4ba8:	19 f0       	breq	.+6      	; 0x4bb0 <malloc+0x60>
    4baa:	42 17       	cp	r20, r18
    4bac:	53 07       	cpc	r21, r19
    4bae:	18 f4       	brcc	.+6      	; 0x4bb6 <malloc+0x66>
    4bb0:	9a 01       	movw	r18, r20
    4bb2:	bd 01       	movw	r22, r26
    4bb4:	ef 01       	movw	r28, r30
    4bb6:	df 01       	movw	r26, r30
    4bb8:	f8 01       	movw	r30, r16
    4bba:	db cf       	rjmp	.-74     	; 0x4b72 <malloc+0x22>
    4bbc:	21 15       	cp	r18, r1
    4bbe:	31 05       	cpc	r19, r1
    4bc0:	f9 f0       	breq	.+62     	; 0x4c00 <malloc+0xb0>
    4bc2:	28 1b       	sub	r18, r24
    4bc4:	39 0b       	sbc	r19, r25
    4bc6:	24 30       	cpi	r18, 0x04	; 4
    4bc8:	31 05       	cpc	r19, r1
    4bca:	80 f4       	brcc	.+32     	; 0x4bec <malloc+0x9c>
    4bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bce:	9b 81       	ldd	r25, Y+3	; 0x03
    4bd0:	61 15       	cp	r22, r1
    4bd2:	71 05       	cpc	r23, r1
    4bd4:	21 f0       	breq	.+8      	; 0x4bde <malloc+0x8e>
    4bd6:	fb 01       	movw	r30, r22
    4bd8:	93 83       	std	Z+3, r25	; 0x03
    4bda:	82 83       	std	Z+2, r24	; 0x02
    4bdc:	04 c0       	rjmp	.+8      	; 0x4be6 <malloc+0x96>
    4bde:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__flp+0x1>
    4be2:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__flp>
    4be6:	fe 01       	movw	r30, r28
    4be8:	32 96       	adiw	r30, 0x02	; 2
    4bea:	44 c0       	rjmp	.+136    	; 0x4c74 <malloc+0x124>
    4bec:	fe 01       	movw	r30, r28
    4bee:	e2 0f       	add	r30, r18
    4bf0:	f3 1f       	adc	r31, r19
    4bf2:	81 93       	st	Z+, r24
    4bf4:	91 93       	st	Z+, r25
    4bf6:	22 50       	subi	r18, 0x02	; 2
    4bf8:	31 09       	sbc	r19, r1
    4bfa:	39 83       	std	Y+1, r19	; 0x01
    4bfc:	28 83       	st	Y, r18
    4bfe:	3a c0       	rjmp	.+116    	; 0x4c74 <malloc+0x124>
    4c00:	20 91 24 0a 	lds	r18, 0x0A24	; 0x800a24 <__brkval>
    4c04:	30 91 25 0a 	lds	r19, 0x0A25	; 0x800a25 <__brkval+0x1>
    4c08:	23 2b       	or	r18, r19
    4c0a:	41 f4       	brne	.+16     	; 0x4c1c <malloc+0xcc>
    4c0c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4c10:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4c14:	30 93 25 0a 	sts	0x0A25, r19	; 0x800a25 <__brkval+0x1>
    4c18:	20 93 24 0a 	sts	0x0A24, r18	; 0x800a24 <__brkval>
    4c1c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4c20:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4c24:	21 15       	cp	r18, r1
    4c26:	31 05       	cpc	r19, r1
    4c28:	41 f4       	brne	.+16     	; 0x4c3a <malloc+0xea>
    4c2a:	2d b7       	in	r18, 0x3d	; 61
    4c2c:	3e b7       	in	r19, 0x3e	; 62
    4c2e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4c32:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4c36:	24 1b       	sub	r18, r20
    4c38:	35 0b       	sbc	r19, r21
    4c3a:	e0 91 24 0a 	lds	r30, 0x0A24	; 0x800a24 <__brkval>
    4c3e:	f0 91 25 0a 	lds	r31, 0x0A25	; 0x800a25 <__brkval+0x1>
    4c42:	e2 17       	cp	r30, r18
    4c44:	f3 07       	cpc	r31, r19
    4c46:	a0 f4       	brcc	.+40     	; 0x4c70 <malloc+0x120>
    4c48:	2e 1b       	sub	r18, r30
    4c4a:	3f 0b       	sbc	r19, r31
    4c4c:	28 17       	cp	r18, r24
    4c4e:	39 07       	cpc	r19, r25
    4c50:	78 f0       	brcs	.+30     	; 0x4c70 <malloc+0x120>
    4c52:	ac 01       	movw	r20, r24
    4c54:	4e 5f       	subi	r20, 0xFE	; 254
    4c56:	5f 4f       	sbci	r21, 0xFF	; 255
    4c58:	24 17       	cp	r18, r20
    4c5a:	35 07       	cpc	r19, r21
    4c5c:	48 f0       	brcs	.+18     	; 0x4c70 <malloc+0x120>
    4c5e:	4e 0f       	add	r20, r30
    4c60:	5f 1f       	adc	r21, r31
    4c62:	50 93 25 0a 	sts	0x0A25, r21	; 0x800a25 <__brkval+0x1>
    4c66:	40 93 24 0a 	sts	0x0A24, r20	; 0x800a24 <__brkval>
    4c6a:	81 93       	st	Z+, r24
    4c6c:	91 93       	st	Z+, r25
    4c6e:	02 c0       	rjmp	.+4      	; 0x4c74 <malloc+0x124>
    4c70:	e0 e0       	ldi	r30, 0x00	; 0
    4c72:	f0 e0       	ldi	r31, 0x00	; 0
    4c74:	cf 01       	movw	r24, r30
    4c76:	df 91       	pop	r29
    4c78:	cf 91       	pop	r28
    4c7a:	1f 91       	pop	r17
    4c7c:	0f 91       	pop	r16
    4c7e:	08 95       	ret

00004c80 <free>:
    4c80:	cf 93       	push	r28
    4c82:	df 93       	push	r29
    4c84:	00 97       	sbiw	r24, 0x00	; 0
    4c86:	09 f4       	brne	.+2      	; 0x4c8a <free+0xa>
    4c88:	81 c0       	rjmp	.+258    	; 0x4d8c <free+0x10c>
    4c8a:	fc 01       	movw	r30, r24
    4c8c:	32 97       	sbiw	r30, 0x02	; 2
    4c8e:	13 82       	std	Z+3, r1	; 0x03
    4c90:	12 82       	std	Z+2, r1	; 0x02
    4c92:	a0 91 26 0a 	lds	r26, 0x0A26	; 0x800a26 <__flp>
    4c96:	b0 91 27 0a 	lds	r27, 0x0A27	; 0x800a27 <__flp+0x1>
    4c9a:	10 97       	sbiw	r26, 0x00	; 0
    4c9c:	81 f4       	brne	.+32     	; 0x4cbe <free+0x3e>
    4c9e:	20 81       	ld	r18, Z
    4ca0:	31 81       	ldd	r19, Z+1	; 0x01
    4ca2:	82 0f       	add	r24, r18
    4ca4:	93 1f       	adc	r25, r19
    4ca6:	20 91 24 0a 	lds	r18, 0x0A24	; 0x800a24 <__brkval>
    4caa:	30 91 25 0a 	lds	r19, 0x0A25	; 0x800a25 <__brkval+0x1>
    4cae:	28 17       	cp	r18, r24
    4cb0:	39 07       	cpc	r19, r25
    4cb2:	51 f5       	brne	.+84     	; 0x4d08 <free+0x88>
    4cb4:	f0 93 25 0a 	sts	0x0A25, r31	; 0x800a25 <__brkval+0x1>
    4cb8:	e0 93 24 0a 	sts	0x0A24, r30	; 0x800a24 <__brkval>
    4cbc:	67 c0       	rjmp	.+206    	; 0x4d8c <free+0x10c>
    4cbe:	ed 01       	movw	r28, r26
    4cc0:	20 e0       	ldi	r18, 0x00	; 0
    4cc2:	30 e0       	ldi	r19, 0x00	; 0
    4cc4:	ce 17       	cp	r28, r30
    4cc6:	df 07       	cpc	r29, r31
    4cc8:	40 f4       	brcc	.+16     	; 0x4cda <free+0x5a>
    4cca:	4a 81       	ldd	r20, Y+2	; 0x02
    4ccc:	5b 81       	ldd	r21, Y+3	; 0x03
    4cce:	9e 01       	movw	r18, r28
    4cd0:	41 15       	cp	r20, r1
    4cd2:	51 05       	cpc	r21, r1
    4cd4:	f1 f0       	breq	.+60     	; 0x4d12 <free+0x92>
    4cd6:	ea 01       	movw	r28, r20
    4cd8:	f5 cf       	rjmp	.-22     	; 0x4cc4 <free+0x44>
    4cda:	d3 83       	std	Z+3, r29	; 0x03
    4cdc:	c2 83       	std	Z+2, r28	; 0x02
    4cde:	40 81       	ld	r20, Z
    4ce0:	51 81       	ldd	r21, Z+1	; 0x01
    4ce2:	84 0f       	add	r24, r20
    4ce4:	95 1f       	adc	r25, r21
    4ce6:	c8 17       	cp	r28, r24
    4ce8:	d9 07       	cpc	r29, r25
    4cea:	59 f4       	brne	.+22     	; 0x4d02 <free+0x82>
    4cec:	88 81       	ld	r24, Y
    4cee:	99 81       	ldd	r25, Y+1	; 0x01
    4cf0:	84 0f       	add	r24, r20
    4cf2:	95 1f       	adc	r25, r21
    4cf4:	02 96       	adiw	r24, 0x02	; 2
    4cf6:	91 83       	std	Z+1, r25	; 0x01
    4cf8:	80 83       	st	Z, r24
    4cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    4cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    4cfe:	93 83       	std	Z+3, r25	; 0x03
    4d00:	82 83       	std	Z+2, r24	; 0x02
    4d02:	21 15       	cp	r18, r1
    4d04:	31 05       	cpc	r19, r1
    4d06:	29 f4       	brne	.+10     	; 0x4d12 <free+0x92>
    4d08:	f0 93 27 0a 	sts	0x0A27, r31	; 0x800a27 <__flp+0x1>
    4d0c:	e0 93 26 0a 	sts	0x0A26, r30	; 0x800a26 <__flp>
    4d10:	3d c0       	rjmp	.+122    	; 0x4d8c <free+0x10c>
    4d12:	e9 01       	movw	r28, r18
    4d14:	fb 83       	std	Y+3, r31	; 0x03
    4d16:	ea 83       	std	Y+2, r30	; 0x02
    4d18:	49 91       	ld	r20, Y+
    4d1a:	59 91       	ld	r21, Y+
    4d1c:	c4 0f       	add	r28, r20
    4d1e:	d5 1f       	adc	r29, r21
    4d20:	ec 17       	cp	r30, r28
    4d22:	fd 07       	cpc	r31, r29
    4d24:	61 f4       	brne	.+24     	; 0x4d3e <free+0xbe>
    4d26:	80 81       	ld	r24, Z
    4d28:	91 81       	ldd	r25, Z+1	; 0x01
    4d2a:	84 0f       	add	r24, r20
    4d2c:	95 1f       	adc	r25, r21
    4d2e:	02 96       	adiw	r24, 0x02	; 2
    4d30:	e9 01       	movw	r28, r18
    4d32:	99 83       	std	Y+1, r25	; 0x01
    4d34:	88 83       	st	Y, r24
    4d36:	82 81       	ldd	r24, Z+2	; 0x02
    4d38:	93 81       	ldd	r25, Z+3	; 0x03
    4d3a:	9b 83       	std	Y+3, r25	; 0x03
    4d3c:	8a 83       	std	Y+2, r24	; 0x02
    4d3e:	e0 e0       	ldi	r30, 0x00	; 0
    4d40:	f0 e0       	ldi	r31, 0x00	; 0
    4d42:	12 96       	adiw	r26, 0x02	; 2
    4d44:	8d 91       	ld	r24, X+
    4d46:	9c 91       	ld	r25, X
    4d48:	13 97       	sbiw	r26, 0x03	; 3
    4d4a:	00 97       	sbiw	r24, 0x00	; 0
    4d4c:	19 f0       	breq	.+6      	; 0x4d54 <free+0xd4>
    4d4e:	fd 01       	movw	r30, r26
    4d50:	dc 01       	movw	r26, r24
    4d52:	f7 cf       	rjmp	.-18     	; 0x4d42 <free+0xc2>
    4d54:	8d 91       	ld	r24, X+
    4d56:	9c 91       	ld	r25, X
    4d58:	11 97       	sbiw	r26, 0x01	; 1
    4d5a:	9d 01       	movw	r18, r26
    4d5c:	2e 5f       	subi	r18, 0xFE	; 254
    4d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d60:	82 0f       	add	r24, r18
    4d62:	93 1f       	adc	r25, r19
    4d64:	20 91 24 0a 	lds	r18, 0x0A24	; 0x800a24 <__brkval>
    4d68:	30 91 25 0a 	lds	r19, 0x0A25	; 0x800a25 <__brkval+0x1>
    4d6c:	28 17       	cp	r18, r24
    4d6e:	39 07       	cpc	r19, r25
    4d70:	69 f4       	brne	.+26     	; 0x4d8c <free+0x10c>
    4d72:	30 97       	sbiw	r30, 0x00	; 0
    4d74:	29 f4       	brne	.+10     	; 0x4d80 <free+0x100>
    4d76:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <__flp+0x1>
    4d7a:	10 92 26 0a 	sts	0x0A26, r1	; 0x800a26 <__flp>
    4d7e:	02 c0       	rjmp	.+4      	; 0x4d84 <free+0x104>
    4d80:	13 82       	std	Z+3, r1	; 0x03
    4d82:	12 82       	std	Z+2, r1	; 0x02
    4d84:	b0 93 25 0a 	sts	0x0A25, r27	; 0x800a25 <__brkval+0x1>
    4d88:	a0 93 24 0a 	sts	0x0A24, r26	; 0x800a24 <__brkval>
    4d8c:	df 91       	pop	r29
    4d8e:	cf 91       	pop	r28
    4d90:	08 95       	ret

00004d92 <abort>:
    4d92:	81 e0       	ldi	r24, 0x01	; 1
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	f8 94       	cli
    4d98:	58 c3       	rjmp	.+1712   	; 0x544a <_exit>

00004d9a <memcpy>:
    4d9a:	fb 01       	movw	r30, r22
    4d9c:	dc 01       	movw	r26, r24
    4d9e:	02 c0       	rjmp	.+4      	; 0x4da4 <memcpy+0xa>
    4da0:	01 90       	ld	r0, Z+
    4da2:	0d 92       	st	X+, r0
    4da4:	41 50       	subi	r20, 0x01	; 1
    4da6:	50 40       	sbci	r21, 0x00	; 0
    4da8:	d8 f7       	brcc	.-10     	; 0x4da0 <memcpy+0x6>
    4daa:	08 95       	ret

00004dac <memset>:
    4dac:	dc 01       	movw	r26, r24
    4dae:	01 c0       	rjmp	.+2      	; 0x4db2 <memset+0x6>
    4db0:	6d 93       	st	X+, r22
    4db2:	41 50       	subi	r20, 0x01	; 1
    4db4:	50 40       	sbci	r21, 0x00	; 0
    4db6:	e0 f7       	brcc	.-8      	; 0x4db0 <memset+0x4>
    4db8:	08 95       	ret

00004dba <strcat>:
    4dba:	fb 01       	movw	r30, r22
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	0d 90       	ld	r0, X+
    4dc0:	00 20       	and	r0, r0
    4dc2:	e9 f7       	brne	.-6      	; 0x4dbe <strcat+0x4>
    4dc4:	11 97       	sbiw	r26, 0x01	; 1
    4dc6:	01 90       	ld	r0, Z+
    4dc8:	0d 92       	st	X+, r0
    4dca:	00 20       	and	r0, r0
    4dcc:	e1 f7       	brne	.-8      	; 0x4dc6 <strcat+0xc>
    4dce:	08 95       	ret

00004dd0 <strcpy>:
    4dd0:	fb 01       	movw	r30, r22
    4dd2:	dc 01       	movw	r26, r24
    4dd4:	01 90       	ld	r0, Z+
    4dd6:	0d 92       	st	X+, r0
    4dd8:	00 20       	and	r0, r0
    4dda:	e1 f7       	brne	.-8      	; 0x4dd4 <strcpy+0x4>
    4ddc:	08 95       	ret

00004dde <strncasecmp>:
    4dde:	fb 01       	movw	r30, r22
    4de0:	dc 01       	movw	r26, r24
    4de2:	41 50       	subi	r20, 0x01	; 1
    4de4:	50 40       	sbci	r21, 0x00	; 0
    4de6:	88 f0       	brcs	.+34     	; 0x4e0a <strncasecmp+0x2c>
    4de8:	8d 91       	ld	r24, X+
    4dea:	81 34       	cpi	r24, 0x41	; 65
    4dec:	1c f0       	brlt	.+6      	; 0x4df4 <strncasecmp+0x16>
    4dee:	8b 35       	cpi	r24, 0x5B	; 91
    4df0:	0c f4       	brge	.+2      	; 0x4df4 <strncasecmp+0x16>
    4df2:	80 5e       	subi	r24, 0xE0	; 224
    4df4:	61 91       	ld	r22, Z+
    4df6:	61 34       	cpi	r22, 0x41	; 65
    4df8:	1c f0       	brlt	.+6      	; 0x4e00 <strncasecmp+0x22>
    4dfa:	6b 35       	cpi	r22, 0x5B	; 91
    4dfc:	0c f4       	brge	.+2      	; 0x4e00 <strncasecmp+0x22>
    4dfe:	60 5e       	subi	r22, 0xE0	; 224
    4e00:	86 1b       	sub	r24, r22
    4e02:	61 11       	cpse	r22, r1
    4e04:	71 f3       	breq	.-36     	; 0x4de2 <strncasecmp+0x4>
    4e06:	99 0b       	sbc	r25, r25
    4e08:	08 95       	ret
    4e0a:	88 1b       	sub	r24, r24
    4e0c:	fc cf       	rjmp	.-8      	; 0x4e06 <strncasecmp+0x28>

00004e0e <printf>:
    4e0e:	cf 93       	push	r28
    4e10:	df 93       	push	r29
    4e12:	cd b7       	in	r28, 0x3d	; 61
    4e14:	de b7       	in	r29, 0x3e	; 62
    4e16:	ae 01       	movw	r20, r28
    4e18:	4a 5f       	subi	r20, 0xFA	; 250
    4e1a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e1c:	fa 01       	movw	r30, r20
    4e1e:	61 91       	ld	r22, Z+
    4e20:	71 91       	ld	r23, Z+
    4e22:	af 01       	movw	r20, r30
    4e24:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <__iob+0x2>
    4e28:	90 91 2b 0a 	lds	r25, 0x0A2B	; 0x800a2b <__iob+0x3>
    4e2c:	61 d0       	rcall	.+194    	; 0x4ef0 <vfprintf>
    4e2e:	df 91       	pop	r29
    4e30:	cf 91       	pop	r28
    4e32:	08 95       	ret

00004e34 <puts>:
    4e34:	0f 93       	push	r16
    4e36:	1f 93       	push	r17
    4e38:	cf 93       	push	r28
    4e3a:	df 93       	push	r29
    4e3c:	e0 91 2a 0a 	lds	r30, 0x0A2A	; 0x800a2a <__iob+0x2>
    4e40:	f0 91 2b 0a 	lds	r31, 0x0A2B	; 0x800a2b <__iob+0x3>
    4e44:	23 81       	ldd	r18, Z+3	; 0x03
    4e46:	21 ff       	sbrs	r18, 1
    4e48:	1b c0       	rjmp	.+54     	; 0x4e80 <puts+0x4c>
    4e4a:	8c 01       	movw	r16, r24
    4e4c:	d0 e0       	ldi	r29, 0x00	; 0
    4e4e:	c0 e0       	ldi	r28, 0x00	; 0
    4e50:	f8 01       	movw	r30, r16
    4e52:	81 91       	ld	r24, Z+
    4e54:	8f 01       	movw	r16, r30
    4e56:	60 91 2a 0a 	lds	r22, 0x0A2A	; 0x800a2a <__iob+0x2>
    4e5a:	70 91 2b 0a 	lds	r23, 0x0A2B	; 0x800a2b <__iob+0x3>
    4e5e:	db 01       	movw	r26, r22
    4e60:	18 96       	adiw	r26, 0x08	; 8
    4e62:	ed 91       	ld	r30, X+
    4e64:	fc 91       	ld	r31, X
    4e66:	19 97       	sbiw	r26, 0x09	; 9
    4e68:	88 23       	and	r24, r24
    4e6a:	31 f0       	breq	.+12     	; 0x4e78 <puts+0x44>
    4e6c:	19 95       	eicall
    4e6e:	89 2b       	or	r24, r25
    4e70:	79 f3       	breq	.-34     	; 0x4e50 <puts+0x1c>
    4e72:	df ef       	ldi	r29, 0xFF	; 255
    4e74:	cf ef       	ldi	r28, 0xFF	; 255
    4e76:	ec cf       	rjmp	.-40     	; 0x4e50 <puts+0x1c>
    4e78:	8a e0       	ldi	r24, 0x0A	; 10
    4e7a:	19 95       	eicall
    4e7c:	89 2b       	or	r24, r25
    4e7e:	19 f0       	breq	.+6      	; 0x4e86 <puts+0x52>
    4e80:	8f ef       	ldi	r24, 0xFF	; 255
    4e82:	9f ef       	ldi	r25, 0xFF	; 255
    4e84:	02 c0       	rjmp	.+4      	; 0x4e8a <puts+0x56>
    4e86:	8d 2f       	mov	r24, r29
    4e88:	9c 2f       	mov	r25, r28
    4e8a:	df 91       	pop	r29
    4e8c:	cf 91       	pop	r28
    4e8e:	1f 91       	pop	r17
    4e90:	0f 91       	pop	r16
    4e92:	08 95       	ret

00004e94 <sprintf>:
    4e94:	0f 93       	push	r16
    4e96:	1f 93       	push	r17
    4e98:	cf 93       	push	r28
    4e9a:	df 93       	push	r29
    4e9c:	cd b7       	in	r28, 0x3d	; 61
    4e9e:	de b7       	in	r29, 0x3e	; 62
    4ea0:	2e 97       	sbiw	r28, 0x0e	; 14
    4ea2:	0f b6       	in	r0, 0x3f	; 63
    4ea4:	f8 94       	cli
    4ea6:	de bf       	out	0x3e, r29	; 62
    4ea8:	0f be       	out	0x3f, r0	; 63
    4eaa:	cd bf       	out	0x3d, r28	; 61
    4eac:	0e 89       	ldd	r16, Y+22	; 0x16
    4eae:	1f 89       	ldd	r17, Y+23	; 0x17
    4eb0:	86 e0       	ldi	r24, 0x06	; 6
    4eb2:	8c 83       	std	Y+4, r24	; 0x04
    4eb4:	1a 83       	std	Y+2, r17	; 0x02
    4eb6:	09 83       	std	Y+1, r16	; 0x01
    4eb8:	8f ef       	ldi	r24, 0xFF	; 255
    4eba:	9f e7       	ldi	r25, 0x7F	; 127
    4ebc:	9e 83       	std	Y+6, r25	; 0x06
    4ebe:	8d 83       	std	Y+5, r24	; 0x05
    4ec0:	ae 01       	movw	r20, r28
    4ec2:	46 5e       	subi	r20, 0xE6	; 230
    4ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ec6:	68 8d       	ldd	r22, Y+24	; 0x18
    4ec8:	79 8d       	ldd	r23, Y+25	; 0x19
    4eca:	ce 01       	movw	r24, r28
    4ecc:	01 96       	adiw	r24, 0x01	; 1
    4ece:	10 d0       	rcall	.+32     	; 0x4ef0 <vfprintf>
    4ed0:	ef 81       	ldd	r30, Y+7	; 0x07
    4ed2:	f8 85       	ldd	r31, Y+8	; 0x08
    4ed4:	e0 0f       	add	r30, r16
    4ed6:	f1 1f       	adc	r31, r17
    4ed8:	10 82       	st	Z, r1
    4eda:	2e 96       	adiw	r28, 0x0e	; 14
    4edc:	0f b6       	in	r0, 0x3f	; 63
    4ede:	f8 94       	cli
    4ee0:	de bf       	out	0x3e, r29	; 62
    4ee2:	0f be       	out	0x3f, r0	; 63
    4ee4:	cd bf       	out	0x3d, r28	; 61
    4ee6:	df 91       	pop	r29
    4ee8:	cf 91       	pop	r28
    4eea:	1f 91       	pop	r17
    4eec:	0f 91       	pop	r16
    4eee:	08 95       	ret

00004ef0 <vfprintf>:
    4ef0:	2f 92       	push	r2
    4ef2:	3f 92       	push	r3
    4ef4:	4f 92       	push	r4
    4ef6:	5f 92       	push	r5
    4ef8:	6f 92       	push	r6
    4efa:	7f 92       	push	r7
    4efc:	8f 92       	push	r8
    4efe:	9f 92       	push	r9
    4f00:	af 92       	push	r10
    4f02:	bf 92       	push	r11
    4f04:	cf 92       	push	r12
    4f06:	df 92       	push	r13
    4f08:	ef 92       	push	r14
    4f0a:	ff 92       	push	r15
    4f0c:	0f 93       	push	r16
    4f0e:	1f 93       	push	r17
    4f10:	cf 93       	push	r28
    4f12:	df 93       	push	r29
    4f14:	cd b7       	in	r28, 0x3d	; 61
    4f16:	de b7       	in	r29, 0x3e	; 62
    4f18:	2b 97       	sbiw	r28, 0x0b	; 11
    4f1a:	0f b6       	in	r0, 0x3f	; 63
    4f1c:	f8 94       	cli
    4f1e:	de bf       	out	0x3e, r29	; 62
    4f20:	0f be       	out	0x3f, r0	; 63
    4f22:	cd bf       	out	0x3d, r28	; 61
    4f24:	6c 01       	movw	r12, r24
    4f26:	7b 01       	movw	r14, r22
    4f28:	8a 01       	movw	r16, r20
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	17 82       	std	Z+7, r1	; 0x07
    4f2e:	16 82       	std	Z+6, r1	; 0x06
    4f30:	83 81       	ldd	r24, Z+3	; 0x03
    4f32:	81 ff       	sbrs	r24, 1
    4f34:	bf c1       	rjmp	.+894    	; 0x52b4 <vfprintf+0x3c4>
    4f36:	ce 01       	movw	r24, r28
    4f38:	01 96       	adiw	r24, 0x01	; 1
    4f3a:	3c 01       	movw	r6, r24
    4f3c:	f6 01       	movw	r30, r12
    4f3e:	93 81       	ldd	r25, Z+3	; 0x03
    4f40:	f7 01       	movw	r30, r14
    4f42:	93 fd       	sbrc	r25, 3
    4f44:	85 91       	lpm	r24, Z+
    4f46:	93 ff       	sbrs	r25, 3
    4f48:	81 91       	ld	r24, Z+
    4f4a:	7f 01       	movw	r14, r30
    4f4c:	88 23       	and	r24, r24
    4f4e:	09 f4       	brne	.+2      	; 0x4f52 <vfprintf+0x62>
    4f50:	ad c1       	rjmp	.+858    	; 0x52ac <vfprintf+0x3bc>
    4f52:	85 32       	cpi	r24, 0x25	; 37
    4f54:	39 f4       	brne	.+14     	; 0x4f64 <vfprintf+0x74>
    4f56:	93 fd       	sbrc	r25, 3
    4f58:	85 91       	lpm	r24, Z+
    4f5a:	93 ff       	sbrs	r25, 3
    4f5c:	81 91       	ld	r24, Z+
    4f5e:	7f 01       	movw	r14, r30
    4f60:	85 32       	cpi	r24, 0x25	; 37
    4f62:	21 f4       	brne	.+8      	; 0x4f6c <vfprintf+0x7c>
    4f64:	b6 01       	movw	r22, r12
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	d6 d1       	rcall	.+940    	; 0x5316 <fputc>
    4f6a:	e8 cf       	rjmp	.-48     	; 0x4f3c <vfprintf+0x4c>
    4f6c:	91 2c       	mov	r9, r1
    4f6e:	21 2c       	mov	r2, r1
    4f70:	31 2c       	mov	r3, r1
    4f72:	ff e1       	ldi	r31, 0x1F	; 31
    4f74:	f3 15       	cp	r31, r3
    4f76:	d8 f0       	brcs	.+54     	; 0x4fae <vfprintf+0xbe>
    4f78:	8b 32       	cpi	r24, 0x2B	; 43
    4f7a:	79 f0       	breq	.+30     	; 0x4f9a <vfprintf+0xaa>
    4f7c:	38 f4       	brcc	.+14     	; 0x4f8c <vfprintf+0x9c>
    4f7e:	80 32       	cpi	r24, 0x20	; 32
    4f80:	79 f0       	breq	.+30     	; 0x4fa0 <vfprintf+0xb0>
    4f82:	83 32       	cpi	r24, 0x23	; 35
    4f84:	a1 f4       	brne	.+40     	; 0x4fae <vfprintf+0xbe>
    4f86:	23 2d       	mov	r18, r3
    4f88:	20 61       	ori	r18, 0x10	; 16
    4f8a:	1d c0       	rjmp	.+58     	; 0x4fc6 <vfprintf+0xd6>
    4f8c:	8d 32       	cpi	r24, 0x2D	; 45
    4f8e:	61 f0       	breq	.+24     	; 0x4fa8 <vfprintf+0xb8>
    4f90:	80 33       	cpi	r24, 0x30	; 48
    4f92:	69 f4       	brne	.+26     	; 0x4fae <vfprintf+0xbe>
    4f94:	23 2d       	mov	r18, r3
    4f96:	21 60       	ori	r18, 0x01	; 1
    4f98:	16 c0       	rjmp	.+44     	; 0x4fc6 <vfprintf+0xd6>
    4f9a:	83 2d       	mov	r24, r3
    4f9c:	82 60       	ori	r24, 0x02	; 2
    4f9e:	38 2e       	mov	r3, r24
    4fa0:	e3 2d       	mov	r30, r3
    4fa2:	e4 60       	ori	r30, 0x04	; 4
    4fa4:	3e 2e       	mov	r3, r30
    4fa6:	2a c0       	rjmp	.+84     	; 0x4ffc <vfprintf+0x10c>
    4fa8:	f3 2d       	mov	r31, r3
    4faa:	f8 60       	ori	r31, 0x08	; 8
    4fac:	1d c0       	rjmp	.+58     	; 0x4fe8 <vfprintf+0xf8>
    4fae:	37 fc       	sbrc	r3, 7
    4fb0:	2d c0       	rjmp	.+90     	; 0x500c <vfprintf+0x11c>
    4fb2:	20 ed       	ldi	r18, 0xD0	; 208
    4fb4:	28 0f       	add	r18, r24
    4fb6:	2a 30       	cpi	r18, 0x0A	; 10
    4fb8:	40 f0       	brcs	.+16     	; 0x4fca <vfprintf+0xda>
    4fba:	8e 32       	cpi	r24, 0x2E	; 46
    4fbc:	b9 f4       	brne	.+46     	; 0x4fec <vfprintf+0xfc>
    4fbe:	36 fc       	sbrc	r3, 6
    4fc0:	75 c1       	rjmp	.+746    	; 0x52ac <vfprintf+0x3bc>
    4fc2:	23 2d       	mov	r18, r3
    4fc4:	20 64       	ori	r18, 0x40	; 64
    4fc6:	32 2e       	mov	r3, r18
    4fc8:	19 c0       	rjmp	.+50     	; 0x4ffc <vfprintf+0x10c>
    4fca:	36 fe       	sbrs	r3, 6
    4fcc:	06 c0       	rjmp	.+12     	; 0x4fda <vfprintf+0xea>
    4fce:	8a e0       	ldi	r24, 0x0A	; 10
    4fd0:	98 9e       	mul	r9, r24
    4fd2:	20 0d       	add	r18, r0
    4fd4:	11 24       	eor	r1, r1
    4fd6:	92 2e       	mov	r9, r18
    4fd8:	11 c0       	rjmp	.+34     	; 0x4ffc <vfprintf+0x10c>
    4fda:	ea e0       	ldi	r30, 0x0A	; 10
    4fdc:	2e 9e       	mul	r2, r30
    4fde:	20 0d       	add	r18, r0
    4fe0:	11 24       	eor	r1, r1
    4fe2:	22 2e       	mov	r2, r18
    4fe4:	f3 2d       	mov	r31, r3
    4fe6:	f0 62       	ori	r31, 0x20	; 32
    4fe8:	3f 2e       	mov	r3, r31
    4fea:	08 c0       	rjmp	.+16     	; 0x4ffc <vfprintf+0x10c>
    4fec:	8c 36       	cpi	r24, 0x6C	; 108
    4fee:	21 f4       	brne	.+8      	; 0x4ff8 <vfprintf+0x108>
    4ff0:	83 2d       	mov	r24, r3
    4ff2:	80 68       	ori	r24, 0x80	; 128
    4ff4:	38 2e       	mov	r3, r24
    4ff6:	02 c0       	rjmp	.+4      	; 0x4ffc <vfprintf+0x10c>
    4ff8:	88 36       	cpi	r24, 0x68	; 104
    4ffa:	41 f4       	brne	.+16     	; 0x500c <vfprintf+0x11c>
    4ffc:	f7 01       	movw	r30, r14
    4ffe:	93 fd       	sbrc	r25, 3
    5000:	85 91       	lpm	r24, Z+
    5002:	93 ff       	sbrs	r25, 3
    5004:	81 91       	ld	r24, Z+
    5006:	7f 01       	movw	r14, r30
    5008:	81 11       	cpse	r24, r1
    500a:	b3 cf       	rjmp	.-154    	; 0x4f72 <vfprintf+0x82>
    500c:	98 2f       	mov	r25, r24
    500e:	9f 7d       	andi	r25, 0xDF	; 223
    5010:	95 54       	subi	r25, 0x45	; 69
    5012:	93 30       	cpi	r25, 0x03	; 3
    5014:	28 f4       	brcc	.+10     	; 0x5020 <vfprintf+0x130>
    5016:	0c 5f       	subi	r16, 0xFC	; 252
    5018:	1f 4f       	sbci	r17, 0xFF	; 255
    501a:	9f e3       	ldi	r25, 0x3F	; 63
    501c:	99 83       	std	Y+1, r25	; 0x01
    501e:	0d c0       	rjmp	.+26     	; 0x503a <vfprintf+0x14a>
    5020:	83 36       	cpi	r24, 0x63	; 99
    5022:	31 f0       	breq	.+12     	; 0x5030 <vfprintf+0x140>
    5024:	83 37       	cpi	r24, 0x73	; 115
    5026:	71 f0       	breq	.+28     	; 0x5044 <vfprintf+0x154>
    5028:	83 35       	cpi	r24, 0x53	; 83
    502a:	09 f0       	breq	.+2      	; 0x502e <vfprintf+0x13e>
    502c:	55 c0       	rjmp	.+170    	; 0x50d8 <vfprintf+0x1e8>
    502e:	20 c0       	rjmp	.+64     	; 0x5070 <vfprintf+0x180>
    5030:	f8 01       	movw	r30, r16
    5032:	80 81       	ld	r24, Z
    5034:	89 83       	std	Y+1, r24	; 0x01
    5036:	0e 5f       	subi	r16, 0xFE	; 254
    5038:	1f 4f       	sbci	r17, 0xFF	; 255
    503a:	88 24       	eor	r8, r8
    503c:	83 94       	inc	r8
    503e:	91 2c       	mov	r9, r1
    5040:	53 01       	movw	r10, r6
    5042:	12 c0       	rjmp	.+36     	; 0x5068 <vfprintf+0x178>
    5044:	28 01       	movw	r4, r16
    5046:	f2 e0       	ldi	r31, 0x02	; 2
    5048:	4f 0e       	add	r4, r31
    504a:	51 1c       	adc	r5, r1
    504c:	f8 01       	movw	r30, r16
    504e:	a0 80       	ld	r10, Z
    5050:	b1 80       	ldd	r11, Z+1	; 0x01
    5052:	36 fe       	sbrs	r3, 6
    5054:	03 c0       	rjmp	.+6      	; 0x505c <vfprintf+0x16c>
    5056:	69 2d       	mov	r22, r9
    5058:	70 e0       	ldi	r23, 0x00	; 0
    505a:	02 c0       	rjmp	.+4      	; 0x5060 <vfprintf+0x170>
    505c:	6f ef       	ldi	r22, 0xFF	; 255
    505e:	7f ef       	ldi	r23, 0xFF	; 255
    5060:	c5 01       	movw	r24, r10
    5062:	4e d1       	rcall	.+668    	; 0x5300 <strnlen>
    5064:	4c 01       	movw	r8, r24
    5066:	82 01       	movw	r16, r4
    5068:	f3 2d       	mov	r31, r3
    506a:	ff 77       	andi	r31, 0x7F	; 127
    506c:	3f 2e       	mov	r3, r31
    506e:	15 c0       	rjmp	.+42     	; 0x509a <vfprintf+0x1aa>
    5070:	28 01       	movw	r4, r16
    5072:	22 e0       	ldi	r18, 0x02	; 2
    5074:	42 0e       	add	r4, r18
    5076:	51 1c       	adc	r5, r1
    5078:	f8 01       	movw	r30, r16
    507a:	a0 80       	ld	r10, Z
    507c:	b1 80       	ldd	r11, Z+1	; 0x01
    507e:	36 fe       	sbrs	r3, 6
    5080:	03 c0       	rjmp	.+6      	; 0x5088 <vfprintf+0x198>
    5082:	69 2d       	mov	r22, r9
    5084:	70 e0       	ldi	r23, 0x00	; 0
    5086:	02 c0       	rjmp	.+4      	; 0x508c <vfprintf+0x19c>
    5088:	6f ef       	ldi	r22, 0xFF	; 255
    508a:	7f ef       	ldi	r23, 0xFF	; 255
    508c:	c5 01       	movw	r24, r10
    508e:	2d d1       	rcall	.+602    	; 0x52ea <strnlen_P>
    5090:	4c 01       	movw	r8, r24
    5092:	f3 2d       	mov	r31, r3
    5094:	f0 68       	ori	r31, 0x80	; 128
    5096:	3f 2e       	mov	r3, r31
    5098:	82 01       	movw	r16, r4
    509a:	33 fc       	sbrc	r3, 3
    509c:	19 c0       	rjmp	.+50     	; 0x50d0 <vfprintf+0x1e0>
    509e:	82 2d       	mov	r24, r2
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	88 16       	cp	r8, r24
    50a4:	99 06       	cpc	r9, r25
    50a6:	a0 f4       	brcc	.+40     	; 0x50d0 <vfprintf+0x1e0>
    50a8:	b6 01       	movw	r22, r12
    50aa:	80 e2       	ldi	r24, 0x20	; 32
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	33 d1       	rcall	.+614    	; 0x5316 <fputc>
    50b0:	2a 94       	dec	r2
    50b2:	f5 cf       	rjmp	.-22     	; 0x509e <vfprintf+0x1ae>
    50b4:	f5 01       	movw	r30, r10
    50b6:	37 fc       	sbrc	r3, 7
    50b8:	85 91       	lpm	r24, Z+
    50ba:	37 fe       	sbrs	r3, 7
    50bc:	81 91       	ld	r24, Z+
    50be:	5f 01       	movw	r10, r30
    50c0:	b6 01       	movw	r22, r12
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	28 d1       	rcall	.+592    	; 0x5316 <fputc>
    50c6:	21 10       	cpse	r2, r1
    50c8:	2a 94       	dec	r2
    50ca:	21 e0       	ldi	r18, 0x01	; 1
    50cc:	82 1a       	sub	r8, r18
    50ce:	91 08       	sbc	r9, r1
    50d0:	81 14       	cp	r8, r1
    50d2:	91 04       	cpc	r9, r1
    50d4:	79 f7       	brne	.-34     	; 0x50b4 <vfprintf+0x1c4>
    50d6:	e1 c0       	rjmp	.+450    	; 0x529a <vfprintf+0x3aa>
    50d8:	84 36       	cpi	r24, 0x64	; 100
    50da:	11 f0       	breq	.+4      	; 0x50e0 <vfprintf+0x1f0>
    50dc:	89 36       	cpi	r24, 0x69	; 105
    50de:	39 f5       	brne	.+78     	; 0x512e <vfprintf+0x23e>
    50e0:	f8 01       	movw	r30, r16
    50e2:	37 fe       	sbrs	r3, 7
    50e4:	07 c0       	rjmp	.+14     	; 0x50f4 <vfprintf+0x204>
    50e6:	60 81       	ld	r22, Z
    50e8:	71 81       	ldd	r23, Z+1	; 0x01
    50ea:	82 81       	ldd	r24, Z+2	; 0x02
    50ec:	93 81       	ldd	r25, Z+3	; 0x03
    50ee:	0c 5f       	subi	r16, 0xFC	; 252
    50f0:	1f 4f       	sbci	r17, 0xFF	; 255
    50f2:	08 c0       	rjmp	.+16     	; 0x5104 <vfprintf+0x214>
    50f4:	60 81       	ld	r22, Z
    50f6:	71 81       	ldd	r23, Z+1	; 0x01
    50f8:	07 2e       	mov	r0, r23
    50fa:	00 0c       	add	r0, r0
    50fc:	88 0b       	sbc	r24, r24
    50fe:	99 0b       	sbc	r25, r25
    5100:	0e 5f       	subi	r16, 0xFE	; 254
    5102:	1f 4f       	sbci	r17, 0xFF	; 255
    5104:	f3 2d       	mov	r31, r3
    5106:	ff 76       	andi	r31, 0x6F	; 111
    5108:	3f 2e       	mov	r3, r31
    510a:	97 ff       	sbrs	r25, 7
    510c:	09 c0       	rjmp	.+18     	; 0x5120 <vfprintf+0x230>
    510e:	90 95       	com	r25
    5110:	80 95       	com	r24
    5112:	70 95       	com	r23
    5114:	61 95       	neg	r22
    5116:	7f 4f       	sbci	r23, 0xFF	; 255
    5118:	8f 4f       	sbci	r24, 0xFF	; 255
    511a:	9f 4f       	sbci	r25, 0xFF	; 255
    511c:	f0 68       	ori	r31, 0x80	; 128
    511e:	3f 2e       	mov	r3, r31
    5120:	2a e0       	ldi	r18, 0x0A	; 10
    5122:	30 e0       	ldi	r19, 0x00	; 0
    5124:	a3 01       	movw	r20, r6
    5126:	33 d1       	rcall	.+614    	; 0x538e <__ultoa_invert>
    5128:	88 2e       	mov	r8, r24
    512a:	86 18       	sub	r8, r6
    512c:	44 c0       	rjmp	.+136    	; 0x51b6 <vfprintf+0x2c6>
    512e:	85 37       	cpi	r24, 0x75	; 117
    5130:	31 f4       	brne	.+12     	; 0x513e <vfprintf+0x24e>
    5132:	23 2d       	mov	r18, r3
    5134:	2f 7e       	andi	r18, 0xEF	; 239
    5136:	b2 2e       	mov	r11, r18
    5138:	2a e0       	ldi	r18, 0x0A	; 10
    513a:	30 e0       	ldi	r19, 0x00	; 0
    513c:	25 c0       	rjmp	.+74     	; 0x5188 <vfprintf+0x298>
    513e:	93 2d       	mov	r25, r3
    5140:	99 7f       	andi	r25, 0xF9	; 249
    5142:	b9 2e       	mov	r11, r25
    5144:	8f 36       	cpi	r24, 0x6F	; 111
    5146:	c1 f0       	breq	.+48     	; 0x5178 <vfprintf+0x288>
    5148:	18 f4       	brcc	.+6      	; 0x5150 <vfprintf+0x260>
    514a:	88 35       	cpi	r24, 0x58	; 88
    514c:	79 f0       	breq	.+30     	; 0x516c <vfprintf+0x27c>
    514e:	ae c0       	rjmp	.+348    	; 0x52ac <vfprintf+0x3bc>
    5150:	80 37       	cpi	r24, 0x70	; 112
    5152:	19 f0       	breq	.+6      	; 0x515a <vfprintf+0x26a>
    5154:	88 37       	cpi	r24, 0x78	; 120
    5156:	21 f0       	breq	.+8      	; 0x5160 <vfprintf+0x270>
    5158:	a9 c0       	rjmp	.+338    	; 0x52ac <vfprintf+0x3bc>
    515a:	e9 2f       	mov	r30, r25
    515c:	e0 61       	ori	r30, 0x10	; 16
    515e:	be 2e       	mov	r11, r30
    5160:	b4 fe       	sbrs	r11, 4
    5162:	0d c0       	rjmp	.+26     	; 0x517e <vfprintf+0x28e>
    5164:	fb 2d       	mov	r31, r11
    5166:	f4 60       	ori	r31, 0x04	; 4
    5168:	bf 2e       	mov	r11, r31
    516a:	09 c0       	rjmp	.+18     	; 0x517e <vfprintf+0x28e>
    516c:	34 fe       	sbrs	r3, 4
    516e:	0a c0       	rjmp	.+20     	; 0x5184 <vfprintf+0x294>
    5170:	29 2f       	mov	r18, r25
    5172:	26 60       	ori	r18, 0x06	; 6
    5174:	b2 2e       	mov	r11, r18
    5176:	06 c0       	rjmp	.+12     	; 0x5184 <vfprintf+0x294>
    5178:	28 e0       	ldi	r18, 0x08	; 8
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	05 c0       	rjmp	.+10     	; 0x5188 <vfprintf+0x298>
    517e:	20 e1       	ldi	r18, 0x10	; 16
    5180:	30 e0       	ldi	r19, 0x00	; 0
    5182:	02 c0       	rjmp	.+4      	; 0x5188 <vfprintf+0x298>
    5184:	20 e1       	ldi	r18, 0x10	; 16
    5186:	32 e0       	ldi	r19, 0x02	; 2
    5188:	f8 01       	movw	r30, r16
    518a:	b7 fe       	sbrs	r11, 7
    518c:	07 c0       	rjmp	.+14     	; 0x519c <vfprintf+0x2ac>
    518e:	60 81       	ld	r22, Z
    5190:	71 81       	ldd	r23, Z+1	; 0x01
    5192:	82 81       	ldd	r24, Z+2	; 0x02
    5194:	93 81       	ldd	r25, Z+3	; 0x03
    5196:	0c 5f       	subi	r16, 0xFC	; 252
    5198:	1f 4f       	sbci	r17, 0xFF	; 255
    519a:	06 c0       	rjmp	.+12     	; 0x51a8 <vfprintf+0x2b8>
    519c:	60 81       	ld	r22, Z
    519e:	71 81       	ldd	r23, Z+1	; 0x01
    51a0:	80 e0       	ldi	r24, 0x00	; 0
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	0e 5f       	subi	r16, 0xFE	; 254
    51a6:	1f 4f       	sbci	r17, 0xFF	; 255
    51a8:	a3 01       	movw	r20, r6
    51aa:	f1 d0       	rcall	.+482    	; 0x538e <__ultoa_invert>
    51ac:	88 2e       	mov	r8, r24
    51ae:	86 18       	sub	r8, r6
    51b0:	fb 2d       	mov	r31, r11
    51b2:	ff 77       	andi	r31, 0x7F	; 127
    51b4:	3f 2e       	mov	r3, r31
    51b6:	36 fe       	sbrs	r3, 6
    51b8:	0d c0       	rjmp	.+26     	; 0x51d4 <vfprintf+0x2e4>
    51ba:	23 2d       	mov	r18, r3
    51bc:	2e 7f       	andi	r18, 0xFE	; 254
    51be:	a2 2e       	mov	r10, r18
    51c0:	89 14       	cp	r8, r9
    51c2:	58 f4       	brcc	.+22     	; 0x51da <vfprintf+0x2ea>
    51c4:	34 fe       	sbrs	r3, 4
    51c6:	0b c0       	rjmp	.+22     	; 0x51de <vfprintf+0x2ee>
    51c8:	32 fc       	sbrc	r3, 2
    51ca:	09 c0       	rjmp	.+18     	; 0x51de <vfprintf+0x2ee>
    51cc:	83 2d       	mov	r24, r3
    51ce:	8e 7e       	andi	r24, 0xEE	; 238
    51d0:	a8 2e       	mov	r10, r24
    51d2:	05 c0       	rjmp	.+10     	; 0x51de <vfprintf+0x2ee>
    51d4:	b8 2c       	mov	r11, r8
    51d6:	a3 2c       	mov	r10, r3
    51d8:	03 c0       	rjmp	.+6      	; 0x51e0 <vfprintf+0x2f0>
    51da:	b8 2c       	mov	r11, r8
    51dc:	01 c0       	rjmp	.+2      	; 0x51e0 <vfprintf+0x2f0>
    51de:	b9 2c       	mov	r11, r9
    51e0:	a4 fe       	sbrs	r10, 4
    51e2:	0f c0       	rjmp	.+30     	; 0x5202 <vfprintf+0x312>
    51e4:	fe 01       	movw	r30, r28
    51e6:	e8 0d       	add	r30, r8
    51e8:	f1 1d       	adc	r31, r1
    51ea:	80 81       	ld	r24, Z
    51ec:	80 33       	cpi	r24, 0x30	; 48
    51ee:	21 f4       	brne	.+8      	; 0x51f8 <vfprintf+0x308>
    51f0:	9a 2d       	mov	r25, r10
    51f2:	99 7e       	andi	r25, 0xE9	; 233
    51f4:	a9 2e       	mov	r10, r25
    51f6:	09 c0       	rjmp	.+18     	; 0x520a <vfprintf+0x31a>
    51f8:	a2 fe       	sbrs	r10, 2
    51fa:	06 c0       	rjmp	.+12     	; 0x5208 <vfprintf+0x318>
    51fc:	b3 94       	inc	r11
    51fe:	b3 94       	inc	r11
    5200:	04 c0       	rjmp	.+8      	; 0x520a <vfprintf+0x31a>
    5202:	8a 2d       	mov	r24, r10
    5204:	86 78       	andi	r24, 0x86	; 134
    5206:	09 f0       	breq	.+2      	; 0x520a <vfprintf+0x31a>
    5208:	b3 94       	inc	r11
    520a:	a3 fc       	sbrc	r10, 3
    520c:	10 c0       	rjmp	.+32     	; 0x522e <vfprintf+0x33e>
    520e:	a0 fe       	sbrs	r10, 0
    5210:	06 c0       	rjmp	.+12     	; 0x521e <vfprintf+0x32e>
    5212:	b2 14       	cp	r11, r2
    5214:	80 f4       	brcc	.+32     	; 0x5236 <vfprintf+0x346>
    5216:	28 0c       	add	r2, r8
    5218:	92 2c       	mov	r9, r2
    521a:	9b 18       	sub	r9, r11
    521c:	0d c0       	rjmp	.+26     	; 0x5238 <vfprintf+0x348>
    521e:	b2 14       	cp	r11, r2
    5220:	58 f4       	brcc	.+22     	; 0x5238 <vfprintf+0x348>
    5222:	b6 01       	movw	r22, r12
    5224:	80 e2       	ldi	r24, 0x20	; 32
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	76 d0       	rcall	.+236    	; 0x5316 <fputc>
    522a:	b3 94       	inc	r11
    522c:	f8 cf       	rjmp	.-16     	; 0x521e <vfprintf+0x32e>
    522e:	b2 14       	cp	r11, r2
    5230:	18 f4       	brcc	.+6      	; 0x5238 <vfprintf+0x348>
    5232:	2b 18       	sub	r2, r11
    5234:	02 c0       	rjmp	.+4      	; 0x523a <vfprintf+0x34a>
    5236:	98 2c       	mov	r9, r8
    5238:	21 2c       	mov	r2, r1
    523a:	a4 fe       	sbrs	r10, 4
    523c:	0f c0       	rjmp	.+30     	; 0x525c <vfprintf+0x36c>
    523e:	b6 01       	movw	r22, r12
    5240:	80 e3       	ldi	r24, 0x30	; 48
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	68 d0       	rcall	.+208    	; 0x5316 <fputc>
    5246:	a2 fe       	sbrs	r10, 2
    5248:	16 c0       	rjmp	.+44     	; 0x5276 <vfprintf+0x386>
    524a:	a1 fc       	sbrc	r10, 1
    524c:	03 c0       	rjmp	.+6      	; 0x5254 <vfprintf+0x364>
    524e:	88 e7       	ldi	r24, 0x78	; 120
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	02 c0       	rjmp	.+4      	; 0x5258 <vfprintf+0x368>
    5254:	88 e5       	ldi	r24, 0x58	; 88
    5256:	90 e0       	ldi	r25, 0x00	; 0
    5258:	b6 01       	movw	r22, r12
    525a:	0c c0       	rjmp	.+24     	; 0x5274 <vfprintf+0x384>
    525c:	8a 2d       	mov	r24, r10
    525e:	86 78       	andi	r24, 0x86	; 134
    5260:	51 f0       	breq	.+20     	; 0x5276 <vfprintf+0x386>
    5262:	a1 fe       	sbrs	r10, 1
    5264:	02 c0       	rjmp	.+4      	; 0x526a <vfprintf+0x37a>
    5266:	8b e2       	ldi	r24, 0x2B	; 43
    5268:	01 c0       	rjmp	.+2      	; 0x526c <vfprintf+0x37c>
    526a:	80 e2       	ldi	r24, 0x20	; 32
    526c:	a7 fc       	sbrc	r10, 7
    526e:	8d e2       	ldi	r24, 0x2D	; 45
    5270:	b6 01       	movw	r22, r12
    5272:	90 e0       	ldi	r25, 0x00	; 0
    5274:	50 d0       	rcall	.+160    	; 0x5316 <fputc>
    5276:	89 14       	cp	r8, r9
    5278:	30 f4       	brcc	.+12     	; 0x5286 <vfprintf+0x396>
    527a:	b6 01       	movw	r22, r12
    527c:	80 e3       	ldi	r24, 0x30	; 48
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	4a d0       	rcall	.+148    	; 0x5316 <fputc>
    5282:	9a 94       	dec	r9
    5284:	f8 cf       	rjmp	.-16     	; 0x5276 <vfprintf+0x386>
    5286:	8a 94       	dec	r8
    5288:	f3 01       	movw	r30, r6
    528a:	e8 0d       	add	r30, r8
    528c:	f1 1d       	adc	r31, r1
    528e:	80 81       	ld	r24, Z
    5290:	b6 01       	movw	r22, r12
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	40 d0       	rcall	.+128    	; 0x5316 <fputc>
    5296:	81 10       	cpse	r8, r1
    5298:	f6 cf       	rjmp	.-20     	; 0x5286 <vfprintf+0x396>
    529a:	22 20       	and	r2, r2
    529c:	09 f4       	brne	.+2      	; 0x52a0 <vfprintf+0x3b0>
    529e:	4e ce       	rjmp	.-868    	; 0x4f3c <vfprintf+0x4c>
    52a0:	b6 01       	movw	r22, r12
    52a2:	80 e2       	ldi	r24, 0x20	; 32
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	37 d0       	rcall	.+110    	; 0x5316 <fputc>
    52a8:	2a 94       	dec	r2
    52aa:	f7 cf       	rjmp	.-18     	; 0x529a <vfprintf+0x3aa>
    52ac:	f6 01       	movw	r30, r12
    52ae:	86 81       	ldd	r24, Z+6	; 0x06
    52b0:	97 81       	ldd	r25, Z+7	; 0x07
    52b2:	02 c0       	rjmp	.+4      	; 0x52b8 <vfprintf+0x3c8>
    52b4:	8f ef       	ldi	r24, 0xFF	; 255
    52b6:	9f ef       	ldi	r25, 0xFF	; 255
    52b8:	2b 96       	adiw	r28, 0x0b	; 11
    52ba:	0f b6       	in	r0, 0x3f	; 63
    52bc:	f8 94       	cli
    52be:	de bf       	out	0x3e, r29	; 62
    52c0:	0f be       	out	0x3f, r0	; 63
    52c2:	cd bf       	out	0x3d, r28	; 61
    52c4:	df 91       	pop	r29
    52c6:	cf 91       	pop	r28
    52c8:	1f 91       	pop	r17
    52ca:	0f 91       	pop	r16
    52cc:	ff 90       	pop	r15
    52ce:	ef 90       	pop	r14
    52d0:	df 90       	pop	r13
    52d2:	cf 90       	pop	r12
    52d4:	bf 90       	pop	r11
    52d6:	af 90       	pop	r10
    52d8:	9f 90       	pop	r9
    52da:	8f 90       	pop	r8
    52dc:	7f 90       	pop	r7
    52de:	6f 90       	pop	r6
    52e0:	5f 90       	pop	r5
    52e2:	4f 90       	pop	r4
    52e4:	3f 90       	pop	r3
    52e6:	2f 90       	pop	r2
    52e8:	08 95       	ret

000052ea <strnlen_P>:
    52ea:	fc 01       	movw	r30, r24
    52ec:	05 90       	lpm	r0, Z+
    52ee:	61 50       	subi	r22, 0x01	; 1
    52f0:	70 40       	sbci	r23, 0x00	; 0
    52f2:	01 10       	cpse	r0, r1
    52f4:	d8 f7       	brcc	.-10     	; 0x52ec <strnlen_P+0x2>
    52f6:	80 95       	com	r24
    52f8:	90 95       	com	r25
    52fa:	8e 0f       	add	r24, r30
    52fc:	9f 1f       	adc	r25, r31
    52fe:	08 95       	ret

00005300 <strnlen>:
    5300:	fc 01       	movw	r30, r24
    5302:	61 50       	subi	r22, 0x01	; 1
    5304:	70 40       	sbci	r23, 0x00	; 0
    5306:	01 90       	ld	r0, Z+
    5308:	01 10       	cpse	r0, r1
    530a:	d8 f7       	brcc	.-10     	; 0x5302 <strnlen+0x2>
    530c:	80 95       	com	r24
    530e:	90 95       	com	r25
    5310:	8e 0f       	add	r24, r30
    5312:	9f 1f       	adc	r25, r31
    5314:	08 95       	ret

00005316 <fputc>:
    5316:	0f 93       	push	r16
    5318:	1f 93       	push	r17
    531a:	cf 93       	push	r28
    531c:	df 93       	push	r29
    531e:	fb 01       	movw	r30, r22
    5320:	23 81       	ldd	r18, Z+3	; 0x03
    5322:	21 fd       	sbrc	r18, 1
    5324:	03 c0       	rjmp	.+6      	; 0x532c <fputc+0x16>
    5326:	8f ef       	ldi	r24, 0xFF	; 255
    5328:	9f ef       	ldi	r25, 0xFF	; 255
    532a:	2c c0       	rjmp	.+88     	; 0x5384 <fputc+0x6e>
    532c:	22 ff       	sbrs	r18, 2
    532e:	16 c0       	rjmp	.+44     	; 0x535c <fputc+0x46>
    5330:	46 81       	ldd	r20, Z+6	; 0x06
    5332:	57 81       	ldd	r21, Z+7	; 0x07
    5334:	24 81       	ldd	r18, Z+4	; 0x04
    5336:	35 81       	ldd	r19, Z+5	; 0x05
    5338:	42 17       	cp	r20, r18
    533a:	53 07       	cpc	r21, r19
    533c:	44 f4       	brge	.+16     	; 0x534e <fputc+0x38>
    533e:	a0 81       	ld	r26, Z
    5340:	b1 81       	ldd	r27, Z+1	; 0x01
    5342:	9d 01       	movw	r18, r26
    5344:	2f 5f       	subi	r18, 0xFF	; 255
    5346:	3f 4f       	sbci	r19, 0xFF	; 255
    5348:	31 83       	std	Z+1, r19	; 0x01
    534a:	20 83       	st	Z, r18
    534c:	8c 93       	st	X, r24
    534e:	26 81       	ldd	r18, Z+6	; 0x06
    5350:	37 81       	ldd	r19, Z+7	; 0x07
    5352:	2f 5f       	subi	r18, 0xFF	; 255
    5354:	3f 4f       	sbci	r19, 0xFF	; 255
    5356:	37 83       	std	Z+7, r19	; 0x07
    5358:	26 83       	std	Z+6, r18	; 0x06
    535a:	14 c0       	rjmp	.+40     	; 0x5384 <fputc+0x6e>
    535c:	8b 01       	movw	r16, r22
    535e:	ec 01       	movw	r28, r24
    5360:	fb 01       	movw	r30, r22
    5362:	00 84       	ldd	r0, Z+8	; 0x08
    5364:	f1 85       	ldd	r31, Z+9	; 0x09
    5366:	e0 2d       	mov	r30, r0
    5368:	19 95       	eicall
    536a:	89 2b       	or	r24, r25
    536c:	e1 f6       	brne	.-72     	; 0x5326 <fputc+0x10>
    536e:	d8 01       	movw	r26, r16
    5370:	16 96       	adiw	r26, 0x06	; 6
    5372:	8d 91       	ld	r24, X+
    5374:	9c 91       	ld	r25, X
    5376:	17 97       	sbiw	r26, 0x07	; 7
    5378:	01 96       	adiw	r24, 0x01	; 1
    537a:	17 96       	adiw	r26, 0x07	; 7
    537c:	9c 93       	st	X, r25
    537e:	8e 93       	st	-X, r24
    5380:	16 97       	sbiw	r26, 0x06	; 6
    5382:	ce 01       	movw	r24, r28
    5384:	df 91       	pop	r29
    5386:	cf 91       	pop	r28
    5388:	1f 91       	pop	r17
    538a:	0f 91       	pop	r16
    538c:	08 95       	ret

0000538e <__ultoa_invert>:
    538e:	fa 01       	movw	r30, r20
    5390:	aa 27       	eor	r26, r26
    5392:	28 30       	cpi	r18, 0x08	; 8
    5394:	51 f1       	breq	.+84     	; 0x53ea <__ultoa_invert+0x5c>
    5396:	20 31       	cpi	r18, 0x10	; 16
    5398:	81 f1       	breq	.+96     	; 0x53fa <__ultoa_invert+0x6c>
    539a:	e8 94       	clt
    539c:	6f 93       	push	r22
    539e:	6e 7f       	andi	r22, 0xFE	; 254
    53a0:	6e 5f       	subi	r22, 0xFE	; 254
    53a2:	7f 4f       	sbci	r23, 0xFF	; 255
    53a4:	8f 4f       	sbci	r24, 0xFF	; 255
    53a6:	9f 4f       	sbci	r25, 0xFF	; 255
    53a8:	af 4f       	sbci	r26, 0xFF	; 255
    53aa:	b1 e0       	ldi	r27, 0x01	; 1
    53ac:	3e d0       	rcall	.+124    	; 0x542a <__ultoa_invert+0x9c>
    53ae:	b4 e0       	ldi	r27, 0x04	; 4
    53b0:	3c d0       	rcall	.+120    	; 0x542a <__ultoa_invert+0x9c>
    53b2:	67 0f       	add	r22, r23
    53b4:	78 1f       	adc	r23, r24
    53b6:	89 1f       	adc	r24, r25
    53b8:	9a 1f       	adc	r25, r26
    53ba:	a1 1d       	adc	r26, r1
    53bc:	68 0f       	add	r22, r24
    53be:	79 1f       	adc	r23, r25
    53c0:	8a 1f       	adc	r24, r26
    53c2:	91 1d       	adc	r25, r1
    53c4:	a1 1d       	adc	r26, r1
    53c6:	6a 0f       	add	r22, r26
    53c8:	71 1d       	adc	r23, r1
    53ca:	81 1d       	adc	r24, r1
    53cc:	91 1d       	adc	r25, r1
    53ce:	a1 1d       	adc	r26, r1
    53d0:	20 d0       	rcall	.+64     	; 0x5412 <__ultoa_invert+0x84>
    53d2:	09 f4       	brne	.+2      	; 0x53d6 <__ultoa_invert+0x48>
    53d4:	68 94       	set
    53d6:	3f 91       	pop	r19
    53d8:	2a e0       	ldi	r18, 0x0A	; 10
    53da:	26 9f       	mul	r18, r22
    53dc:	11 24       	eor	r1, r1
    53de:	30 19       	sub	r19, r0
    53e0:	30 5d       	subi	r19, 0xD0	; 208
    53e2:	31 93       	st	Z+, r19
    53e4:	de f6       	brtc	.-74     	; 0x539c <__ultoa_invert+0xe>
    53e6:	cf 01       	movw	r24, r30
    53e8:	08 95       	ret
    53ea:	46 2f       	mov	r20, r22
    53ec:	47 70       	andi	r20, 0x07	; 7
    53ee:	40 5d       	subi	r20, 0xD0	; 208
    53f0:	41 93       	st	Z+, r20
    53f2:	b3 e0       	ldi	r27, 0x03	; 3
    53f4:	0f d0       	rcall	.+30     	; 0x5414 <__ultoa_invert+0x86>
    53f6:	c9 f7       	brne	.-14     	; 0x53ea <__ultoa_invert+0x5c>
    53f8:	f6 cf       	rjmp	.-20     	; 0x53e6 <__ultoa_invert+0x58>
    53fa:	46 2f       	mov	r20, r22
    53fc:	4f 70       	andi	r20, 0x0F	; 15
    53fe:	40 5d       	subi	r20, 0xD0	; 208
    5400:	4a 33       	cpi	r20, 0x3A	; 58
    5402:	18 f0       	brcs	.+6      	; 0x540a <__ultoa_invert+0x7c>
    5404:	49 5d       	subi	r20, 0xD9	; 217
    5406:	31 fd       	sbrc	r19, 1
    5408:	40 52       	subi	r20, 0x20	; 32
    540a:	41 93       	st	Z+, r20
    540c:	02 d0       	rcall	.+4      	; 0x5412 <__ultoa_invert+0x84>
    540e:	a9 f7       	brne	.-22     	; 0x53fa <__ultoa_invert+0x6c>
    5410:	ea cf       	rjmp	.-44     	; 0x53e6 <__ultoa_invert+0x58>
    5412:	b4 e0       	ldi	r27, 0x04	; 4
    5414:	a6 95       	lsr	r26
    5416:	97 95       	ror	r25
    5418:	87 95       	ror	r24
    541a:	77 95       	ror	r23
    541c:	67 95       	ror	r22
    541e:	ba 95       	dec	r27
    5420:	c9 f7       	brne	.-14     	; 0x5414 <__ultoa_invert+0x86>
    5422:	00 97       	sbiw	r24, 0x00	; 0
    5424:	61 05       	cpc	r22, r1
    5426:	71 05       	cpc	r23, r1
    5428:	08 95       	ret
    542a:	9b 01       	movw	r18, r22
    542c:	ac 01       	movw	r20, r24
    542e:	0a 2e       	mov	r0, r26
    5430:	06 94       	lsr	r0
    5432:	57 95       	ror	r21
    5434:	47 95       	ror	r20
    5436:	37 95       	ror	r19
    5438:	27 95       	ror	r18
    543a:	ba 95       	dec	r27
    543c:	c9 f7       	brne	.-14     	; 0x5430 <__ultoa_invert+0xa2>
    543e:	62 0f       	add	r22, r18
    5440:	73 1f       	adc	r23, r19
    5442:	84 1f       	adc	r24, r20
    5444:	95 1f       	adc	r25, r21
    5446:	a0 1d       	adc	r26, r0
    5448:	08 95       	ret

0000544a <_exit>:
    544a:	f8 94       	cli

0000544c <__stop_program>:
    544c:	ff cf       	rjmp	.-2      	; 0x544c <__stop_program>
